<QueryResult Comment="via Cross-site scripting (XSS)" Source="BFCVEpartial" Version="1.0" Author="Irena Bojanova, NIST">
<CVE ID="CVE-2006-10001" CVSS="5.4">
<Description>A vulnerability, which was classified as problematic, was found in Subscribe to Comments Plugin up to 2.0.7 on WordPress. This affects an unknown part of the file subscribe-to-comments.php. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 2.0.8 is able to address this issue. The identifier of the patch is 9683bdf462fcac2f32b33be98f0b96497fbd1bb6. It is recommended to upgrade the affected component. The identifier VDB-222321 was assigned to this vulnerability.</Description>
<URL>https://github.com/wp-plugins/subscribe-to-comments/commit/9683bdf462fcac2f32b33be98f0b96497fbd1bb6</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2008-10002" CVSS="6.1">
<Description>A vulnerability has been found in cfire24 ajaxlife up to 0.3.2 and classified as problematic. This vulnerability affects unknown code. The manipulation leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 0.3.3 is able to address this issue. The patch is identified as 9fb53b67312fe3f4336e01c1e3e1bedb4be0c1c8. It is recommended to upgrade the affected component. VDB-222286 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/cfire24/ajaxlife/commit/9fb53b67312fe3f4336e01c1e3e1bedb4be0c1c8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2009-10001" CVSS="6.1">
<Description>A vulnerability classified as problematic was found in jianlinwei cool-php-captcha up to 0.2. This vulnerability affects unknown code of the file example-form.php. The manipulation of the argument captcha with the input %3Cscript%3Ealert(1)%3C/script%3E leads to cross site scripting. The attack can be initiated remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 0.3 is able to address this issue. The name of the patch is c84fb6b153bebaf228feee0cbf50728d27ae3f80. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-218296.</Description>
<URL>https://github.com/jianlinwei/cool-php-captcha/commit/c84fb6b153bebaf228feee0cbf50728d27ae3f80</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2009-10002" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in dpup fittr-flickr. This issue affects some unknown processing of the file fittr-flickr/features/easy-exif.js of the component EXIF Preview Handler. The manipulation leads to cross site scripting. The attack may be initiated remotely. The identifier of the patch is 08875dd8a2e5d0d16568bb0d67cb4328062fccde. It is recommended to apply a patch to fix this issue. The identifier VDB-218297 was assigned to this vulnerability.</Description>
<URL>https://github.com/dpup/fittr-flickr/commit/08875dd8a2e5d0d16568bb0d67cb4328062fccde</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2009-10003" CVSS="6.1">
<Description>A vulnerability was found in capnsquarepants wordcraft up to 0.6. It has been classified as problematic. Affected is an unknown function of the file tag.php. The manipulation of the argument tag leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 0.7 is able to address this issue. The patch is identified as be23028633e8105de92f387036871c03f34d3124. It is recommended to upgrade the affected component. VDB-219714 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/capnsquarepants/wordcraft/commit/be23028633e8105de92f387036871c03f34d3124</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2009-10004" CVSS="6.1">
<Description>A vulnerability was found in Turante Sandbox Theme up to 1.5.2. It has been classified as problematic. This affects the function sandbox_body_class of the file functions.php. The manipulation of the argument page leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 1.6.1 is able to address this issue. The identifier of the patch is 8045b1e10970342f558b2c5f360e0bd135af2b10. It is recommended to upgrade the affected component. The identifier VDB-225357 was assigned to this vulnerability.</Description>
<URL>https://github.com/Turante/sandbox-theme/commit/8045b1e10970342f558b2c5f360e0bd135af2b10</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2010-10002" CVSS="6.1">
<Description>** UNSUPPORTED WHEN ASSIGNED ** A vulnerability classified as problematic has been found in SimpleSAMLphp simplesamlphp-module-openid. Affected is an unknown function of the file templates/consumer.php of the component OpenID Handler. The manipulation of the argument AuthState leads to cross site scripting. It is possible to launch the attack remotely. The complexity of an attack is rather high. The exploitability is told to be difficult. Upgrading to version 1.0 is able to address this issue. The patch is identified as d652d41ccaf8c45d5707e741c0c5d82a2365a9a3. It is recommended to upgrade the affected component. VDB-217170 is the identifier assigned to this vulnerability. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.</Description>
<URL>https://github.com/simplesamlphp/simplesamlphp-module-openid/commit/d652d41ccaf8c45d5707e741c0c5d82a2365a9a3</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2010-10004" CVSS="6.1">
<Description>A vulnerability was found in Information Cards Module on simpleSAMLphp and classified as problematic. This issue affects some unknown processing. The manipulation leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 1.0 is able to address this issue. The identifier of the patch is f6bfea49ae16dc6e179df8306d39c3694f1ef186. It is recommended to upgrade the affected component. The identifier VDB-217661 was assigned to this vulnerability.</Description>
<URL>https://github.com/simplesamlphp/simplesamlphp-module-infocard/commit/f6bfea49ae16dc6e179df8306d39c3694f1ef186</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2010-10008" CVSS="5.4">
<Description>** UNSUPPORTED WHEN ASSIGNED ** A vulnerability was found in simplesamlphp simplesamlphp-module-openidprovider up to 0.8.x. It has been declared as problematic. Affected by this vulnerability is an unknown functionality of the file templates/trust.tpl.php. The manipulation of the argument StateID leads to cross site scripting. The attack can be launched remotely. Upgrading to version 0.9.0 is able to address this issue. The identifier of the patch is 8365d48c863cf06ccf1465cc0a161cefae29d69d. It is recommended to upgrade the affected component. The identifier VDB-218473 was assigned to this vulnerability. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.</Description>
<URL>https://github.com/simplesamlphp/simplesamlphp-module-openidprovider/commit/8365d48c863cf06ccf1465cc0a161cefae29d69d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2010-10010" CVSS="6.1">
<Description>A vulnerability classified as problematic has been found in Stars Alliance PsychoStats up to 3.2.2a. This affects an unknown part of the file upload/admin/login.php. The manipulation of the argument ref leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 3.2.2b is able to address this issue. The identifier of the patch is 5d3b7311fd5085ec6ea1b1bfa9a05285964e07e4. It is recommended to upgrade the affected component. The identifier VDB-230265 was assigned to this vulnerability.</Description>
<URL>https://github.com/StarsAlliance/PsychoStats/commit/5d3b7311fd5085ec6ea1b1bfa9a05285964e07e4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2010-4264" CVSS="6.1">
<Description>It was found in vanilla forums before 2.0.10 a cross-site scripting vulnerability where a filename could contain arbitrary code to execute on the client side.</Description>
<URL>https://github.com/vanilla/vanilla/commit/4535a059e4e24ca11a2ef0b4d754f262398bcece</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2011-5018" CVSS="6.1">
<Description>Koala Framework before 2011-11-21 has XSS via the request_uri parameter.</Description>
<URL>https://github.com/koala-framework/koala-framework/commit/59f81ea6bd8ef96c04a706a3ca453cd656284faa</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2012-10002" CVSS="6.1">
<Description>A vulnerability was found in ahmyi RivetTracker. It has been declared as problematic. Affected by this vulnerability is the function changeColor of the file css.php. The manipulation of the argument set_css leads to cross site scripting. The attack can be launched remotely. The patch is named 45a0f33876d58cb7e4a0f17da149e58fc893b858. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217267.</Description>
<URL>https://github.com/ahmyi/rivettracker/commit/45a0f33876d58cb7e4a0f17da149e58fc893b858</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2012-10003" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in ahmyi RivetTracker. This issue affects some unknown processing. The manipulation of the argument $_SERVER['PHP_SELF'] leads to cross site scripting. The attack may be initiated remotely. The patch is named f053c5cc2bc44269b0496b5f275e349928a92ef9. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217271.</Description>
<URL>https://github.com/ahmyi/rivettracker/commit/f053c5cc2bc44269b0496b5f275e349928a92ef9</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2012-10004" CVSS="6.1">
<Description>A vulnerability was found in backdrop-contrib Basic Cart on Drupal. It has been classified as problematic. Affected is the function basic_cart_checkout_form_submit of the file basic_cart.cart.inc. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 1.x-1.1.1 is able to address this issue. The patch is identified as a10424ccd4b3b4b433cf33b73c1ad608b11890b4. It is recommended to upgrade the affected component. VDB-217950 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/backdrop-contrib/basic_cart/commit/a10424ccd4b3b4b433cf33b73c1ad608b11890b4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2012-10005" CVSS="6.1">
<Description>A vulnerability has been found in manikandan170890 php-form-builder-class and classified as problematic. Affected by this vulnerability is an unknown functionality of the file PFBC/Element/Textarea.php of the component Textarea Handler. The manipulation of the argument value leads to cross site scripting. The attack can be launched remotely. The exploit has been disclosed to the public and may be used. The patch is named 74897993818d826595fd5857038e6703456a594a. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-218155.</Description>
<URL>https://github.com/manikandan170890/php-form-builder-class/commit/74897993818d826595fd5857038e6703456a594a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2012-10007" CVSS="6.1">
<Description>A vulnerability was found in madgicweb BuddyStream Plugin up to 3.2.7 on WordPress. It has been declared as problematic. Affected by this vulnerability is an unknown functionality of the file ShareBox.php. The manipulation of the argument content/link/shares leads to cross site scripting. The attack can be launched remotely. Upgrading to version 3.2.8 is able to address this issue. The patch is named 7d5b9a89a27711aad76fd55ab4cc4185b545a1d0. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-221479.</Description>
<URL>https://github.com/madgicweb/buddystream/commit/7d5b9a89a27711aad76fd55ab4cc4185b545a1d0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2012-10013" CVSS="6.1">
<Description>A vulnerability was found in Kau-Boy Backend Localization Plugin up to 1.6.1 on WordPress. It has been rated as problematic. This issue affects some unknown processing of the file backend_localization.php. The manipulation leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 2.0 is able to address this issue. The patch is named 43dc96defd7944da12ff116476a6890acd7dd24b. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-227231.</Description>
<URL>https://github.com/wp-plugins/kau-boys-backend-localization/commit/43dc96defd7944da12ff116476a6890acd7dd24b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2012-10014" CVSS="6.1">
<Description>A vulnerability classified as problematic has been found in Kau-Boy Backend Localization Plugin 2.0 on WordPress. Affected is the function backend_localization_admin_settings/backend_localization_save_setting/backend_localization_login_form/localize_backend of the file backend_localization.php. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 2.0.1 is able to address this issue. The name of the patch is 36f457ee16dd114e510fd91a3ea9fbb3c1f87184. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-227232.</Description>
<URL>https://github.com/wp-plugins/kau-boys-backend-localization/commit/36f457ee16dd114e510fd91a3ea9fbb3c1f87184</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2013-10010" CVSS="6.1">
<Description>A vulnerability classified as problematic has been found in zerochplus. This affects the function PrintResList of the file test/mordor/thread.res.pl. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. The patch is named 9ddf9ecca8565341d8d26a3b2f64540bde4fa273. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-218007.</Description>
<URL>https://github.com/zerochplus/zerochplus/commit/9ddf9ecca8565341d8d26a3b2f64540bde4fa273</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2013-10020" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, was found in MMDeveloper A Forms Plugin up to 1.4.2 on WordPress. This affects an unknown part of the file a-forms.php. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 1.4.3 is able to address this issue. The identifier of the patch is 3e693197bd69b7173cc16d8d2e0a7d501a2a0b06. It is recommended to upgrade the affected component. The identifier VDB-222609 was assigned to this vulnerability.</Description>
<URL>https://github.com/wp-plugins/a-forms/commit/3e693197bd69b7173cc16d8d2e0a7d501a2a0b06</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2013-10021" CVSS="6.1">
<Description>A vulnerability was found in dd32 Debug Bar Plugin up to 0.8 on WordPress. It has been declared as problematic. Affected by this vulnerability is the function render of the file panels/class-debug-bar-queries.php. The manipulation leads to cross site scripting. The attack can be launched remotely. Upgrading to version 0.8.1 is able to address this issue. The patch is named 0842af8f8a556bc3e39b9ef758173b0a8a9ccbfc. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-222739.</Description>
<URL>https://github.com/dd32/debug-bar/commit/0842af8f8a556bc3e39b9ef758173b0a8a9ccbfc</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2013-10022" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in BestWebSoft Contact Form Plugin 3.51 on WordPress. Affected by this issue is the function cntctfrm_display_form/cntctfrm_check_form of the file contact_form.php. The manipulation leads to cross site scripting. The attack may be launched remotely. Upgrading to version 3.52 is able to address this issue. The patch is identified as 642ef1dc1751ab6642ce981fe126325bb574f898. It is recommended to upgrade the affected component. VDB-225002 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/wp-plugins/contact-form-plugin/commit/642ef1dc1751ab6642ce981fe126325bb574f898</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2013-10026" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in Mail Subscribe List Plugin up to 2.0.10 on WordPress. This issue affects some unknown processing of the file index.php. The manipulation of the argument sml_name/sml_email leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 2.1 is able to address this issue. The identifier of the patch is 484970ef8285cae51d2de3bd4e4684d33c956c28. It is recommended to upgrade the affected component. The identifier VDB-227765 was assigned to this vulnerability.</Description>
<URL>https://github.com/wp-plugins/mail-subscribe-list/commit/484970ef8285cae51d2de3bd4e4684d33c956c28</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2013-10028" CVSS="6.1">
<Description>A vulnerability was found in EELV Newsletter Plugin 2.x on WordPress. It has been rated as problematic. Affected by this issue is the function style_newsletter of the file lettreinfo.php. The manipulation of the argument email leads to cross site scripting. The attack may be launched remotely. The name of the patch is 3339b42316c5edf73e56eb209b6a3bb3e868d6ed. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-230660.</Description>
<URL>https://github.com/wp-plugins/eelv-newsletter/commit/3339b42316c5edf73e56eb209b6a3bb3e868d6ed</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2014-125027" CVSS="6.1">
<Description>A vulnerability has been found in Yuna Scatari TBDev up to 2.1.17 and classified as problematic. Affected by this vulnerability is the function get_user_icons of the file usersearch.php. The manipulation of the argument n/r/r2/em/ip/co/ma/d/d2/ul/ul2/ls/ls2/dl/dl2 leads to cross site scripting. The attack can be launched remotely. Upgrading to version 2.1.18 is able to address this issue. The patch is named 0ba3fd4be29dd48fa4455c236a9403b3149a4fd4. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-217147.</Description>
<URL>https://github.com/yunasc/tbdev/commit/0ba3fd4be29dd48fa4455c236a9403b3149a4fd4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2014-125031" CVSS="6.1">
<Description>A vulnerability was found in kirill2485 TekNet. It has been classified as problematic. Affected is an unknown function of the file pages/loggedin.php. The manipulation of the argument statusentery leads to cross site scripting. It is possible to launch the attack remotely. The name of the patch is 1c575340539f983333aa43fc58ecd76eb53e1816. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-217176.</Description>
<URL>https://github.com/kirill2485/TekNet/commit/1c575340539f983333aa43fc58ecd76eb53e1816</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2014-125034" CVSS="6.1">
<Description>A vulnerability has been found in stiiv contact_app and classified as problematic. Affected by this vulnerability is the function render of the file libs/View.php. The manipulation of the argument var leads to cross site scripting. The attack can be launched remotely. The patch is named 67bec33f559da9d41a1b45eb9e992bd8683a7f8c. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217183.</Description>
<URL>https://github.com/stiiv/contact_app/commit/67bec33f559da9d41a1b45eb9e992bd8683a7f8c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2014-125035" CVSS="6.1">
<Description>A vulnerability classified as problematic was found in Jobs-Plugin. Affected by this vulnerability is an unknown functionality. The manipulation leads to cross site scripting. The attack can be launched remotely. The identifier of the patch is b8a56718b1d42834c6ec51d9c489c5dc20471d7b. It is recommended to apply a patch to fix this issue. The identifier VDB-217189 was assigned to this vulnerability.</Description>
<URL>https://github.com/mrbobbybryant/Jobs-Plugin/commit/b8a56718b1d42834c6ec51d9c489c5dc20471d7b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2014-125039" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in kkokko NeoXplora. Affected by this issue is some unknown functionality of the component Trainer Handler. The manipulation leads to cross site scripting. The attack may be launched remotely. The name of the patch is dce1aecd6ee050a29f953ffd8f02f21c7c13f1e6. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-217352.</Description>
<URL>https://github.com/kkokko/NeoXplora/commit/dce1aecd6ee050a29f953ffd8f02f21c7c13f1e6</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2014-125070" CVSS="6.1">
<Description>A vulnerability has been found in yanheven console and classified as problematic. Affected by this vulnerability is the function get_zone_hosts/AvailabilityZonesTable of the file openstack_dashboard/dashboards/admin/aggregates/tables.py. The manipulation leads to cross site scripting. The attack can be launched remotely. The patch is named ba908ae88d5925f4f6783eb234cc4ea95017472b. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217651.</Description>
<URL>https://github.com/yanheven/console/commit/ba908ae88d5925f4f6783eb234cc4ea95017472b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2014-125078" CVSS="5.4">
<Description>A vulnerability was found in yanheven console and classified as problematic. Affected by this issue is some unknown functionality of the file horizon/static/horizon/js/horizon.instances.js. The manipulation leads to cross site scripting. The attack may be launched remotely. The patch is identified as 32a7b713468161282f2ea01d5e2faff980d924cd. It is recommended to apply a patch to fix this issue. VDB-218354 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/yanheven/console/commit/32a7b713468161282f2ea01d5e2faff980d924cd</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2014-125088" CVSS="6.1">
<Description>A vulnerability was found in qt-users-jp silk 0.0.1. It has been declared as problematic. This vulnerability affects unknown code of the file contents/root/examples/header.qml. The manipulation of the argument model.key/model.value leads to cross site scripting. The attack can be initiated remotely. The name of the patch is bbc5d6eeea800025ef29edda3fd3c57836239eae. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-221488.</Description>
<URL>https://github.com/qt-users-jp/silk/commit/bbc5d6eeea800025ef29edda3fd3c57836239eae</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2014-125089" CVSS="6.1">
<Description>A vulnerability was found in cention-chatserver 3.8.0-rc1. It has been declared as problematic. Affected by this vulnerability is the function _formatBody of the file lib/InternalChatProtocol.fe. The manipulation of the argument body leads to cross site scripting. The attack can be launched remotely. Upgrading to version 3.9 is able to address this issue. The identifier of the patch is c4c0258bbd18f6915f97f91d5fee625384096a26. It is recommended to upgrade the affected component. The identifier VDB-221497 was assigned to this vulnerability.</Description>
<URL>https://github.com/cention-mujibur-rahman/cention-chatserver/commit/c4c0258bbd18f6915f97f91d5fee625384096a26</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2014-125090" CVSS="6.1">
<Description>A vulnerability was found in Media Downloader Plugin 0.1.992 on WordPress. It has been declared as problematic. This vulnerability affects the function dl_file_resumable of the file getfile.php. The manipulation of the argument file leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 0.1.993 is able to address this issue. The patch is identified as 77beb720c682b9300035ab5f96eee225181d8a92. It is recommended to upgrade the affected component. VDB-222262 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/wp-plugins/media-downloader/commit/77beb720c682b9300035ab5f96eee225181d8a92</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2014-125092" CVSS="6.1">
<Description>A vulnerability was found in MaxButtons Plugin up to 1.26.0 on WordPress and classified as problematic. This issue affects the function maxbuttons_strip_px of the file includes/maxbuttons-button.php. The manipulation of the argument button_id leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 1.26.1 is able to address this issue. The patch is named e74564c9e3b7429808e317f4916bd1c26ef0b806. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-222323.</Description>
<URL>https://github.com/wp-plugins/maxbuttons/commit/e74564c9e3b7429808e317f4916bd1c26ef0b806</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2014-125095" CVSS="6.1">
<Description>A vulnerability was found in BestWebSoft Contact Form Plugin 1.3.4 on WordPress and classified as problematic. Affected by this issue is the function bws_add_menu_render of the file bws_menu/bws_menu.php. The manipulation of the argument bwsmn_form_email leads to cross site scripting. The attack may be launched remotely. Upgrading to version 1.3.7 is able to address this issue. The name of the patch is 4d531f74b4a801c805dc80360d4ea1312e9a278f. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-225320.</Description>
<URL>https://github.com/wp-plugins/contact-form-plugin/commit/4d531f74b4a801c805dc80360d4ea1312e9a278f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2014-125096" CVSS="6.1">
<Description>A vulnerability was found in Fancy Gallery Plugin 1.5.12 on WordPress. It has been declared as problematic. Affected by this vulnerability is an unknown functionality of the file class.options.php of the component Options Page. The manipulation leads to cross site scripting. The attack can be launched remotely. Upgrading to version 1.5.13 is able to address this issue. The identifier of the patch is fdf1f9e5a1ec738900f962e69c6fa4ec6055ed8d. It is recommended to upgrade the affected component. The identifier VDB-225349 was assigned to this vulnerability.</Description>
<URL>https://github.com/wp-plugins/fancy-gallery/commit/fdf1f9e5a1ec738900f962e69c6fa4ec6055ed8d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2014-125097" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, was found in BestWebSoft Facebook Like Button up to 2.33. Affected is the function fcbkbttn_settings_page of the file facebook-button-plugin.php. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 2.34 is able to address this issue. The patch is identified as b766da8fa100779409a953f0e46c2a2448cbe99c. It is recommended to upgrade the affected component. VDB-225354 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/wp-plugins/facebook-button-plugin/commit/b766da8fa100779409a953f0e46c2a2448cbe99c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2014-125098" CVSS="6.1">
<Description>A vulnerability was found in Dart http_server up to 0.9.5 and classified as problematic. Affected by this issue is the function VirtualDirectory of the file lib/src/virtual_directory.dart of the component Directory Listing Handler. The manipulation of the argument request.uri.path leads to cross site scripting. The attack may be launched remotely. Upgrading to version 0.9.6 is able to address this issue. The name of the patch is 27c1cbd8125bb0369e675eb72e48218496e48ffb. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-225356.</Description>
<URL>https://github.com/dart-archive/http_server/commit/27c1cbd8125bb0369e675eb72e48218496e48ffb</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2014-125100" CVSS="6.1">
<Description>A vulnerability classified as problematic was found in BestWebSoft Job Board Plugin 1.0.0 on WordPress. This vulnerability affects unknown code. The manipulation leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 1.0.1 is able to address this issue. The name of the patch is dbb71deee071422ce3e663fbcdce3ad24886f940. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-227764.</Description>
<URL>https://github.com/wp-plugins/job-board/commit/dbb71deee071422ce3e663fbcdce3ad24886f940</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2014-125103" CVSS="6.1">
<Description>A vulnerability was found in BestWebSoft Twitter Plugin up to 1.3.2 on WordPress. It has been declared as problematic. Affected by this vulnerability is the function twttr_settings_page of the file twitter.php. The manipulation of the argument twttr_url_twitter/bws_license_key/bws_license_plugin leads to cross site scripting. The attack can be launched remotely. Upgrading to version 1.3.7 is able to address this issue. The patch is named e04d59ab578316ffeb204cf32dc71c0d0e1ff77c. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-230155.</Description>
<URL>https://github.com/wp-plugins/twitter-plugin/commit/e04d59ab578316ffeb204cf32dc71c0d0e1ff77c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2014-125105" CVSS="6.1">
<Description>A vulnerability was found in Broken Link Checker Plugin up to 1.10.1 on WordPress. It has been declared as problematic. Affected by this vulnerability is the function options_page of the file core/core.php of the component Settings Page. The manipulation of the argument exclusion_list/blc_custom_fields leads to cross site scripting. The attack can be launched remotely. Upgrading to version 1.10.2 is able to address this issue. The patch is named 90615fe9b0b6f9e6fb254d503c302e53a202e561. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-230659.</Description>
<URL>https://github.com/wp-plugins/broken-link-checker/commit/90615fe9b0b6f9e6fb254d503c302e53a202e561</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2014-125108" CVSS="6.1">
<Description>A vulnerability was found in w3c online-spellchecker-py up to 20140130. It has been rated as problematic. This issue affects some unknown processing of the file spellchecker. The manipulation leads to cross site scripting. The attack may be initiated remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The identifier of the patch is d6c21fd8187c5db2a50425ff80694149e75d722e. It is recommended to apply a patch to fix this issue. The identifier VDB-248849 was assigned to this vulnerability.</Description>
<URL>https://github.com/w3c/online-spellchecker-py/commit/d6c21fd8187c5db2a50425ff80694149e75d722e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2014-125109" CVSS="6.1">
<Description>A vulnerability was found in BestWebSoft Portfolio Plugin up to 2.27. It has been declared as problematic. This vulnerability affects the function bws_add_menu_render of the file bws_menu/bws_menu.php. The manipulation of the argument bwsmn_form_email leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 2.28 is able to address this issue. The name of the patch is d2ede580474665af56ff262a05783fbabe4529b8. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-248956.</Description>
<URL>https://github.com/wp-plugins/portfolio/commit/d2ede580474665af56ff262a05783fbabe4529b8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10006" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in admont28 Ingnovarq. Affected by this issue is some unknown functionality of the file app/controller/insertarSliderAjax.php. The manipulation of the argument imagetitle leads to cross site scripting. The attack may be launched remotely. The name of the patch is 9d18a39944d79dfedacd754a742df38f99d3c0e2. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-217172.</Description>
<URL>https://github.com/admont28/ingnovarq/commit/9d18a39944d79dfedacd754a742df38f99d3c0e2</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10007" CVSS="6.1">
<Description>** UNSUPPORTED WHEN ASSIGNED ** A vulnerability was found in 82Flex WEIPDCRM and classified as problematic. Affected by this issue is some unknown functionality. The manipulation leads to cross site scripting. The attack may be launched remotely. The name of the patch is 43bad79392332fa39e31b95268e76fbda9fec3a4. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-217184. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.</Description>
<URL>https://github.com/82Flex/WEIPDCRM/commit/43bad79392332fa39e31b95268e76fbda9fec3a4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10010" CVSS="6.1">
<Description>A vulnerability was found in OpenDNS OpenResolve. It has been rated as problematic. Affected by this issue is the function get of the file resolverapi/endpoints.py of the component API. The manipulation leads to cross site scripting. The attack may be launched remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The name of the patch is c680170d5583cd9342fe1af43001fe8b2b8004dd. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-217196.</Description>
<URL>https://github.com/opendns/OpenResolve/commit/c680170d5583cd9342fe1af43001fe8b2b8004dd</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10013" CVSS="6.1">
<Description>A vulnerability was found in WebDevStudios taxonomy-switcher Plugin up to 1.0.3 on WordPress. It has been classified as problematic. Affected is the function taxonomy_switcher_init of the file taxonomy-switcher.php. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 1.0.4 is able to address this issue. It is recommended to upgrade the affected component. VDB-217446 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/WebDevStudios/taxonomy-switcher/commit/e1a0d99f936e7427b31e210c67aeb4833d804099</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10019" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in foxoverflow MySimplifiedSQL. This issue affects some unknown processing of the file MySimplifiedSQL_Examples.php. The manipulation of the argument FirstName/LastName leads to cross site scripting. The attack may be initiated remotely. The patch is named 3b7481c72786f88041b7c2d83bb4f219f77f1293. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217595.</Description>
<URL>https://github.com/foxoverflow/MySimplifiedSQL/commit/3b7481c72786f88041b7c2d83bb4f219f77f1293</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10021" CVSS="6.1">
<Description>A vulnerability was found in ritterim definely. It has been classified as problematic. Affected is an unknown function of the file src/database.js. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. The name of the patch is b31a022ba4d8d17148445a13ebb5a42ad593dbaa. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-217608.</Description>
<URL>https://github.com/ritterim/definely/commit/b31a022ba4d8d17148445a13ebb5a42ad593dbaa</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10028" CVSS="6.1">
<Description>A vulnerability has been found in ss15-this-is-sparta and classified as problematic. This vulnerability affects unknown code of the file js/roomElement.js of the component Main Page. The manipulation leads to cross site scripting. The attack can be initiated remotely. The name of the patch is ba2f71ad3a46e5949ee0c510b544fa4ea973baaa. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-217624.</Description>
<URL>https://github.com/mauriciosoares/ss15-this-is-sparta/commit/ba2f71ad3a46e5949ee0c510b544fa4ea973baaa</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10032" CVSS="6.1">
<Description>A vulnerability was found in HealthMateWeb. It has been declared as problematic. Affected by this vulnerability is an unknown functionality of the file createaccount.php. The manipulation of the argument username/password/first_name/last_name/company/phone leads to cross site scripting. The attack can be launched remotely. The patch is named 472776c25b1046ecaf962c46fed7c713c72c28e3. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217663.</Description>
<URL>https://github.com/StevenElberger/HealthMateWeb/commit/472776c25b1046ecaf962c46fed7c713c72c28e3</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10049" CVSS="6.1">
<Description>A vulnerability was found in Overdrive Eletrônica course-builder up to 1.7.x and classified as problematic. Affected by this issue is some unknown functionality of the file coursebuilder/modules/oeditor/oeditor.html. The manipulation leads to cross site scripting. The attack may be launched remotely. Upgrading to version 1.8.0 is able to address this issue. The name of the patch is e39645fd714adb7e549908780235911ae282b21b. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-218372.</Description>
<URL>https://github.com/overdrive-diy/course-builder/commit/e39645fd714adb7e549908780235911ae282b21b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10058" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, was found in Wikisource Category Browser. This affects an unknown part of the file index.php. The manipulation of the argument lang leads to cross site scripting. It is possible to initiate the attack remotely. The patch is named 764f4e8ce3f9242637df77530c70ae8a2ec4b6a1. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-218415.</Description>
<URL>https://github.com/wikisource/ws-cat-browser/commit/764f4e8ce3f9242637df77530c70ae8a2ec4b6a1</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10059" CVSS="6.1">
<Description>A vulnerability has been found in s134328 Webapplication-Veganguide and classified as problematic. This vulnerability affects unknown code of the file p05-integration/app/shared/api/apiService.js. The manipulation of the argument country/city leads to cross site scripting. The attack can be initiated remotely. The name of the patch is 2aa760fa4e779e40a28206a32ac22ac10356f519. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-218416.</Description>
<URL>https://github.com/s134328/Webapplication-Veganguide/commit/2aa760fa4e779e40a28206a32ac22ac10356f519</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10072" CVSS="6.1">
<Description>A vulnerability classified as problematic was found in NREL api-umbrella-web 0.7.1. This vulnerability affects unknown code of the component Flash Message Handler. The manipulation leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 0.8.0 is able to address this issue. The name of the patch is bcc0e922c61d30367678c8f17a435950969315cd. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-220060.</Description>
<URL>https://github.com/NREL/api-umbrella-web/commit/bcc0e922c61d30367678c8f17a435950969315cd</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10073" CVSS="9.6">
<Description>A vulnerability, which was classified as problematic, was found in tinymighty WikiSEO 1.2.1 on MediaWiki. This affects the function modifyHTML of the file WikiSEO.body.php of the component Meta Property Tag Handler. The manipulation of the argument content leads to cross site scripting. It is possible to initiate the attack remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 1.2.2 is able to address this issue. The patch is named 089a5797be612b18a820f9f1e6593ad9a91b1dba. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-220215.</Description>
<URL>https://github.com/tinymighty/wiki-seo/commit/089a5797be612b18a820f9f1e6593ad9a91b1dba</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10074" CVSS="6.1">
<Description>A vulnerability was found in OpenSeaMap online_chart 1.2. It has been classified as problematic. Affected is the function init of the file index.php. The manipulation of the argument mtext leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version staging is able to address this issue. The patch is identified as 8649157158f921590d650e2d2f4bdf0df1017e9d. It is recommended to upgrade the affected component. VDB-220218 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/OpenSeaMap/online_chart/commit/8649157158f921590d650e2d2f4bdf0df1017e9d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10075" CVSS="6.1">
<Description>A vulnerability was found in Custom-Content-Width 1.0. It has been declared as problematic. Affected by this vulnerability is the function override_content_width/register_settings of the file custom-content-width.php. The manipulation leads to cross site scripting. The attack can be launched remotely. The complexity of an attack is rather high. The exploitation appears to be difficult. The exploit has been disclosed to the public and may be used. Upgrading to version 1.0.1 is able to address this issue. The patch is named e05e0104fc42ad13b57e2b2cb2d1857432624d39. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-220219. NOTE: This attack is not very likely.</Description>
<URL>https://github.com/georgestephanis/Custom-Content-Width/commit/e05e0104fc42ad13b57e2b2cb2d1857432624d39</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10078" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in atwellpub Resend Welcome Email Plugin 1.0.1 on WordPress. This issue affects the function send_welcome_email_url of the file resend-welcome-email.php. The manipulation leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 1.0.2 is able to address this issue. The identifier of the patch is b14c1f66d307783f0ae74f88088a85999107695c. It is recommended to upgrade the affected component. The identifier VDB-220637 was assigned to this vulnerability.</Description>
<URL>https://github.com/atwellpub/resend-welcome-email/commit/b14c1f66d307783f0ae74f88088a85999107695c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10079" CVSS="6.1">
<Description>A vulnerability was found in juju2143 WalrusIRC 0.0.2. It has been rated as problematic. This issue affects the function parseLinks of the file public/parser.js. The manipulation of the argument text leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 0.0.3 is able to address this issue. The patch is named 45fd885895ae13e8d9b3a71e89d59768914f60af. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-220751.</Description>
<URL>https://github.com/juju2143/walrusirc/commit/45fd885895ae13e8d9b3a71e89d59768914f60af</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10080" CVSS="6.1">
<Description>A vulnerability was found in NREL api-umbrella-web 0.7.1. It has been classified as problematic. This affects an unknown part of the component Admin Data Table Handler. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 0.8.0 is able to address this issue. The patch is named f53a9fb87e10c457f0f3dd4f2af24d3b2f21b3ca. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-221487.</Description>
<URL>https://github.com/NREL/api-umbrella-web/commit/f53a9fb87e10c457f0f3dd4f2af24d3b2f21b3ca</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10089" CVSS="6.1">
<Description>A vulnerability classified as problematic has been found in flame.js. This affects an unknown part. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. This product does not use versioning. This is why information about affected and unaffected releases are unavailable. The patch is named e6c49b5f6179e31a534b7c3264e1d36aa99728ac. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-222291.</Description>
<URL>https://github.com/flamejs/flame.js/commit/e6c49b5f6179e31a534b7c3264e1d36aa99728ac</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10090" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in Landing Pages Plugin up to 1.8.7 on WordPress. Affected by this issue is some unknown functionality. The manipulation leads to cross site scripting. The attack may be launched remotely. Upgrading to version 1.8.8 is able to address this issue. The name of the patch is c8e22c1340c11fedfb0a0a67ea690421bdb62b94. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-222320.</Description>
<URL>https://github.com/wp-plugins/landing-pages/commit/c8e22c1340c11fedfb0a0a67ea690421bdb62b94</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10092" CVSS="6.1">
<Description>A vulnerability was found in Qtranslate Slug Plugin up to 1.1.16 on WordPress. It has been classified as problematic. Affected is the function add_slug_meta_box of the file includes/class-qtranslate-slug.php. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 1.1.17 is able to address this issue. The name of the patch is 74b3932696f9868e14563e51b7d0bb68c53bf5e4. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-222324.</Description>
<URL>https://github.com/wp-plugins/qtranslate-slug/commit/74b3932696f9868e14563e51b7d0bb68c53bf5e4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10093" CVSS="5.4">
<Description>A vulnerability was found in Mark User as Spammer Plugin 1.0.0/1.0.1 on WordPress. It has been declared as problematic. Affected by this vulnerability is the function user_row_actions of the file plugin/plugin.php. The manipulation of the argument url leads to cross site scripting. The attack can be launched remotely. The complexity of an attack is rather high. The exploitation appears to be difficult. Upgrading to version 1.0.2 is able to address this issue. The identifier of the patch is e7059727274d2767c240c55c02c163eaa4ba6c62. It is recommended to upgrade the affected component. The identifier VDB-222325 was assigned to this vulnerability.</Description>
<URL>https://github.com/korobochkin/mark-user-as-spammer/commit/e7059727274d2767c240c55c02c163eaa4ba6c62</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10094" CVSS="6.1">
<Description>A vulnerability was found in Fastly Plugin up to 0.97 on WordPress. It has been rated as problematic. Affected by this issue is the function post of the file lib/api.php. The manipulation of the argument url leads to cross site scripting. The attack may be launched remotely. Upgrading to version 0.98 is able to address this issue. The patch is identified as d7fe42538f4d4af500e3af9678b6b06fba731656. It is recommended to upgrade the affected component. VDB-222326 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/wp-plugins/fastly/commit/d7fe42538f4d4af500e3af9678b6b06fba731656</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10095" CVSS="6.1">
<Description>A vulnerability classified as problematic has been found in woo-popup Plugin up to 1.2.2 on WordPress. This affects an unknown part of the file admin/class-woo-popup-admin.php. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 1.3.0 is able to address this issue. The patch is named 7c76ac78f3e16015991b612ff4fa616af4ce9292. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-222327.</Description>
<URL>https://github.com/wp-plugins/woo-popup/commit/7c76ac78f3e16015991b612ff4fa616af4ce9292</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10098" CVSS="6.1">
<Description>A vulnerability was found in Broken Link Checker Plugin up to 1.10.5 on WordPress. It has been rated as problematic. Affected by this issue is the function print_module_list/show_warnings_section_notice/status_text/ui_get_action_links. The manipulation leads to cross site scripting. The attack may be launched remotely. Upgrading to version 1.10.6 is able to address this issue. The name of the patch is f30638869e281461b87548e40b517738b4350e47. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-225152.</Description>
<URL>https://github.com/wp-plugins/broken-link-checker/commit/f30638869e281461b87548e40b517738b4350e47</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10101" CVSS="6.1">
<Description>A vulnerability classified as problematic was found in Google Analytics Top Content Widget Plugin up to 1.5.6 on WordPress. Affected by this vulnerability is an unknown functionality of the file class-tgm-plugin-activation.php. The manipulation leads to cross site scripting. The attack can be launched remotely. Upgrading to version 1.5.7 is able to address this issue. The identifier of the patch is 25bb1dea113716200a6f0f3135801d84a7a65540. It is recommended to upgrade the affected component. The identifier VDB-226117 was assigned to this vulnerability.</Description>
<URL>https://github.com/wp-plugins/google-analytics-top-posts-widget/commit/25bb1dea113716200a6f0f3135801d84a7a65540</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10107" CVSS="6.1">
<Description>A vulnerability was found in Simplr Registration Form Plus+ Plugin up to 2.3.4 on WordPress and classified as problematic. This issue affects some unknown processing. The manipulation leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 2.3.5 is able to address this issue. The identifier of the patch is d588446844dd49232ab400ef213ff5b92121c33e. It is recommended to upgrade the affected component. The identifier VDB-230153 was assigned to this vulnerability.</Description>
<URL>https://github.com/wp-plugins/simplr-registration-form/commit/d588446844dd49232ab400ef213ff5b92121c33e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10110" CVSS="6.1">
<Description>A vulnerability classified as problematic was found in ruddernation TinyChat Room Spy Plugin up to 1.2.8 on WordPress. This vulnerability affects the function wp_show_room_spy of the file room-spy.php. The manipulation of the argument room leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 1.2.9 is able to address this issue. The name of the patch is ab72627a963d61fb3bc31018e3855b08dc94a979. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-230392.</Description>
<URL>https://github.com/wp-plugins/tinychat-roomspy/commit/ab72627a963d61fb3bc31018e3855b08dc94a979</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10117" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, was found in Gravity Forms DPS PxPay Plugin up to 1.4.2 on WordPress. Affected is an unknown function. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 1.4.3 is able to address this issue. The name of the patch is 5966a5e6343e3d5610bdfa126a5cfbae95e629b6. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-230664.</Description>
<URL>https://github.com/wp-plugins/gravity-forms-dps-pxpay/commit/5966a5e6343e3d5610bdfa126a5cfbae95e629b6</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10118" CVSS="6.1">
<Description>A vulnerability classified as problematic was found in cchetanonline WP-CopyProtect up to 3.0.0. This vulnerability affects the function CopyProtect_options_page of the file wp-copyprotect.php. The manipulation of the argument CopyProtect_nrc_text leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 3.1.0 is able to address this issue. The patch is identified as 8b8fe4102886b326330dc1ff06b17313fb10aee5. It is recommended to upgrade the affected component. VDB-231202 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/wp-plugins/wp-copyprotect/commit/8b8fe4102886b326330dc1ff06b17313fb10aee5</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10119" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in View All Posts Page Plugin up to 0.9.0 on WordPress. This issue affects the function action_admin_notices_activation of the file view-all-posts-pages.php. The manipulation leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 0.9.1 is able to address this issue. The patch is named bf914f3a59063fa4df8fd4925ae18a5d852396d7. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-233363.</Description>
<URL>https://github.com/wp-plugins/view-all-posts-pages/commit/bf914f3a59063fa4df8fd4925ae18a5d852396d7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10120" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, was found in WDS Multisite Aggregate Plugin up to 1.0.0 on WordPress. Affected is the function update_options of the file includes/WDS_Multisite_Aggregate_Options.php. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 1.0.1 is able to address this issue. The name of the patch is 49e0bbcb6ff70e561365d9e0d26426598f63ca12. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-233364.</Description>
<URL>https://github.com/wp-plugins/wds-multisite-aggregate/commit/49e0bbcb6ff70e561365d9e0d26426598f63ca12</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10121" CVSS="6.1">
<Description>A vulnerability has been found in Beeliked Microsite Plugin up to 1.0.1 on WordPress and classified as problematic. Affected by this vulnerability is the function embed_handler of the file beelikedmicrosite.php. The manipulation leads to cross site scripting. The attack can be launched remotely. Upgrading to version 1.0.2 is able to address this issue. The identifier of the patch is d23bafb5d05fb2636a2b78331f9d3fca152903dc. It is recommended to upgrade the affected component. The identifier VDB-233365 was assigned to this vulnerability.</Description>
<URL>https://github.com/wp-plugins/beeliked-microsite/commit/d23bafb5d05fb2636a2b78331f9d3fca152903dc</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10127" CVSS="6.1">
<Description>A vulnerability was found in PlusCaptcha Plugin up to 2.0.6 on WordPress and classified as problematic. Affected by this issue is some unknown functionality. The manipulation leads to cross site scripting. The attack may be launched remotely. Upgrading to version 2.0.14 is able to address this issue. The patch is identified as 1274afc635170daafd38306487b6bb8a01f78ecd. It is recommended to upgrade the affected component. VDB-248954 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/wp-plugins/pluscaptcha/commit/1274afc635170daafd38306487b6bb8a01f78ecd</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-10128" CVSS="6.1">
<Description>A vulnerability was found in rt-prettyphoto Plugin up to 1.2 on WordPress and classified as problematic. Affected by this issue is the function royal_prettyphoto_plugin_links of the file rt-prettyphoto.php. The manipulation leads to cross site scripting. The attack may be launched remotely. Upgrading to version 1.3 is able to address this issue. The patch is identified as 0d3d38cfa487481b66869e4212df1cefc281ecb7. It is recommended to upgrade the affected component. VDB-249422 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/wp-plugins/rt-prettyphoto/commit/0d3d38cfa487481b66869e4212df1cefc281ecb7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-9405" CVSS="6.1">
<Description>The wp-piwik plugin before 1.0.5 for WordPress has XSS.</Description>
<URL>https://github.com/braekling/WP-Matomo/commit/5110bfdb437a9f19b185ba8af33776fcb5e19940</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2015-9501" CVSS="6.1">
<Description>The Artificial Intelligence theme before 1.2.4 for WordPress has XSS because Genericons HTML files are unnecessarily placed under the web root.</Description>
<URL>https://github.com/duchenerc/artificial-intelligence/commit/c70631b1f80518411df2f88476041351110c6eac</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2016-10245" CVSS="6.1">
<Description>Insufficient sanitization of the query parameter in templates/html/search_opensearch.php could lead to reflected cross-site scripting or iframe injection.</Description>
<URL>https://github.com/doxygen/doxygen/commit/1cc1adad2de03a0f013881b8960daf89aa155081</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2016-10404" CVSS="6.1">
<Description>XSS exists in Liferay Portal before 7.0 CE GA4 via a crafted redirect field to modules/apps/foundation/frontend-js/frontend-js-spa-web/src/main/resources/META-INF/resources/init.jsp.</Description>
<URL>https://github.com/liferay/liferay-portal/commit/333f65bae9106182d12e02d249d4f95e16e93fa2</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2016-10893" CVSS="6.1">
<Description>The crayon-syntax-highlighter plugin before 2.8.4 for WordPress has multiple XSS issues via AJAX requests.</Description>
<URL>https://github.com/aramk/crayon-syntax-highlighter/commit/7fdb2e6b4c65178b4ed01ff08a8a38afe5a5151e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2016-10969" CVSS="6.1">
<Description>The supportflow plugin before 0.7 for WordPress has XSS via a discussion ticket title.</Description>
<URL>https://github.com/SupportFlow/supportflow/commit/c08d376072f093b650c49dcb44124f43ea0177b1</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2016-10970" CVSS="6.1">
<Description>The supportflow plugin before 0.7 for WordPress has XSS via a ticket excerpt.</Description>
<URL>https://github.com/SupportFlow/supportflow/commit/c507cc863d161f87c28d0682714bf188ffac1a67</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2016-15008" CVSS="6.1">
<Description>A vulnerability was found in oxguy3 coebot-www and classified as problematic. This issue affects the function displayChannelCommands/displayChannelQuotes/displayChannelAutoreplies/showChannelHighlights/showChannelBoir of the file js/channel.js. The manipulation leads to cross site scripting. The attack may be initiated remotely. The patch is named c1a6c44092585da4236237e0e7da94ee2996a0ca. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217355.</Description>
<URL>https://github.com/oxguy3/coebot-www/commit/c1a6c44092585da4236237e0e7da94ee2996a0ca</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2016-15010" CVSS="6.1">
<Description>** UNSUPPORTED WHEN ASSIGNED ** A vulnerability classified as problematic was found in University of Cambridge django-ucamlookup up to 1.9.1. Affected by this vulnerability is an unknown functionality of the component Lookup Handler. The manipulation leads to cross site scripting. The attack can be launched remotely. Upgrading to version 1.9.2 is able to address this issue. The identifier of the patch is 5e25e4765637ea4b9e0bf5fcd5e9a922abee7eb3. It is recommended to upgrade the affected component. The identifier VDB-217441 was assigned to this vulnerability. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.</Description>
<URL>https://github.com/uisautomation/django-ucamlookup/commit/5e25e4765637ea4b9e0bf5fcd5e9a922abee7eb3</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2016-15022" CVSS="6.1">
<Description>A vulnerability was found in mosbth cimage up to 0.7.18. It has been declared as problematic. Affected by this vulnerability is an unknown functionality of the file check_system.php. The manipulation of the argument $_SERVER['SERVER_SOFTWARE'] leads to cross site scripting. The attack can be launched remotely. The complexity of an attack is rather high. The exploitation appears to be difficult. Upgrading to version 0.7.19 is able to address this issue. The patch is named 401478c8393989836beeddfeac5ce44570af162b. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-219715.</Description>
<URL>https://github.com/mosbth/cimage/commit/401478c8393989836beeddfeac5ce44570af162b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2016-15025" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, was found in generator-hottowel 0.0.11. Affected is an unknown function of the file app/templates/src/server/_app.js of the component 404 Error Handler. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. The name of the patch is c17092fd4103143a9ddab93c8983ace8bf174396. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-221484.</Description>
<URL>https://github.com/johnpapa/generator-hottowel/commit/c17092fd4103143a9ddab93c8983ace8bf174396</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2016-15027" CVSS="6.1">
<Description>A vulnerability was found in meta4creations Post Duplicator Plugin 2.18 on WordPress. It has been classified as problematic. Affected is the function mtphr_post_duplicator_notice of the file includes/notices.php. The manipulation of the argument post-duplicated leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 2.19 is able to address this issue. The name of the patch is ca67c05e490c0cf93a1e9b2d93bfeff3dd96f594. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-221496.</Description>
<URL>https://github.com/meta4creations/post-duplicator/commit/ca67c05e490c0cf93a1e9b2d93bfeff3dd96f594</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2016-15029" CVSS="6.1">
<Description>A vulnerability has been found in Ydalb mapicoin up to 1.9.0 and classified as problematic. This vulnerability affects unknown code of the file webroot/stats.php. The manipulation of the argument link/search leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 1.10.0 is able to address this issue. The patch is identified as 67e87f0f0c1ac238fcd050f4c3db298229bc9679. It is recommended to upgrade the affected component. VDB-223402 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/Ydalb/mapicoin/commit/67e87f0f0c1ac238fcd050f4c3db298229bc9679</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2016-15032" CVSS="6.1">
<Description>** UNSUPPORTED WHEN ASSIGNED ** A vulnerability classified as problematic has been found in mback2k mh_httpbl Extension up to 1.1.7 on TYPO3. This affects the function stopOutput of the file class.tx_mhhttpbl.php. The manipulation of the argument $_SERVER['REMOTE_ADDR'] leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 1.1.8 is able to address this issue. The patch is named a754bf306a433a8c18b55e25595593e8f19b9463. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-230391. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.</Description>
<URL>https://github.com/mback2k/mh_httpbl/commit/a754bf306a433a8c18b55e25595593e8f19b9463</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2016-15035" CVSS="6.1">
<Description>A vulnerability was found in Doc2k RE-Chat 1.0. It has been classified as problematic. This affects an unknown part of the file js_on_radio-emergency.de_/re_chat.js. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. The patch is named bd17d497ddd3bab4ef9c6831c747c37cc016c570. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-238155.</Description>
<URL>https://github.com/Doc2k/re-chat/commit/bd17d497ddd3bab4ef9c6831c747c37cc016c570</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2016-15037" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in go4rayyan Scumblr up to 2.0.1a. Affected by this issue is some unknown functionality of the component Task Handler. The manipulation leads to cross site scripting. The attack may be launched remotely. Upgrading to version 2.0.2 is able to address this issue. The patch is identified as 5c9120f2362ddb7cbe48f2c4620715adddc4ee35. It is recommended to upgrade the affected component. VDB-251570 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/go4rayyan/CG1/commit/5c9120f2362ddb7cbe48f2c4620715adddc4ee35</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2016-2139" CVSS="6.4">
<Description>In kippo-graph before version 1.5.1, there is a cross-site scripting vulnerability in $file_link in class/KippoInput.class.php.</Description>
<URL>https://github.com/ikoniaris/kippo-graph/commit/e6587ec598902763110b70c8bd0a72f7951b4997</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2016-9126" CVSS="5.4">
<Description>Revive Adserver before 3.2.3 suffers from persistent XSS. Usernames are not properly escaped when displayed in the audit trail widget of the dashboard upon login, allowing persistent XSS attacks. An authenticated user with enough privileges to create other users could exploit the vulnerability to access the administrator account.</Description>
<URL>https://github.com/revive-adserver/revive-adserver/commit/8d8c6df309ff5fde9dd4770abcd4ec5d2449b3ec</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2016-9128" CVSS="5.4">
<Description>Revive Adserver before 3.2.3 suffers from reflected XSS. The affiliate-preview.php script in www/admin is vulnerable to a reflected XSS attack. This vulnerability could be used by an attacker to steal the session ID of an authenticated user, by tricking them into visiting a specifically crafted URL.</Description>
<URL>https://github.com/revive-adserver/revive-adserver/commit/a323fd626627e8d42819fd5b7e2829196b5c54a3</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2016-9130" CVSS="5.4">
<Description>Revive Adserver before 3.2.3 suffers from Persistent XSS. A vector for persistent XSS attacks via the Revive Adserver user interface exists, requiring a trusted (non-admin) account. The website name wasn't properly escaped when displayed in the campaign-zone.php script.</Description>
<URL>https://github.com/revive-adserver/revive-adserver/commit/f6880330a8e11e804663f132867e9eb9b1f94e83</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2016-9454" CVSS="5.4">
<Description>Revive Adserver before 3.2.3 suffers from Persistent XSS. A vector for persistent XSS attacks via the Revive Adserver user interface exists, requiring a trusted (non-admin) account. The banner image URL for external banners wasn't properly escaped when displayed in most of the banner related pages.</Description>
<URL>https://github.com/revive-adserver/revive-adserver/commit/f6880330a8e11e804663f132867e9eb9b1f94e83</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2016-9457" CVSS="5.4">
<Description>Revive Adserver before 3.2.3 suffers from Reflected XSS. `www/admin/stats.php` is vulnerable to reflected XSS attacks via multiple parameters that are not properly sanitised or escaped when displayed, such as setPerPage, pageId, bannerid, period_start, period_end, and possibly others.</Description>
<URL>https://github.com/revive-adserver/revive-adserver/commit/ecbe822b48ef4ff61c2c6357c0c94199a81946f4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2016-9459" CVSS="6.1">
<Description>Nextcloud Server before 9.0.52 & ownCloud Server before 9.0.4 are vulnerable to a log pollution vulnerability potentially leading to a local XSS. The download log functionality in the admin screen is delivering the log in JSON format to the end-user. The file was delivered with an attachment disposition forcing the browser to download the document. However, Firefox running on Microsoft Windows would offer the user to open the data in the browser as an HTML document. Thus any injected data in the log would be executed.</Description>
<URL>https://github.com/nextcloud/server/commit/94975af6db1551c2d23136c2ea22866a5b416070</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2016-9466" CVSS="6.1">
<Description>Nextcloud Server before 10.0.1 & ownCloud Server before 9.0.6 and 9.1.2 suffer from Reflected XSS in the Gallery application. The gallery app was not properly sanitizing exception messages from the Nextcloud/ownCloud server. Due to an endpoint where an attacker could influence the error message, this led to a reflected Cross-Site-Scripting vulnerability.</Description>
<URL>https://github.com/nextcloud/gallery/commit/f9ef505c1d60c9041e251682e0f6b3daad952d58</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2016-9472" CVSS="5.4">
<Description>Revive Adserver before 3.2.5 and 4.0.0 suffers from Reflected XSS. The Revive Adserver web installer scripts were vulnerable to a reflected XSS attack via the dbHost, dbUser, and possibly other parameters. It has to be noted that the window for such attack vectors to be possible is extremely narrow and it is very unlikely that such an attack could be actually effective.</Description>
<URL>https://github.com/revive-adserver/revive-adserver/commit/14ff73f0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-1000035" CVSS="6.1">
<Description>Tiny Tiny RSS before 829d478f is vulnerable to XSS window.opener attack</Description>
<URL>https://git.tt-rss.org/git/tt-rss/commit/829d478f1b054c8ce1eeb4f15170dc4a1abb3e47</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-1000213" CVSS="4.8">
<Description>WBCE v1.1.11 is vulnerable to reflected XSS via the "begriff" POST parameter in /admin/admintools/tool.php?tool=user_search</Description>
<URL>https://github.com/WBCE/WBCE_CMS/commit/0da620016aec17ac2d2f3a22c55ab8c2b55e691e#diff-7b380285e285160d0070863099baabe0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-1000443" CVSS="6.1">
<Description>Eleix Openhacker version 0.1.47 is vulnerable to a XSS vulnerability in the bank transactions component resulting in arbitrary code execution in the browser.</Description>
<URL>https://github.com/Eleix/openhacker/commit/9da5c237ba5e2311f01edc83389bc5aaf0a9885c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-1000491" CVSS="6.1">
<Description>Shiba markdown live preview app version 1.1.0 is vulnerable to XSS which leads to code execution due to enabled node integration.</Description>
<URL>https://github.com/rhysd/Shiba/commit/e8a65b0f81eb04903eedd29500d7e1bedf249eab</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-1000492" CVSS="6.1">
<Description>Leanote-desktop version v2.5 is vulnerable to a XSS which leads to code execution due to enabled node integration</Description>
<URL>https://github.com/leanote/desktop-app/commit/a2ed226637f8e66c9b089784b5e58eccf2e2fb30</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-12927" CVSS="6.1">
<Description>A cross-site scripting vulnerability exists in Cacti 1.1.17 in the method parameter in spikekill.php.</Description>
<URL>https://github.com/Cacti/cacti/commit/a032ce0be6a4ea47862c594e40a619ac8de1ef99</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-12978" CVSS="5.4">
<Description>lib/html.php in Cacti before 1.1.18 has XSS via the title field of an external link added by an authenticated user.</Description>
<URL>https://github.com/Cacti/cacti/commit/9c610a7a4e29595dcaf7d7082134e4b89619ea24</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-13671" CVSS="6.1">
<Description>app/View/Helper/CommandHelper.php in MISP before 2.4.79 has persistent XSS via comments. It only impacts the users of the same instance because the comment field is not part of the MISP synchronisation.</Description>
<URL>https://github.com/MISP/MISP/commit/6eba658d4a648b41b357025d864c19a67412b8aa</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-14313" CVSS="6.1">
<Description>The shibboleth_login_form function in shibboleth.php in the Shibboleth plugin before 1.8 for WordPress is prone to an XSS vulnerability due to improper use of add_query_arg().</Description>
<URL>https://github.com/michaelryanmcneill/shibboleth/commit/1d65ad6786282d23ba1865f56e2fd19188e7c26a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-14498" CVSS="6.1">
<Description>SilverStripe CMS before 3.6.1 has XSS via an SVG document that is mishandled by (1) the Insert Media option in the content editor or (2) an admin/assets/add pathname, as demonstrated by the admin/pages/edit/EditorToolbar/MediaForm/field/AssetUploadField/upload URI, aka issue SS-2017-017.</Description>
<URL>https://github.com/silverstripe/silverstripe-framework/commit/25b77a2ff8deabe8e8894002b9a5647eaec27b0a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-14920" CVSS="6.1">
<Description>Stored XSS vulnerability in eGroupware Community Edition before 16.1.20170922 allows an unauthenticated remote attacker to inject JavaScript via the User-Agent HTTP header, which is mishandled during rendering by the application administrator.</Description>
<URL>https://github.com/EGroupware/egroupware/commit/0ececf8c78f1c3f9ba15465f53a682dd7d89529f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-14921" CVSS="5.4">
<Description>Stored XSS vulnerability via IMG element at "Filename" of Filemanager in Tine 2.0 Community Edition before 2017.08.4 allows an authenticated user to inject JavaScript, which is mishandled during rendering by the application administrator and other users.</Description>
<URL>https://github.com/tine20/Tine-2.0-Open-Source-Groupware-and-CRM/commit/146c5aaafd826c1c8990333c393bff6f64c90786</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-14922" CVSS="5.4">
<Description>Stored XSS vulnerability via IMG element at "History" of Profile, Calendar, Tasks, and CRM in Tine 2.0 Community Edition before 2017.08.4 allows an authenticated user to inject JavaScript, which is mishandled during rendering by the application administrator and other users.</Description>
<URL>https://github.com/tine20/Tine-2.0-Open-Source-Groupware-and-CRM/commit/146c5aaafd826c1c8990333c393bff6f64c90786</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-14923" CVSS="5.4">
<Description>Stored XSS vulnerability via IMG element at "Leadname" of CRM in Tine 2.0 Community Edition before 2017.08.4 allows an authenticated user to inject JavaScript, which is mishandled during rendering by the application administrator and other users.</Description>
<URL>https://github.com/tine20/Tine-2.0-Open-Source-Groupware-and-CRM/commit/146c5aaafd826c1c8990333c393bff6f64c90786</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-15194" CVSS="6.1">
<Description>include/global_session.php in Cacti 1.1.25 has XSS related to (1) the URI or (2) the refresh page.</Description>
<URL>https://github.com/Cacti/cacti/commit/93f661d8adcfa6618b11522cdab30e97bada33fd</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-15213" CVSS="5.4">
<Description>Stored XSS vulnerability in Flyspray before 1.0-rc6 allows an authenticated user to inject JavaScript to gain administrator privileges, via the real_name or email_address field to themes/CleanFS/templates/common.editallusers.tpl.</Description>
<URL>https://github.com/Flyspray/flyspray/commit/754ec5d04348ef7ecb8cb02ade976dc412b031f8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-15214" CVSS="5.4">
<Description>Stored XSS vulnerability in Flyspray 1.0-rc4 before 1.0-rc6 allows an authenticated user to inject JavaScript to gain administrator privileges and also to execute JavaScript against other users (including unauthenticated users), via the name, title, or id parameter to plugins/dokuwiki/lib/plugins/changelinks/syntax.php.</Description>
<URL>https://github.com/Flyspray/flyspray/commit/00cfae5661124f9d67ac6733db61b2bfee34dccc</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-15216" CVSS="6.1">
<Description>MISP before 2.4.81 has a potential reflected XSS in a quickDelete action that is used to delete a sighting, related to app/View/Sightings/ajax/quickDeleteConfirmationForm.ctp and app/webroot/js/misp.js.</Description>
<URL>https://github.com/MISP/MISP/commit/ca6f4a783a6ba65532dc8767446bda44773ec627</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-15284" CVSS="5.4">
<Description>Cross-Site Scripting exists in OctoberCMS 1.0.425 (aka Build 425), allowing a least privileged user to upload an SVG file containing malicious code as the Avatar for the profile. When this is opened by the Admin, it causes JavaScript execution in the context of the Admin account.</Description>
<URL>https://github.com/octobercms/library/commit/3bbbbf3da469f457881b5af902eb0b89b95189a2</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-15538" CVSS="5.4">
<Description>Stored XSS vulnerability in the Media Objects component of ILIAS before 5.1.21 and 5.2.x before 5.2.9 allows an authenticated user to inject JavaScript to gain administrator privileges, related to the setParameter function in Services/MediaObjects/classes/class.ilMediaItem.php.</Description>
<URL>https://github.com/ILIAS-eLearning/ILIAS/commit/b2a4660afec1e87d41c83c8e381f549bc6dfc70f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-15568" CVSS="6.1">
<Description>In Redmine before 3.2.8, 3.3.x before 3.3.5, and 3.4.x before 3.4.3, XSS exists in app/helpers/application_helper.rb via a multi-value field with a crafted value that is mishandled during rendering of issue history.</Description>
<URL>https://github.com/redmine/redmine/commit/94f7cfbf990028348b9262578acbc53a94fce448</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-15569" CVSS="6.1">
<Description>In Redmine before 3.2.8, 3.3.x before 3.3.5, and 3.4.x before 3.4.3, XSS exists in app/helpers/queries_helper.rb via a multi-value field with a crafted value that is mishandled during rendering of an issue list.</Description>
<URL>https://github.com/redmine/redmine/commit/56c8ee0440d8555aa7822d947ba9091c8a791508</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-15570" CVSS="6.1">
<Description>In Redmine before 3.2.8, 3.3.x before 3.3.5, and 3.4.x before 3.4.3, XSS exists in app/views/timelog/_list.html.erb via crafted column data.</Description>
<URL>https://github.com/redmine/redmine/commit/1a0976417975a128b0a932ba1552c37e9414953b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-15571" CVSS="6.1">
<Description>In Redmine before 3.2.8, 3.3.x before 3.3.5, and 3.4.x before 3.4.3, XSS exists in app/views/issues/_list.html.erb via crafted column data.</Description>
<URL>https://github.com/redmine/redmine/commit/273dd9cb3bcfb1e0a0b90570b3b34eafa07d67aa</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-15809" CVSS="6.1">
<Description>In phpMyFaq before 2.9.9, there is XSS in admin/tags.main.php via a crafted tag.</Description>
<URL>https://github.com/thorsten/phpMyFAQ/commit/cb648f0d5690b81647dd5c9efe942ebf6cce7da9</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-15872" CVSS="4.8">
<Description>phpwcms 1.8.9 has XSS in include/inc_tmpl/admin.edituser.tmpl.php and include/inc_tmpl/admin.newuser.tmpl.php via the username (aka new_login) field.</Description>
<URL>https://github.com/slackero/phpwcms/commit/62c7c4a7a7de5effa0a82c89e77e53795a82e11d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-16015" CVSS="6.1">
<Description>Forms is a library for easily creating HTML forms. Versions before 1.3.0 did not have proper html escaping. This means that if the application did not sanitize html on behalf of forms, use of forms may be vulnerable to cross site scripting</Description>
<URL>https://github.com/caolan/forms/commit/bc01e534a0ff863dedb2026a50bd03153bbc6a5d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="80">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-16802" CVSS="5.4">
<Description>In the sharingGroupPopulateOrganisations function in app/webroot/js/misp.js in MISP 2.4.82, there is XSS via a crafted organisation name that is manually added.</Description>
<URL>https://github.com/MISP/MISP/commit/a659664447a7b2a383cb9e0f6b43dcb43ec69194</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-16880" CVSS="6.1">
<Description>The dump function in Util/TemplateHelper.php in filp whoops before 2.1.13 has XSS.</Description>
<URL>https://github.com/filp/whoops/commit/c16791d28d1ca3139e398145f0c6565c523c291a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-16906" CVSS="5.4">
<Description>In Horde Groupware 5.2.19-5.2.22, there is XSS via the URL field in a "Calendar -> New Event" action.</Description>
<URL>https://github.com/horde/kronolith/commit/09d90141292f9ec516a7a2007bf828ce2bbdf60d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-16907" CVSS="5.4">
<Description>In Horde Groupware 5.2.19 and 5.2.21, there is XSS via the Color field in a Create Task List action.</Description>
<URL>https://github.com/horde/base/commit/fb2113bbcd04bd4a28c46aad0889fb0a3979a230</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-17089" CVSS="4.8">
<Description>custom/run.cgi in Webmin before 1.870 allows remote authenticated administrators to conduct XSS attacks via the description field in the custom command functionality.</Description>
<URL>https://github.com/webmin/webmin/commit/a9c97eea6c268fb83d93a817d58bac75e0d2599e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-17092" CVSS="5.4">
<Description>wp-includes/functions.php in WordPress before 4.9.1 does not require the unfiltered_html capability for upload of .js files, which might allow remote attackers to conduct XSS attacks via a crafted file.</Description>
<URL>https://github.com/WordPress/WordPress/commit/67d03a98c2cae5f41843c897f206adde299b0509</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-17093" CVSS="5.4">
<Description>wp-includes/general-template.php in WordPress before 4.9.1 does not properly restrict the lang attribute of an HTML element, which might allow attackers to conduct XSS attacks via the language setting of a site.</Description>
<URL>https://github.com/WordPress/WordPress/commit/3713ac5ebc90fb2011e98dfd691420f43da6c09a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-17094" CVSS="5.4">
<Description>wp-includes/feed.php in WordPress before 4.9.1 does not properly restrict enclosures in RSS and Atom fields, which might allow attackers to conduct XSS attacks via a crafted URL.</Description>
<URL>https://github.com/WordPress/WordPress/commit/f1de7e42df29395c3314bf85bff3d1f4f90541de</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-17714" CVSS="6.1">
<Description>Trape before 2017-11-05 has XSS via the /nr red parameter, the /nr vId parameter, the /register User-Agent HTTP header, the /register country parameter, the /register countryCode parameter, the /register cpu parameter, the /register isp parameter, the /register lat parameter, the /register lon parameter, the /register org parameter, the /register query parameter, the /register region parameter, the /register regionName parameter, the /register timezone parameter, the /register vId parameter, the /register zip parameter, or the /tping id parameter.</Description>
<URL>https://github.com/boxug/trape/commit/628149159ba25adbfc29a3ae1d4b10c7eb936dd3</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-18358" CVSS="6.1">
<Description>LimeSurvey before 2.72.4 has Stored XSS by using the Continue Later (aka Resume later) feature to enter an email address, which is mishandled in the admin panel.</Description>
<URL>https://github.com/LimeSurvey/LimeSurvey/commit/700b20e2ae918550bfbf283f433f07622480978b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-18635" CVSS="6.1">
<Description>An XSS vulnerability was discovered in noVNC before 0.6.2 in which the remote VNC server could inject arbitrary HTML into the noVNC web page via the messages propagated to the status field, such as the VNC server name.</Description>
<URL>https://github.com/novnc/noVNC/commit/6048299a138e078aed210f163111698c8c526a13#diff-286f7dc7b881e942e97cd50c10898f03L534</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-20153" CVSS="6.1">
<Description>A vulnerability has been found in aerouk imageserve and classified as problematic. Affected by this vulnerability is an unknown functionality. The manipulation of the argument REQUEST_URI leads to cross site scripting. The attack can be launched remotely. The complexity of an attack is rather high. The exploitation appears to be difficult. The exploit has been disclosed to the public and may be used. The identifier of the patch is 2ac3cd4f90b4df66874fab171376ca26868604c4. It is recommended to apply a patch to fix this issue. The identifier VDB-217057 was assigned to this vulnerability.</Description>
<URL>https://github.com/aerouk/imageserve/commit/2ac3cd4f90b4df66874fab171376ca26868604c4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-20155" CVSS="6.1">
<Description>A vulnerability was found in Sterc Google Analytics Dashboard for MODX up to 1.0.5. It has been declared as problematic. Affected by this vulnerability is an unknown functionality of the file core/components/analyticsdashboardwidget/elements/tpl/widget.analytics.tpl of the component Internal Search. The manipulation leads to cross site scripting. The attack can be launched remotely. Upgrading to version 1.0.6 is able to address this issue. The identifier of the patch is 855d9560d3782c105568eedf9b22a769fbf29cc0. It is recommended to upgrade the affected component. The identifier VDB-217069 was assigned to this vulnerability.</Description>
<URL>https://github.com/Sterc/Analytics-dashboard-widget/commit/855d9560d3782c105568eedf9b22a769fbf29cc0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-20158" CVSS="6.1">
<Description>** UNSUPPORTED WHEN ASSIGNED ** A vulnerability was found in vova07 Yii2 FileAPI Widget up to 0.1.8. It has been declared as problematic. Affected by this vulnerability is the function run of the file actions/UploadAction.php. The manipulation of the argument file leads to cross site scripting. The attack can be launched remotely. Upgrading to version 0.1.9 is able to address this issue. The identifier of the patch is c00d1e4fc912257fca1fce66d7a163bdbb4c8222. It is recommended to upgrade the affected component. The identifier VDB-217141 was assigned to this vulnerability. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.</Description>
<URL>https://github.com/vova07/yii2-fileapi-widget/commit/c00d1e4fc912257fca1fce66d7a163bdbb4c8222</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-20159" CVSS="6.1">
<Description>A vulnerability was found in rf Keynote up to 0.x on Rails. It has been rated as problematic. Affected by this issue is some unknown functionality of the file lib/keynote/rumble.rb. The manipulation of the argument value leads to cross site scripting. The attack may be launched remotely. Upgrading to version 1.0.0 is able to address this issue. The patch is identified as 05be4356b0a6ca7de48da926a9b997beb5ffeb4a. It is recommended to upgrade the affected component. VDB-217142 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/rf-/keynote/commit/05be4356b0a6ca7de48da926a9b997beb5ffeb4a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-20167" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, was found in Minichan. This affects an unknown part of the file reports.php. The manipulation of the argument headline leads to cross site scripting. It is possible to initiate the attack remotely. The identifier of the patch is fc0e732e58630cba318d6bf49d1388a7aa9d390e. It is recommended to apply a patch to fix this issue. The identifier VDB-217785 was assigned to this vulnerability.</Description>
<URL>https://github.com/Minichan/Minichan/commit/fc0e732e58630cba318d6bf49d1388a7aa9d390e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-20175" CVSS="6.1">
<Description>A vulnerability classified as problematic has been found in DaSchTour matomo-mediawiki-extension up to 2.4.2 on MediaWiki. This affects an unknown part of the file Piwik.hooks.php of the component Username Handler. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. The complexity of an attack is rather high. The exploitability is told to be difficult. The exploit has been disclosed to the public and may be used. Upgrading to version 2.4.3 is able to address this issue. The patch is named 681324e4f518a8af4bd1f93867074c728eb9923d. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-220203.</Description>
<URL>https://github.com/DaSchTour/matomo-mediawiki-extension/commit/681324e4f518a8af4bd1f93867074c728eb9923d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-20176" CVSS="6.1">
<Description>A vulnerability classified as problematic was found in ciubotaru share-on-diaspora 0.7.9. This vulnerability affects unknown code of the file new_window.php. The manipulation of the argument title/url leads to cross site scripting. The attack can be initiated remotely. The name of the patch is fb6fae2f8a9b146471450b5b0281046a17d1ac8d. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-220204.</Description>
<URL>https://github.com/ciubotaru/share-on-diaspora/commit/fb6fae2f8a9b146471450b5b0281046a17d1ac8d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-20177" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in WangGuard Plugin 1.8.0 on WordPress. Affected by this issue is the function wangguard_users_info of the file wangguard-user-info.php of the component WGG User List Handler. The manipulation of the argument userIP leads to cross site scripting. The attack may be launched remotely. The patch is identified as 88414951e30773c8d2ec13b99642688284bf3189. It is recommended to apply a patch to fix this issue. VDB-220214 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/joseconti/WangGuard/commit/88414951e30773c8d2ec13b99642688284bf3189</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-20182" CVSS="6.1">
<Description>A vulnerability was found in Mobile Vikings Django AJAX Utilities up to 1.2.1 and classified as problematic. This issue affects the function Pagination of the file django_ajax/static/ajax-utilities/js/pagination.js of the component Backslash Handler. The manipulation of the argument url leads to cross site scripting. The attack may be initiated remotely. The patch is named 329eb1dd1580ca1f9d4f95bc69939833226515c9. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-222611.</Description>
<URL>https://github.com/mvpoland/django-ajax-utilities/commit/329eb1dd1580ca1f9d4f95bc69939833226515c9</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-20183" CVSS="6.1">
<Description>A vulnerability was found in External Media without Import Plugin up to 1.0.0 on WordPress. It has been declared as problematic. This vulnerability affects the function print_media_new_panel of the file external-media-without-import.php. The manipulation of the argument url/error/width/height/mime-type leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 1.0.1 is able to address this issue. The patch is identified as 9d2ecd159a6e2e3f710b4f1c28e2714f66502746. It is recommended to upgrade the affected component. VDB-227950 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/zzxiang/external-media-without-import/commit/9d2ecd159a6e2e3f710b4f1c28e2714f66502746</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-20185" CVSS="6.1">
<Description>** UNSUPPORTED WHEN ASSIGNED ** A vulnerability was found in Fuzzy SWMP. It has been rated as problematic. This issue affects some unknown processing of the file swmp.php of the component GET Parameter Handler. The manipulation of the argument theme leads to cross site scripting. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. This product takes the approach of rolling releases to provide continious delivery. Therefore, version details for affected and updated releases are not available. The identifier of the patch is 792bcab637cb8c3bd251d8fc8771512c5329a93e. It is recommended to apply a patch to fix this issue. The identifier VDB-230669 was assigned to this vulnerability. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.</Description>
<URL>https://github.com/fuzzymannerz/swmp/commit/792bcab637cb8c3bd251d8fc8771512c5329a93e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-20188" CVSS="4.7">
<Description>A vulnerability has been found in Zimbra zm-ajax up to 8.8.1 and classified as problematic. Affected by this vulnerability is the function XFormItem.prototype.setError of the file WebRoot/js/ajax/dwt/xforms/XFormItem.js. The manipulation of the argument message leads to cross site scripting. The attack can be launched remotely. The complexity of an attack is rather high. The exploitation appears to be difficult. Upgrading to version 8.8.2 is able to address this issue. The identifier of the patch is 8d039d6efe80780adc40c6f670c06d21de272105. It is recommended to upgrade the affected component. The identifier VDB-249421 was assigned to this vulnerability.</Description>
<URL>https://github.com/Zimbra/zm-ajax/commit/8d039d6efe80780adc40c6f670c06d21de272105</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-2601" CVSS="5.4">
<Description>Jenkins before versions 2.44, 2.32.2 is vulnerable to a persisted cross-site scripting in parameter names and descriptions (SECURITY-353). Users with the permission to configure jobs were able to inject JavaScript into parameter names and descriptions.</Description>
<URL>https://github.com/jenkinsci/jenkins/commit/fd2e081b947124c90bcd97bfc55e1a7f2ef41a74</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-2610" CVSS="5.4">
<Description>jenkins before versions 2.44, 2.32.2 is vulnerable to a persisted cross-site scripting in search suggestions due to improperly escaping users with less-than and greater-than characters in their names (SECURITY-388).</Description>
<URL>https://github.com/jenkinsci/jenkins/commit/307ed31caba68a46426b8c73a787a05add2c7489</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-2661" CVSS="6.1">
<Description>ClusterLabs pcs before version 0.9.157 is vulnerable to a cross-site scripting vulnerability due to improper validation of Node name field when creating new cluster or adding existing cluster.</Description>
<URL>https://github.com/ClusterLabs/pcs/commit/1874a769b5720ae5430f10c6cedd234430bc703f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-6503" CVSS="6.1">
<Description>WebUI in qBittorrent before 3.3.11 did not escape many values, which could potentially lead to XSS.</Description>
<URL>https://github.com/qbittorrent/qBittorrent/commit/6ca3e4f094da0a0017cb2d483ec1db6176bb0b16</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-6511" CVSS="6.1">
<Description>andrzuk/FineCMS before 2017-03-06 is vulnerable to a reflected XSS in index.php because of missing validation of the action parameter in application/classes/application.php.</Description>
<URL>https://github.com/andrzuk/FineCMS/commit/2c80de96d403d4a2e81ac4c48f358bdffbe85ea0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-6820" CVSS="6.1">
<Description>rcube_utils.php in Roundcube before 1.1.8 and 1.2.x before 1.2.4 is susceptible to a cross-site scripting vulnerability via a crafted Cascading Style Sheets (CSS) token sequence within an SVG element.</Description>
<URL>https://github.com/roundcube/roundcubemail/commit/cbd35626f7db7855f3b5e2db00d28ecc1554e9f4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-7579" CVSS="6.1">
<Description>inc/PMF/Faq.php in phpMyFAQ before 2.9.7 has XSS in the question field.</Description>
<URL>https://github.com/thorsten/phpMyFAQ/commit/a69f32175c28af1b34e5df83000f830e60f6bce9</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-7583" CVSS="6.1">
<Description>ILIAS before 5.2.3 has XSS via SVG documents.</Description>
<URL>https://github.com/ILIAS-eLearning/ILIAS/commit/ac223e9a91ffbdf07358afc4c7713d95732a9979</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-7871" CVSS="6.1">
<Description>trollepierre/tdm before 2017-04-13 is vulnerable to a reflected XSS in tdm-master/webhook.php (challenge parameter).</Description>
<URL>https://github.com/trollepierre/tdm/commit/2e89019d6a491f0a5ac3db8732181f6eb1d219aa</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-8085" CVSS="6.1">
<Description>In Exponent CMS before 2.4.1 Patch #5, XSS in elFinder is possible in framework/modules/file/connector/elfinder.php.</Description>
<URL>https://github.com/exponentcms/exponent-cms/commit/0b2241ff1c7d86376fa260c5d4c1714f6cef9c0f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-8302" CVSS="5.4">
<Description>Mura CMS 7.0.6967 allows admin/?muraAction= XSS attacks, related to admin/core/views/carch/list.cfm, admin/core/views/carch/loadsiteflat.cfm, admin/core/views/cusers/inc/dsp_nextn.cfm, admin/core/views/cusers/inc/dsp_search_form.cfm, admin/core/views/cusers/inc/dsp_users_list.cfm, admin/core/views/cusers/list.cfm, and admin/core/views/cusers/listusers.cfm.</Description>
<URL>https://github.com/blueriver/MuraCMS/commit/0e387c9454b3c085fe5e7cd876ed746ca16d5308</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-8832" CVSS="6.1">
<Description>Allen Disk 1.6 has XSS in the id parameter to downfile.php.</Description>
<URL>https://github.com/s3131212/allendisk/commit/37b6a63b85d5ab3ed81141cadc47489d7571664b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-8876" CVSS="6.1">
<Description>Symphony 2 2.6.11 has XSS in the meta[navigation_group] parameter to content/content.blueprintssections.php.</Description>
<URL>https://github.com/DeuxHuitHuit/symphony-2/commit/cd69a2a516e6503c1a1c7e097ee90d255ec3d6b7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-8920" CVSS="6.1">
<Description>irc.cgi in CGI:IRC before 0.5.12 reflects user-supplied input from the R parameter without proper output encoding, aka XSS.</Description>
<URL>https://github.com/dgl/cgiirc/commit/46dd48442204207b52c16065ad67d294194afd8d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2017-9305" CVSS="6.1">
<Description>lib/core/TikiFilter/PreventXss.php in Tiki Wiki CMS Groupware 16.2 allows remote attackers to bypass the XSS filter via padded zero characters, as demonstrated by an attack on tiki-batch_send_newsletter.php.</Description>
<URL>https://github.com/tikiorg/tiki/commit/6c016e8f066d2f404b18eaa1af7fa0c7a9651ccd</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-0046" CVSS="6.1">
<Description>A reflected cross-site scripting vulnerability in OpenNMS included with Juniper Networks Junos Space may allow the stealing of sensitive information or session credentials from Junos Space administrators or perform administrative actions. This issue affects Juniper Networks Junos Space versions prior to 18.2R1.</Description>
<URL>https://github.com/OpenNMS/opennms/commit/8710463077c10034fcfa06556a98fb1a1a64fd0d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-1000129" CVSS="6.1">
<Description>An XSS vulnerability exists in the Jolokia agent version 1.3.7 in the HTTP servlet that allows an attacker to execute malicious javascript in the victim's browser.</Description>
<URL>https://github.com/rhuss/jolokia/commit/5895d5c137c335e6b473e9dcb9baf748851bbc5f#diff-f19898247eddb55de6400489bff748ad</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-1000534" CVSS="6.1">
<Description>Joplin version prior to 1.0.90 contains a XSS evolving into code execution due to enabled nodeIntegration for that particular BrowserWindow instance where XSS was identified from vulnerability in Note content field - information on the fix can be found here https://github.com/laurent22/joplin/commit/494e235e18659574f836f84fcf9f4d4fcdcfcf89 that can result in executing unauthorized code within the rights in which the application is running. This attack appear to be exploitable via Victim synchronizing notes from the cloud services or other note-keeping services which contain malicious code. This vulnerability appears to have been fixed in 1.0.90 and later.</Description>
<URL>https://github.com/laurent22/joplin/commit/494e235e18659574f836f84fcf9f4d4fcdcfcf89</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-10102" CVSS="6.1">
<Description>Before WordPress 4.9.5, the version string was not escaped in the get_the_generator function, and could lead to XSS in a generator tag.</Description>
<URL>https://github.com/WordPress/WordPress/commit/31a4369366d6b8ce30045d4c838de2412c77850d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-10306" CVSS="6.1">
<Description>Services/Form/classes/class.ilDateDurationInputGUI.php and Services/Form/classes/class.ilDateTimeInputGUI.php in ILIAS 5.1.x through 5.3.x before 5.3.4 allow XSS via an invalid date.</Description>
<URL>https://github.com/ILIAS-eLearning/ILIAS/commit/95870b2db3e71154102b2cd2f05334fc741c6e39</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-10307" CVSS="6.1">
<Description>error.php in ILIAS 5.2.x through 5.3.x before 5.3.4 allows XSS via the text of a PDO exception.</Description>
<URL>https://github.com/ILIAS-eLearning/ILIAS/commit/ca982e59d0b76c0374c9a7fd1acf2685ca57cf41</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-10364" CVSS="5.4">
<Description>BigTree before 4.2.22 has XSS in the Users management page via the name or company field.</Description>
<URL>https://github.com/bigtreecms/BigTree-CMS/commit/b2eff67e45b90ca26a62e971e8f0d5d0d70f23e6</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-10366" CVSS="6.1">
<Description>An issue was discovered in the Users (aka Front-end user management) plugin 1.4.5 for October CMS. XSS exists in the name field.</Description>
<URL>https://github.com/rainlab/user-plugin/commit/098c2bc907443d67e9e18645f850e3de42941d20</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-10665" CVSS="6.1">
<Description>ILIAS 5.3.4 has XSS through unsanitized output of PHP_SELF, related to shib_logout.php and third-party demo files.</Description>
<URL>https://github.com/ILIAS-eLearning/ILIAS/commit/3fe6aa778ca06080cf1b7303cbc458aa0c42392a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-10937" CVSS="5.4">
<Description>A cross site scripting flaw exists in the tetonic-console component of Openshift Container Platform 3.11. An attacker with the ability to create pods can use this flaw to perform actions on the K8s API as the victim.</Description>
<URL>https://github.com/openshift/console/commit/d56666852da6e7309a2e63a49f49a72ff66d309c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-10994" CVSS="6.1">
<Description>js/views/message_view.js in Open Whisper Signal (aka Signal-Desktop) before 1.10.1 allows XSS via a URL.</Description>
<URL>https://github.com/signalapp/Signal-Desktop/commit/bfbd84f5d1308cdfcb08a1727821f7103be151ea</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-11117" CVSS="6.1">
<Description>Services/Feeds/classes/class.ilExternalFeedItem.php in ILIAS 5.1.x, 5.2.x, and 5.3.x before 5.3.5 has XSS via a link attribute.</Description>
<URL>https://github.com/ILIAS-eLearning/ILIAS/commit/ff9bf29858f2dbffe828711a6f8bf37038c00d77</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-11118" CVSS="6.1">
<Description>The RSS subsystem in ILIAS 5.1.x, 5.2.x, and 5.3.x before 5.3.5 has XSS via a URI to Services/Feeds/classes/class.ilExternalFeedItem.php.</Description>
<URL>https://github.com/ILIAS-eLearning/ILIAS/commit/6b2217c31b6974788a5c787413454475687b44bb</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-11120" CVSS="6.1">
<Description>Services/COPage/classes/class.ilPCSourceCode.php in ILIAS 5.1.x, 5.2.x, and 5.3.x before 5.3.5 has XSS.</Description>
<URL>https://github.com/ILIAS-eLearning/ILIAS/commit/7959485406eb981976b64fee363cf950603924ed</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-11245" CVSS="6.1">
<Description>app/webroot/js/misp.js in MISP 2.4.91 has a DOM based XSS with cortex type attributes.</Description>
<URL>https://github.com/MISP/MISP/commit/5efc07b12f82301a6086fd3433fedd69fe7119d3</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-11330" CVSS="4.8">
<Description>An issue was discovered in Pluck before 4.7.6. There is authenticated stored XSS because the character set for filenames is not properly restricted.</Description>
<URL>https://github.com/pluck-cms/pluck/commit/8f6541e60c9435e82e9c531a20cb3c218d36976e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-11532" CVSS="6.1">
<Description>An issue was discovered in the ChangUonDyU Advanced Statistics plugin 1.0.2 for MyBB. changstats.php has XSS, as demonstrated by a subject field.</Description>
<URL>https://github.com/vintagedaddyo/MyBB_Plugin-ChangUonDyU-Advanced-Statistics/commit/8122c93f4c3b517b9d35338fe77ba91d9a6ac08a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-11562" CVSS="6.1">
<Description>An issue was discovered in MISP 2.4.91. A vulnerability in app/View/Elements/eventattribute.ctp allows reflected XSS if a user clicks on a malicious link for an event view and then clicks on the deleted attributes quick filter.</Description>
<URL>https://github.com/MISP/MISP/commit/10080096879d1076756f62760d6daf582b6db722</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-11627" CVSS="6.1">
<Description>Sinatra before 2.0.2 has XSS via the 400 Bad Request page that occurs upon a params parser exception.</Description>
<URL>https://github.com/sinatra/sinatra/commit/12786867d6faaceaec62c7c2cb5b0e2dc074d71a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-11647" CVSS="6.1">
<Description>index.js in oauth2orize-fprm before 0.2.1 has XSS via a crafted URL.</Description>
<URL>https://github.com/jaredhanson/oauth2orize-fprm/commit/2bf9faee787eb004abbdfb6f4cc2fb06653defd5</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-11688" CVSS="6.1">
<Description>Ignite Realtime Openfire before 3.9.2 is vulnerable to cross-site scripting, caused by improper validation of user-supplied input. A remote attacker could exploit this vulnerability via a crafted URL to execute script in a victim's Web browser within the security context of the hosting Web site, once the URL is clicked. An attacker could use this vulnerability to steal the victim's cookie-based authentication credentials.</Description>
<URL>https://github.com/igniterealtime/Openfire/commit/ed3492a24274fd454afe93a499db49f3d6335108#diff-3f607cf668ad8f1091e789a2c1dca32a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-12030" CVSS="5.4">
<Description>Chevereto Free before 1.0.13 has XSS.</Description>
<URL>https://github.com/Chevereto/Chevereto-Free/commit/159daeab6adfe828bd06e6e74f5b647bf9b1bb70</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-12043" CVSS="6.1">
<Description>content/content.blueprintspages.php in Symphony 2.7.6 has XSS via the pages content page.</Description>
<URL>https://github.com/symphonycms/symphony-2/commit/1ace6b31867cc83267b3550686271c9c65ac3ec0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-13423" CVSS="6.1">
<Description>admin/themes/default/items/tag-form.php in Omeka before 2.6.1 allows XSS by adding or editing a tag.</Description>
<URL>https://github.com/omeka/Omeka/commit/ba841892116544847d76d3838781c9708cb92221</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-14840" CVSS="6.1">
<Description>uploads/.htaccess in Subrion CMS 4.2.1 allows XSS because it does not block .html file uploads (but does block, for example, .htm file uploads).</Description>
<URL>https://github.com/intelliants/subrion/commit/cb10ac2294cb2c3a6d2159f9a2bb8c58a2a10a47</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-15605" CVSS="6.1">
<Description>An issue was discovered in phpMyAdmin before 4.8.3. A Cross-Site Scripting vulnerability has been found where an attacker can use a crafted file to manipulate an authenticated user who loads that file through the import feature.</Description>
<URL>https://github.com/phpmyadmin/phpmyadmin/commit/00d90b3ae415b31338f76263359467a9fbebd0a1</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-16405" CVSS="6.1">
<Description>An issue was discovered in Mayan EDMS before 3.0.2. The Appearance app sets window.location directly, leading to XSS.</Description>
<URL>https://gitlab.com/mayan-edms/mayan-edms/commit/9ebe80595afe4fdd1e2c74358d6a9421f4ce130e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-16406" CVSS="6.1">
<Description>An issue was discovered in Mayan EDMS before 3.0.2. The Cabinets app has XSS via a crafted cabinet label.</Description>
<URL>https://gitlab.com/mayan-edms/mayan-edms/commit/48dfc06e49c7f773749e063f8cc69c95509d1c32</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-16407" CVSS="6.1">
<Description>An issue was discovered in Mayan EDMS before 3.0.3. The Tags app has XSS because tag label values are mishandled.</Description>
<URL>https://gitlab.com/mayan-edms/mayan-edms/commit/076468a9225e4630a463c0bbceb8e5b805fe380c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-17082" CVSS="6.1">
<Description>The Apache2 component in PHP before 5.6.38, 7.0.x before 7.0.32, 7.1.x before 7.1.22, and 7.2.x before 7.2.10 allows XSS via the body of a "Transfer-Encoding: chunked" request, because the bucket brigade is mishandled in the php_handler function in sapi/apache2handler/sapi_apache2.c.</Description>
<URL>https://github.com/php/php-src/commit/23b057742e3cf199612fa8050ae86cae675e214e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-18308" CVSS="6.1">
<Description>In the 4.2.23 version of BigTree, a Stored XSS vulnerability has been discovered in /admin/ajax/file-browser/upload/ (aka the image upload area).</Description>
<URL>https://github.com/bigtreecms/BigTree-CMS/commit/ffd668a3aa7d2f540dbcdf5751f207302519df72</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-18635" CVSS="6.1">
<Description>www/guis/admin/application/controllers/UserController.php in the administration login interface in MailCleaner CE 2018.08 and 2018.09 allows XSS via the admin/login/user/message/ PATH_INFO.</Description>
<URL>https://github.com/MailCleaner/MailCleaner/commit/5f90a52785672fc688c1f85e472e84b8a0d008d8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-19048" CVSS="6.1">
<Description>Simditor through 2.3.21 allows DOM XSS via an onload attribute within a malformed SVG element.</Description>
<URL>https://github.com/mycolorway/simditor/commit/ef01a643cbb7f8163535d6bfb71135f80ec6a6fd</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-19351" CVSS="6.1">
<Description>Jupyter Notebook before 5.7.1 allows XSS via an untrusted notebook because nbconvert responses are considered to have the same origin as the notebook server. In other words, nbconvert endpoints can execute JavaScript with access to the server API. In notebook/nbconvert/handlers.py, NbconvertFileHandler and NbconvertPostHandler do not set a Content Security Policy to prevent this.</Description>
<URL>https://github.com/jupyter/notebook/commit/107a89fce5f413fb5728c1c5d2c7788e1fb17491</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-19352" CVSS="6.1">
<Description>Jupyter Notebook before 5.7.2 allows XSS via a crafted directory name because notebook/static/tree/js/notebooklist.js handles certain URLs unsafely.</Description>
<URL>https://github.com/jupyter/notebook/commit/288b73e1edbf527740e273fcc69b889460871648</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-19787" CVSS="6.1">
<Description>An issue was discovered in lxml before 4.2.5. lxml/html/clean.py in the lxml.html.clean module does not remove javascript: URLs that use escaping, allowing a remote attacker to conduct XSS attacks, as demonstrated by "j a v a s c r i p t:" in Internet Explorer. This is a similar issue to CVE-2014-3146.</Description>
<URL>https://github.com/lxml/lxml/commit/6be1d081b49c97cfd7b3fbd934a193b668629109</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-20149" CVSS="5.4">
<Description>In WordPress before 4.9.9 and 5.x before 5.0.1, when the Apache HTTP Server is used, authors could upload crafted files that bypass intended MIME type restrictions, leading to XSS, as demonstrated by a .jpg file without JPEG data.</Description>
<URL>https://github.com/WordPress/WordPress/commit/246a70bdbfac3bd45ff71c7941deef1bb206b19a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-20150" CVSS="6.1">
<Description>In WordPress before 4.9.9 and 5.x before 5.0.1, crafted URLs could trigger XSS for certain use cases involving plugins.</Description>
<URL>https://github.com/WordPress/WordPress/commit/fb3c6ea0618fcb9a51d4f2c1940e9efcd4a2d460</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-20327" CVSS="5.4">
<Description>Chamilo LMS version 1.11.8 contains XSS in main/template/default/admin/gradebook_list.tpl in the gradebook dependencies tool, allowing authenticated users to affect other users, under specific conditions of permissions granted by administrators. This is considered "low risk" due to the nature of the feature it exploits.</Description>
<URL>https://github.com/chamilo/chamilo-lms/commit/814049e5bd5317d761dda0ebbbc519cb2a64ab6c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-20328" CVSS="5.4">
<Description>Chamilo LMS version 1.11.8 contains XSS in main/social/group_view.php in the social groups tool, allowing authenticated users to affect other users, under specific conditions of permissions granted by administrators. This is considered "low risk" due to the nature of the feature it exploits.</Description>
<URL>https://github.com/chamilo/chamilo-lms/commit/5e61c2b0fcc938ca687b8d4e593b1500aa52a034</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-20594" CVSS="6.1">
<Description>An issue was discovered in hsweb 3.0.4. It is a reflected XSS vulnerability due to the absence of type parameter checking in FlowableModelManagerController.java.</Description>
<URL>https://github.com/hs-web/hsweb-framework/commit/b72a2275ed21240296c6539bae1049c56abb542f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-20837" CVSS="4.8">
<Description>include/admin/Menu/Ajax.php in Typesetter 5.1 has index.php/Admin/Menu/Ajax?cmd=AddHidden title XSS.</Description>
<URL>https://github.com/Typesetter/Typesetter/commit/fd637e2919e7f77c498a91a8e9d353f8e12afc9a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-20859" CVSS="6.1">
<Description>edx-platform before 2018-07-18 allows XSS via a response to a Chemical Equation advanced problem.</Description>
<URL>https://github.com/edx/edx-platform/commit/5b144559fbdba7ff673cc1c165aa2d343e07b6bd.patch</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-20962" CVSS="6.1">
<Description>The Backpack\CRUD Backpack component before 3.4.9 for Laravel allows XSS via the select field type.</Description>
<URL>https://github.com/Laravel-Backpack/CRUD/commit/8b6bd0a2d489a4690f6b1d7ace67e2f07f5f0cc6</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-20975" CVSS="6.1">
<Description>Fat Free CRM before 0.18.1 has XSS in the tags_helper in app/helpers/tags_helper.rb.</Description>
<URL>https://github.com/fatfreecrm/fat_free_crm/commit/6d60bc8ed010c4eda05d6645c64849f415f68d65</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-25045" CVSS="6.1">
<Description>Django REST framework (aka django-rest-framework) before 3.9.1 allows XSS because the default DRF Browsable API view templates disable autoescaping.</Description>
<URL>https://github.com/encode/django-rest-framework/commit/4bb9a3c48427867ef1e46f7dee945a4c25a4f9b8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-25050" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in Harvest Chosen up to 1.8.6. Affected by this issue is the function AbstractChosen of the file coffee/lib/abstract-chosen.coffee. The manipulation of the argument group_label leads to cross site scripting. The attack may be launched remotely. Upgrading to version 1.8.7 is able to address this issue. The name of the patch is 77fd031d541e77510268d1041ed37798fdd1017e. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-216956.</Description>
<URL>https://github.com/harvesthq/chosen/commit/77fd031d541e77510268d1041ed37798fdd1017e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-25051" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, was found in JmPotato Pomash. This affects an unknown part of the file Pomash/theme/clean/templates/editor.html. The manipulation of the argument article.title/content.title/article.tag leads to cross site scripting. It is possible to initiate the attack remotely. The name of the patch is be1914ef0a6808e00f51618b2de92496a3604415. It is recommended to apply a patch to fix this issue. The identifier VDB-216957 was assigned to this vulnerability.</Description>
<URL>https://github.com/JmPotato/Pomash/commit/be1914ef0a6808e00f51618b2de92496a3604415</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-25052" CVSS="6.1">
<Description>A vulnerability has been found in Catalyst-Plugin-Session up to 0.40 and classified as problematic. This vulnerability affects the function _load_sessionid of the file lib/Catalyst/Plugin/Session.pm of the component Session ID Handler. The manipulation of the argument sid leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 0.41 is able to address this issue. The name of the patch is 88d1b599e1163761c9bd53bec53ba078f13e09d4. It is recommended to upgrade the affected component. VDB-216958 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/perl-catalyst/Catalyst-Plugin-Session/commit/88d1b599e1163761c9bd53bec53ba078f13e09d4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-25053" CVSS="6.1">
<Description>A vulnerability was found in moappi Json2html up to 1.1.x and classified as problematic. This issue affects some unknown processing of the file json2html.js. The manipulation leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 1.2.0 is able to address this issue. The name of the patch is 2d3d24d971b19a8ed1fb823596300b9835d55801. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-216959.</Description>
<URL>https://github.com/moappi/json2html/commit/2d3d24d971b19a8ed1fb823596300b9835d55801</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-25054" CVSS="5.4">
<Description>A vulnerability was found in shred cilla. It has been classified as problematic. Affected is an unknown function of the file cilla-xample/src/main/webapp/WEB-INF/jsp/view/search.jsp of the component Search Handler. The manipulation of the argument details leads to cross site scripting. It is possible to launch the attack remotely. The name of the patch is d345e6bc7798bd717a583ec7f545ca387819d5c7. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-216960.</Description>
<URL>https://github.com/shred/cilla/commit/d345e6bc7798bd717a583ec7f545ca387819d5c7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-25055" CVSS="6.1">
<Description>A vulnerability was found in FarCry Solr Pro Plugin up to 1.5.x. It has been declared as problematic. Affected by this vulnerability is an unknown functionality of the file packages/forms/solrProSearch.cfc of the component Search Handler. The manipulation of the argument suggestion leads to cross site scripting. The attack can be launched remotely. Upgrading to version 1.6.0 is able to address this issue. The name of the patch is b8f3d61511c9b02b781ec442bfb803cbff8e08d5. It is recommended to upgrade the affected component. The identifier VDB-216961 was assigned to this vulnerability.</Description>
<URL>https://github.com/jeffcoughlin/farcrysolrpro/commit/b8f3d61511c9b02b781ec442bfb803cbff8e08d5</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-25056" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, was found in yolapi. Affected is the function render_description of the file yolapi/pypi/metadata.py. The manipulation of the argument text leads to cross site scripting. It is possible to launch the attack remotely. The name of the patch is a0fe129055a99f429133a5c40cb13b44611ff796. It is recommended to apply a patch to fix this issue. VDB-216966 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/yola/yolapi/commit/a0fe129055a99f429133a5c40cb13b44611ff796</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-25063" CVSS="6.1">
<Description>A vulnerability classified as problematic was found in Zenoss Dashboard up to 1.3.4. Affected by this vulnerability is an unknown functionality of the file ZenPacks/zenoss/Dashboard/browser/resources/js/defaultportlets.js. The manipulation of the argument HTMLString leads to cross site scripting. The attack can be launched remotely. Upgrading to version 1.3.5 is able to address this issue. The identifier of the patch is f462285a0a2d7e1a9255b0820240b94a43b00a44. It is recommended to upgrade the affected component. The identifier VDB-217153 was assigned to this vulnerability.</Description>
<URL>https://github.com/zenoss/ZenPacks.zenoss.Dashboard/commit/f462285a0a2d7e1a9255b0820240b94a43b00a44</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-25064" CVSS="6.1">
<Description>A vulnerability was found in OSM Lab show-me-the-way. It has been rated as problematic. This issue affects some unknown processing of the file js/site.js. The manipulation leads to cross site scripting. The attack may be initiated remotely. The patch is named 4bed3b34dcc01fe6661f39c0e5d2285b340f7cac. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217439.</Description>
<URL>https://github.com/osmlab/show-me-the-way/commit/4bed3b34dcc01fe6661f39c0e5d2285b340f7cac</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-25065" CVSS="6.1">
<Description>A vulnerability was found in Wikimedia mediawiki-extensions-I18nTags and classified as problematic. This issue affects some unknown processing of the file I18nTags_body.php of the component Unlike Parser. The manipulation leads to cross site scripting. The attack may be initiated remotely. The identifier of the patch is b4bc3cbbb099eab50cf2b544cf577116f1867b94. It is recommended to apply a patch to fix this issue. The identifier VDB-217445 was assigned to this vulnerability.</Description>
<URL>https://github.com/wikimedia/mediawiki-extensions-I18nTags/commit/b4bc3cbbb099eab50cf2b544cf577116f1867b94</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-25073" CVSS="6.1">
<Description>A vulnerability has been found in Newcomer1989 TSN-Ranksystem up to 1.2.6 and classified as problematic. This vulnerability affects the function getlog of the file webinterface/bot.php. The manipulation leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 1.2.7 is able to address this issue. The patch is identified as b3a3cd8efe2cd3bd3c5b3b7abf2fe80dbee51b77. It is recommended to upgrade the affected component. VDB-218002 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/Newcomer1989/TSN-Ranksystem/commit/b3a3cd8efe2cd3bd3c5b3b7abf2fe80dbee51b77</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-25080" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in MobileDetect 2.8.31. This issue affects the function initLayoutType of the file examples/session_example.php of the component Example. The manipulation of the argument $_SERVER['PHP_SELF'] leads to cross site scripting. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 2.8.32 is able to address this issue. The identifier of the patch is 31818a441b095bdc4838602dbb17b8377d1e5cce. It is recommended to upgrade the affected component. The identifier VDB-220061 was assigned to this vulnerability.</Description>
<URL>https://github.com/serbanghita/Mobile-Detect/commit/31818a441b095bdc4838602dbb17b8377d1e5cce</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-25084" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in Ping Identity Self-Service Account Manager 1.1.2. Affected by this issue is some unknown functionality of the file src/main/java/com/unboundid/webapp/ssam/SSAMController.java. The manipulation leads to cross site scripting. The attack may be launched remotely. Upgrading to version 1.1.3 is able to address this issue. The patch is identified as f64b10d63bb19ca2228b0c2d561a1a6e5a3bf251. It is recommended to upgrade the affected component. VDB-225362 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/pingidentity/ssam/commit/f64b10d63bb19ca2228b0c2d561a1a6e5a3bf251</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-25085" CVSS="4.8">
<Description>A vulnerability classified as problematic was found in Responsive Menus 7.x-1.x-dev on Drupal. Affected by this vulnerability is the function responsive_menus_admin_form_submit of the file responsive_menus.module of the component Configuration Setting Handler. The manipulation leads to cross site scripting. The attack can be launched remotely. Upgrading to version 7.x-1.7 is able to address this issue. The patch is named 3c554b31d32a367188f44d44857b061eac949fb8. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-227755.</Description>
<URL>https://git.drupalcode.org/project/responsive_menus/-/commit/3c554b31d32a367188f44d44857b061eac949fb8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-25086" CVSS="6.1">
<Description>A vulnerability was found in sea75300 FanPress CM up to 3.6.3. It has been classified as problematic. This affects the function getArticlesPreview of the file inc/controller/action/system/templatepreview.php of the component Template Preview. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 3.6.4 is able to address this issue. The patch is named c380d343c2107fcee55ab00eb8d189ce5e03369b. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-230235.</Description>
<URL>https://github.com/sea75300/fanpresscm3/commit/c380d343c2107fcee55ab00eb8d189ce5e03369b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-25097" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, was found in Acumos Design Studio up to 2.0.7. Affected is an unknown function. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 2.0.8 is able to address this issue. The name of the patch is 0df8a5e8722188744973168648e4c74c69ce67fd. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-249420.</Description>
<URL>https://github.com/acumos/design-studio/commit/0df8a5e8722188744973168648e4c74c69ce67fd</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-3726" CVSS="6.1">
<Description>crud-file-server node module before 0.8.0 suffers from a Cross-Site Scripting vulnerability to a lack of validation of file names.</Description>
<URL>https://github.com/omphalos/crud-file-server/commit/4155bfe068bf211b49a0b3ffd06e78cbaf1b40fa</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-3741" CVSS="6.1">
<Description>There is a possible XSS vulnerability in all rails-html-sanitizer gem versions below 1.0.4 for Ruby. The gem allows non-whitelisted attributes to be present in sanitized output when input with specially-crafted HTML fragments, and these attributes can lead to an XSS attack on target applications. This issue is similar to CVE-2018-8048 in Loofah. All users running an affected release should either upgrade or use one of the workarounds immediately.</Description>
<URL>https://github.com/rails/rails-html-sanitizer/commit/f3ba1a839a35f2ba7f941c15e239a1cb379d56ae</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-5212" CVSS="5.4">
<Description>The Simple Download Monitor plugin before 3.5.4 for WordPress has XSS via the sdm_upload_thumbnail (aka File Thumbnail) parameter in an edit action to wp-admin/post.php.</Description>
<URL>https://github.com/Arsenal21/simple-download-monitor/commit/8ab8b9166bc87feba26a1573cf595af48eff7805</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-5213" CVSS="5.4">
<Description>The Simple Download Monitor plugin before 3.5.4 for WordPress has XSS via the sdm_upload (aka Downloadable File) parameter in an edit action to wp-admin/post.php.</Description>
<URL>https://github.com/Arsenal21/simple-download-monitor/commit/8ab8b9166bc87feba26a1573cf595af48eff7805</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-5688" CVSS="6.1">
<Description>ILIAS before 5.2.4 has XSS via the cmd parameter to the displayHeader function in setup/classes/class.ilSetupGUI.php in the Setup component.</Description>
<URL>https://github.com/ILIAS-eLearning/ILIAS/commit/c0f326d05231072e33679b84835c03d5043255cb</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-5776" CVSS="6.1">
<Description>WordPress before 4.9.2 has XSS in the Flash fallback files in MediaElement (under wp-includes/js/mediaelement).</Description>
<URL>https://github.com/WordPress/WordPress/commit/3fe9cb61ee71fcfadb5e002399296fcc1198d850</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-6010" CVSS="7.5">
<Description>In Yii Framework 2.x before 2.0.14, remote attackers could obtain potentially sensitive information from exception messages, or exploit reflected XSS on the error handler page in non-debug mode. Related to base/ErrorHandler.php, log/Dispatcher.php, and views/errorHandler/exception.php.</Description>
<URL>https://github.com/yiisoft/yii2/commit/6b0be47e0fa9c532e03b07b4369050582fcf5c7a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-6354" CVSS="6.1">
<Description>templates/forms/thanks.html in Formspree before 2018-01-23 allows XSS related to the _next parameter.</Description>
<URL>https://github.com/formspree/formspree/commit/5f18eeaaa459bee9a58f70cdf7c46adb1ef34ea7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-6550" CVSS="5.4">
<Description>Monstra CMS through 3.0.4 has XSS in the title function in plugins/box/pages/pages.plugin.php via a page title to admin/index.php.</Description>
<URL>https://github.com/monstra-cms/monstra/commit/388ab412035474068758df6b07e7e06852f3747b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-6834" CVSS="6.1">
<Description>static/js/pad_utils.js in Etherpad Lite before v1.6.3 has XSS via window.location.href.</Description>
<URL>https://github.com/ether/etherpad-lite/commit/a03422b09468cdd5f192b05643311c705447588b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-7652" CVSS="6.1">
<Description>lib/Zonemaster/GUI/Dancer/Export.pm in Zonemaster Web GUI before 1.0.11 has XSS.</Description>
<URL>https://github.com/dotse/zonemaster-gui/commit/568e8db44930fda4563c1e708a2440909fd8e5fe</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-8899" CVSS="6.1">
<Description>IdentityServer IdentityServer4 1.x before 1.5.3 and 2.x before 2.1.3 does not encode the redirect URI on the authorization response page, which might lead to XSS in some configurations.</Description>
<URL>https://github.com/IdentityServer/IdentityServer4/commit/21d0da227f50ac102de469a13bc5a15d2cc0f895</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2018-8948" CVSS="6.1">
<Description>In MISP before 2.4.89, app/View/Events/resolved_attributes.ctp has multiple XSS issues via a malicious MISP module.</Description>
<URL>https://github.com/MISP/MISP/commit/01924cd948dbceb8391be671dab672e9f4a0ffe8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-10254" CVSS="6.1">
<Description>In MISP before 2.4.105, the app/View/Layouts/default.ctp default layout template has a Reflected XSS vulnerability.</Description>
<URL>https://github.com/MISP/MISP/commit/586cca384be6710b03e14bcbeb7588c1772604ec</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-10260" CVSS="6.1">
<Description>Total.js CMS 12.0.0 has XSS related to themes/admin/views/index.html (item.message) and themes/admin/public/ui.js (column.format).</Description>
<URL>https://github.com/totaljs/cms/commit/75205f93009db3cf8c0b0f4f1fc8ab82d70da8ad</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-10909" CVSS="5.4">
<Description>In Symfony before 2.7.51, 2.8.x before 2.8.50, 3.x before 3.4.26, 4.x before 4.1.12, and 4.2.x before 4.2.7, validation messages are not escaped, which can lead to XSS when user input is included. This is related to symfony/framework-bundle.</Description>
<URL>https://github.com/symfony/symfony/commit/ab4d05358c3d0dd1a36fc8c306829f68e3dd84e2</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-10913" CVSS="9.8">
<Description>In Symfony before 2.7.51, 2.8.x before 2.8.50, 3.x before 3.4.26, 4.x before 4.1.12, and 4.2.x before 4.2.7, HTTP Methods provided as verbs or using the override header may be treated as trusted input, but they are not validated, possibly causing SQL injection or XSS. This is related to symfony/http-foundation.</Description>
<URL>https://github.com/symfony/symfony/commit/944e60f083c3bffbc6a0b5112db127a10a66a8ec</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="89">
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Query Injection"/>
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Query Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
<Failure Comment="via SQL Injection">Data Tempering (TPR)</Failure>
<Failure Comment="via SQL Injection">Information Exposure (IEX)</Failure>
</CVE>
<CVE ID="CVE-2019-11812" CVSS="6.1">
<Description>A persistent XSS issue was discovered in app/View/Helper/CommandHelper.php in MISP before 2.4.107. JavaScript can be included in the discussion interface, and can be triggered by clicking on the link.</Description>
<URL>https://github.com/MISP/MISP/commit/3a085a6ceea00b3ab674a984dd56c1846ef775ff</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-11813" CVSS="6.1">
<Description>An issue was discovered in app/View/Elements/Events/View/value_field.ctp in MISP before 2.4.107. There is persistent XSS via link type attributes with javascript:// links.</Description>
<URL>https://github.com/MISP/MISP/commit/6f6fb678ca07c80cb7d2bdfe5cb0313bb71bd487</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-11814" CVSS="6.1">
<Description>An issue was discovered in app/webroot/js/misp.js in MISP before 2.4.107. There is persistent XSS via image names in titles, as demonstrated by a screenshot.</Description>
<URL>https://github.com/MISP/MISP/commit/62f15433e42fb92e45bd57dd6fc0c0bf53deb6fc</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-12313" CVSS="6.1">
<Description>XSS exists in Shave before 2.5.3 because output encoding is mishandled during the overwrite of an HTML element.</Description>
<URL>https://github.com/dollarshaveclub/shave/commit/da7371b0531ba14eae48ef1bb1456a3de4cfa954#diff-074799b511e4b61923dfd3f2a3bf9b54R67</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-12347" CVSS="6.1">
<Description>In pfSense 2.4.4-p3, a stored XSS vulnerability occurs when attackers inject a payload into the Name or Description field via an acme_accountkeys_edit.php action. The vulnerability occurs due to input validation errors.</Description>
<URL>https://github.com/pfsense/FreeBSD-ports/commit/504909564079e540689dbdbed3a579483c614275</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-12566" CVSS="5.4">
<Description>The WP Statistics plugin through 12.6.5 for Wordpress has stored XSS in includes/class-wp-statistics-pages.php. This is related to an account with the Editor role creating a post with a title that contains JavaScript, to attack an admin user.</Description>
<URL>https://github.com/wp-statistics/wp-statistics/commit/aec4359975344f75385ae1ec257575d8131d6ec2</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-12584" CVSS="6.1">
<Description>Apcupsd 0.3.91_5, as used in pfSense through 2.4.4-RELEASE-p3 and other products, has an XSS issue in apcupsd_status.php.</Description>
<URL>https://github.com/pfsense/FreeBSD-ports/commit/b492c0ea47aba8dde2f14183e71498ba207594e3</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-12741" CVSS="6.1">
<Description>XSS exists in the HAPI FHIR testpage overlay module of the HAPI FHIR library before 3.8.0. The attack involves unsanitized HTTP parameters being output in a form page, allowing attackers to leak cookies and other sensitive information from ca/uhn/fhir/to/BaseController.java via a specially crafted URL. (This module is not generally used in production systems so the attack surface is expected to be low, but affected systems are recommended to upgrade immediately.)</Description>
<URL>https://github.com/jamesagnew/hapi-fhir/commit/8f41159eb147eeb964cad68b28eff97acac6ea9a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-12823" CVSS="6.1">
<Description>Craft CMS before 3.1.31 does not properly filter XML feeds and thus allowing XSS.</Description>
<URL>https://github.com/craftcms/cms/commit/6432eca59b93bcea2ca2616199e5d419447e613f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-13127" CVSS="6.1">
<Description>An issue was discovered in mxGraph through 4.0.0, related to the "draw.io Diagrams" plugin before 8.3.14 for Confluence and other products. Improper input validation/sanitization of a color field leads to XSS. This is associated with javascript/examples/grapheditor/www/js/Dialogs.js.</Description>
<URL>https://github.com/jgraph/mxgraph/commit/76e8e2809b622659a9c5ffdc4f19922b7a68cfa3</URL>
<CWE ID="20">
<MainWeakness Cause="Erroneous Code" Operation="Verify" Consequence="Incosnistent Value"/>
<MainWeakness Cause="Erroneous Code" Operation="Validate" Consequence="Invalid Data"/>
<MainWeakness Cause="Erroneous Code" Operation="Verify" Consequence="Wrong Value"/>
<MainWeakness Cause="Missing Code" Operation="Validate" Consequence="Invalid Data"/>
<MainWeakness Cause="Missing Code" Operation="Verify" Consequence="Wrong Type"/>
<MainWeakness Cause="Missing Code" Operation="Verify" Consequence="Wrong Value"/>
<MainWeakness Cause="Missing Code" Operation="Verify" Consequence="Incosnistent Value"/>
<MainWeakness Cause="Erroneous Code" Operation="Verify" Consequence="Wrong Type"/>
</CWE>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-13239" CVSS="6.1">
<Description>inc/user.class.php in GLPI before 9.4.3 allows XSS via a user picture.</Description>
<URL>https://github.com/glpi-project/glpi/commit/c2aa7a7cd6af28be3809acc7e7842d2d2008c0fb</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-13389" CVSS="6.1">
<Description>RainLoop Webmail before 1.13.0 lacks XSS protection mechanisms such as xlink:href validation, the X-XSS-Protection header, and the Content-Security-Policy header.</Description>
<URL>https://github.com/RainLoop/rainloop-webmail/commit/8eb4588917b4741889fdd905d4c32e3e86317693</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-13506" CVSS="6.1">
<Description>@nuxt/devalue before 1.2.3, as used in Nuxt.js before 2.6.2, mishandles object keys, leading to XSS.</Description>
<URL>https://github.com/nuxt/nuxt.js/commit/0d5dfe71917191c5b07f373896311f2d8f6b75be</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-13970" CVSS="6.1">
<Description>In antSword before 2.1.0, self-XSS in the database configuration leads to code execution via modules/database/asp/index.js, modules/database/custom/index.js, modules/database/index.js, or modules/database/php/index.js.</Description>
<URL>https://github.com/AntSwordProject/antSword/commit/4b932e81447b4b0475f4fce45525547395c249d3</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-14286" CVSS="6.1">
<Description>In app/webroot/js/event-graph.js in MISP 2.4.111, a stored XSS vulnerability exists in the event-graph view when a user toggles the event graph view. A malicious MISP event must be crafted in order to trigger the vulnerability.</Description>
<URL>https://github.com/MISP/MISP/commit/26bedd8a68c32a2f14460a8eac2a9fb09923392b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-14329" CVSS="6.1">
<Description>An issue was discovered in EspoCRM before 5.6.6. There is stored XSS due to lack of filtration of user-supplied data in Create Task. A malicious attacker can modify the parameter name to contain JavaScript code.</Description>
<URL>https://github.com/espocrm/espocrm/commit/4ab7d19776011288b875abd3eef1e1f6f75289e2</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-14330" CVSS="6.1">
<Description>An issue was discovered in EspoCRM before 5.6.6. Stored XSS exists due to lack of filtration of user-supplied data in Create Case. A malicious attacker can modify the firstName and lastName to contain JavaScript code.</Description>
<URL>https://github.com/espocrm/espocrm/commit/4ab7d19776011288b875abd3eef1e1f6f75289e2</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-14331" CVSS="6.1">
<Description>An issue was discovered in EspoCRM before 5.6.6. Stored XSS exists due to lack of filtration of user-supplied data in Create User. A malicious attacker can modify the firstName and lastName to contain JavaScript code.</Description>
<URL>https://github.com/espocrm/espocrm/commit/4ab7d19776011288b875abd3eef1e1f6f75289e2</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-14512" CVSS="6.1">
<Description>LimeSurvey 3.17.7+190627 has XSS via Boxes in application/extensions/PanelBoxWidget/views/box.php or a label title in application/views/admin/labels/labelview_view.php.</Description>
<URL>https://github.com/LimeSurvey/LimeSurvey/commit/0b7391dff91b326284ca3fc5188b768b5d522d88</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-14546" CVSS="5.4">
<Description>An issue was discovered in EspoCRM before 5.6.9. Stored XSS was executed on the Preference page as well as while sending an email when a malicious payload was inserted inside the Email Signature in the Preference page. The attacker could insert malicious JavaScript inside his email signature, which fires when the victim replies or forwards the mail, thus helping him steal victims' cookies (hence compromising their accounts).</Description>
<URL>https://github.com/espocrm/espocrm/commit/ffd3f762ce4a8de3b8962f33513e073c55d943b5</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-14547" CVSS="5.4">
<Description>An issue was discovered in EspoCRM before 5.6.9. Stored XSS was executed when a attacker sends an attachment to admin with malicious JavaScript in the filename. This JavaScript executed when an admin selects the particular file from the list of all attachments. The attacker could inject the JavaScript inside the filename and send it to users, thus helping him steal victims' cookies (hence compromising their accounts).</Description>
<URL>https://github.com/espocrm/espocrm/commit/ffd3f762ce4a8de3b8962f33513e073c55d943b5</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-14548" CVSS="5.4">
<Description>An issue was discovered in EspoCRM before 5.6.9. Stored XSS in the body of an Article was executed when a victim opens articles received through mail. This Article can be formed by an attacker using the Knowledge Base feature in the tab list. The attacker could inject malicious JavaScript inside the body of the article, thus helping him steal victims' cookies (hence compromising their accounts).</Description>
<URL>https://github.com/espocrm/espocrm/commit/ffd3f762ce4a8de3b8962f33513e073c55d943b5</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-14549" CVSS="5.4">
<Description>An issue was discovered in EspoCRM before 5.6.9. Stored XSS was executed inside the title and breadcrumb of a newly formed entity available to all the users. A malicious user can inject JavaScript in these values of an entity, thus stealing user cookies when someone visits the publicly accessible link.</Description>
<URL>https://github.com/espocrm/espocrm/commit/ffd3f762ce4a8de3b8962f33513e073c55d943b5</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-14550" CVSS="5.4">
<Description>An issue was discovered in EspoCRM before 5.6.9. Stored XSS was executed when a victim clicks on the Edit Dashboard feature present on the Homepage. An attacker can load malicious JavaScript inside the add tab list feature, which would fire when a user clicks on the Edit Dashboard button, thus helping him steal victims' cookies (hence compromising their accounts).</Description>
<URL>https://github.com/espocrm/espocrm/commit/ffd3f762ce4a8de3b8962f33513e073c55d943b5</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-14652" CVSS="6.1">
<Description>explorer.js in Amazon AWS JavaScript S3 Explorer (aka aws-js-s3-explorer) v2 alpha before 2019-08-02 allows XSS in certain circumstances.</Description>
<URL>https://github.com/awslabs/aws-js-s3-explorer/commit/7be671e858601455d6969e445d21a911632d6c94</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-14667" CVSS="6.1">
<Description>Firefly III 4.7.17.4 is vulnerable to multiple stored XSS issues due to the lack of filtration of user-supplied data in the transaction description field and the asset account name. The JavaScript code is executed during a convert transaction action.</Description>
<URL>https://github.com/firefly-iii/firefly-iii/commit/15d4d185bbedf2bb9db4a8fa2ccf9fc359a06194</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-14668" CVSS="5.4">
<Description>Firefly III 4.7.17.3 is vulnerable to stored XSS due to the lack of filtration of user-supplied data in the transaction description field. The JavaScript code is executed during deletion of a transaction link.</Description>
<URL>https://github.com/firefly-iii/firefly-iii/commit/3ad4e04e2ae50e60564b60b68dfac083e5684882</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-14669" CVSS="5.4">
<Description>Firefly III 4.7.17.3 is vulnerable to stored XSS due to the lack of filtration of user-supplied data in the asset account name. The JavaScript code is executed during a visit to the audit account statistics page.</Description>
<URL>https://github.com/firefly-iii/firefly-iii/commit/2ddf48f15cbdbb475221c299872420f625c3bc3f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-14670" CVSS="5.4">
<Description>Firefly III 4.7.17.3 is vulnerable to stored XSS due to the lack of filtration of user-supplied data in the bill name field. The JavaScript code is executed during rule-from-bill creation.</Description>
<URL>https://github.com/firefly-iii/firefly-iii/commit/692b256f3f6d9eab992a72eb042844220b314054</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-14672" CVSS="5.4">
<Description>Firefly III 4.7.17.5 is vulnerable to stored XSS due to the lack of filtration of user-supplied data in the liability name field. The JavaScript code is executed upon an error condition during a visit to the account show page.</Description>
<URL>https://github.com/firefly-iii/firefly-iii/commit/8717f469b10e9f7e1547c6f70f7d24e1359d28d4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-14748" CVSS="5.4">
<Description>An issue was discovered in osTicket before 1.10.7 and 1.12.x before 1.12.1. The Ticket creation form allows users to upload files along with queries. It was found that the file-upload functionality has fewer (or no) mitigations implemented for file content checks; also, the output is not handled properly, causing persistent XSS that leads to cookie stealing or malicious actions. For example, a non-agent user can upload a .html file, and Content-Disposition will be set to inline instead of attachment.</Description>
<URL>https://github.com/osTicket/osTicket/commit/33ed106b1602f559a660a69f931a9d873685d1ba</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-14750" CVSS="6.1">
<Description>An issue was discovered in osTicket before 1.10.7 and 1.12.x before 1.12.1. Stored XSS exists in setup/install.php. It was observed that no input sanitization was provided in the firstname and lastname fields of the application. The insertion of malicious queries in those fields leads to the execution of those queries. This can further lead to cookie stealing or other malicious actions.</Description>
<URL>https://github.com/osTicket/osTicket/commit/c3ba5b78261e07a883ad8fac28c214486c854e12</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-15532" CVSS="6.1">
<Description>CyberChef before 8.31.2 allows XSS in core/operations/TextEncodingBruteForce.mjs.</Description>
<URL>https://github.com/gchq/CyberChef/commit/01f0625d6a177f9c5df9281f12a27c814c2d8bcf</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-15810" CVSS="6.1">
<Description>Insufficient sanitization during device search in Netdisco 2.042010 allows for reflected XSS via manipulation of a URL parameter.</Description>
<URL>https://github.com/netdisco/netdisco/commit/deb9b62c7f839f5e41aa4d620bcdac5f9321a8a3</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16147" CVSS="6.1">
<Description>Liferay Portal through 7.2.0 GA1 allows XSS via a journal article title to journal_article/page.jsp in journal/journal-taglib.</Description>
<URL>https://github.com/liferay/liferay-portal/commit/7e063aed70f947a92bb43a4471e0c4e650fe8f7f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16172" CVSS="5.4">
<Description>LimeSurvey before v3.17.14 allows stored XSS for escalating privileges from a low-privileged account to, for example, SuperAdmin. The attack uses a survey group in which the title contains JavaScript that is mishandled upon group deletion.</Description>
<URL>https://github.com/LimeSurvey/LimeSurvey/commit/32d6a5224327b246ee3a2a08500544e4f80f9a9a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16173" CVSS="5.4">
<Description>LimeSurvey before v3.17.14 allows reflected XSS for escalating privileges from a low-privileged account to, for example, SuperAdmin. This occurs in application/core/Survey_Common_Action.php,</Description>
<URL>https://github.com/LimeSurvey/LimeSurvey/commit/f1c1ad2d24eb262363511fcca2e96ce737064006</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16216" CVSS="5.4">
<Description>Zulip server before 2.0.5 incompletely validated the MIME types of uploaded files. A user who is logged into the server could upload files of certain types to mount a stored cross-site scripting attack on other logged-in users. On a Zulip server using the default local uploads backend, the attack is only effective against browsers lacking support for Content-Security-Policy such as Internet Explorer 11. On a Zulip server using the S3 uploads backend, the attack is confined to the origin of the configured S3 uploads hostname and cannot reach the Zulip server itself.</Description>
<URL>https://github.com/zulip/zulip/commit/1195841dfb9aa26b3b0dabc6f05d72e4af25be3e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16392" CVSS="6.1">
<Description>SPIP before 3.1.11 and 3.2 before 3.2.5 allows prive/formulaires/login.php XSS via error messages.</Description>
<URL>https://git.spip.net/SPIP/spip/commit/3c12a82c7d9d4afd09e708748fa82e7836174028</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16763" CVSS="6.1">
<Description>In Pannellum from 2.5.0 through 2.5.4 URLs were not sanitized for data URIs (or vbscript:), allowing for potential XSS attacks. Such an attack would require a user to click on a hot spot to execute and would require an attacker-provided configuration. The most plausible potential attack would be if pannellum.htm was hosted on a domain that shared cookies with the targeted site's user authentication; an &lt;iframe&gt; could then be embedded on the attacker's site using pannellum.htm from the targeted site, which would allow the attacker to potentially access information from the targeted site as the authenticated user (or worse if the targeted site did not have adequate CSRF protections) if the user clicked on a hot spot in the attacker's embedded panorama viewer. This was patched in version 2.5.5.</Description>
<URL>https://github.com/mpetroff/pannellum/commit/cc2f3d99953de59db908e0c6efd1c2c17f7c6914</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16780" CVSS="5.4">
<Description>WordPress users with lower privileges (like contributors) can inject JavaScript code in the block editor using a specific payload, which is executed within the dashboard. This can lead to XSS if an admin opens the post in the editor. Execution of this attack does require an authenticated user. This has been patched in WordPress 5.3.1, along with all the previous WordPress versions from 3.7 to 5.3 via a minor release. Automatic updates are enabled by default for minor releases and we strongly recommend that you keep them enabled.</Description>
<URL>https://github.com/WordPress/wordpress-develop/commit/505dd6a20b6fc3d06130018c1caeff764248c29e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16914" CVSS="6.1">
<Description>An XSS issue was discovered in pfSense through 2.4.4-p3. In services_captiveportal_mac.php, the username and delmac parameters are displayed without sanitization.</Description>
<URL>https://github.com/pfsense/pfsense/commit/d31362b69d5d52dc196dc72f66e830cd1e6e9a4f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16966" CVSS="6.1">
<Description>An issue was discovered in Contactmanager 13.x before 13.0.45.3, 14.x before 14.0.5.12, and 15.x before 15.0.8.21 for FreePBX 14.0.10.3. In the Contactmanager class (html\admin\modules\contactmanager\Contactmanager.class.php), an unsanitized group variable coming from the URL is reflected in HTML on 2 occasions, leading to XSS. It can be requested via a GET request to /admin/ajax.php?module=contactmanager.</Description>
<URL>https://github.com/FreePBX/contactmanager/commit/99e5aa0050224289cfe64c9036f38ce2531bf633</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16967" CVSS="6.1">
<Description>An issue was discovered in Manager 13.x before 13.0.2.6 and 15.x before 15.0.6 before FreePBX 14.0.10.3. In the Manager module form (html\admin\modules\manager\views\form.php), an unsanitized managerdisplay variable coming from the URL is reflected in HTML, leading to XSS. It can be requested via GET request to /config.php?type=tool&display=manager.</Description>
<URL>https://github.com/FreePBX/manager/commit/071a50983ca6a373bb2d1d3db68e9eda4667a372</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16968" CVSS="6.1">
<Description>An issue was discovered in FusionPBX up to 4.5.7. In the file app\conference_controls\conference_control_details.php, an unsanitized id variable coming from the URL is reflected in HTML on 2 occasions, leading to XSS.</Description>
<URL>https://github.com/fusionpbx/fusionpbx/commit/02378c54722d89f875c66ddb00ff06468dabbc6d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16969" CVSS="6.1">
<Description>In FusionPBX up to 4.5.7, the file app\fifo_list\fifo_interactive.php uses an unsanitized "c" variable coming from the URL, which is reflected in HTML, leading to XSS.</Description>
<URL>https://github.com/fusionpbx/fusionpbx/commit/d3679bbeface57a21f6623cbc193b04a7fc0a885</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16970" CVSS="6.1">
<Description>In FusionPBX up to 4.5.7, the file app\sip_status\sip_status.php uses an unsanitized "savemsg" variable coming from the URL, which is reflected in HTML, leading to XSS.</Description>
<URL>https://github.com/fusionpbx/fusionpbx/commit/a55f1cd5d8edd655058152e9acf212680d5b75f3</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16971" CVSS="6.1">
<Description>In FusionPBX up to 4.5.7, the file app\messages\messages_thread.php uses an unsanitized "contact_uuid" variable coming from the URL, which is reflected on 3 occasions in HTML, leading to XSS.</Description>
<URL>https://github.com/fusionpbx/fusionpbx/commit/c48a160af53352ad1a43518b7d0faab16b8dfbcc</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16972" CVSS="6.1">
<Description>In FusionPBX up to 4.5.7, the file app\contacts\contact_addresses.php uses an unsanitized "id" variable coming from the URL, which is reflected in HTML, leading to XSS.</Description>
<URL>https://github.com/fusionpbx/fusionpbx/commit/913ad234cf145a55e5f2faaab08d776d83c1699b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16973" CVSS="6.1">
<Description>In FusionPBX up to 4.5.7, the file app\contacts\contact_edit.php uses an unsanitized "query_string" variable coming from the URL, which is reflected in HTML, leading to XSS.</Description>
<URL>https://github.com/fusionpbx/fusionpbx/commit/cc820b2eb12a3b7070afdcb7f977f70a1d49ce49</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16974" CVSS="6.1">
<Description>In FusionPBX up to 4.5.7, the file app\contacts\contact_times.php uses an unsanitized "id" variable coming from the URL, which is reflected in HTML, leading to XSS.</Description>
<URL>https://github.com/fusionpbx/fusionpbx/commit/bcc75d63aa5b721f699a2b416425943ad7707825</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16975" CVSS="6.1">
<Description>In FusionPBX up to 4.5.7, the file app\contacts\contact_notes.php uses an unsanitized "id" variable coming from the URL, which is reflected in HTML, leading to XSS.</Description>
<URL>https://github.com/fusionpbx/fusionpbx/commit/80f2ce087ab1343f1ff3bf8a058eed9b5027eb8c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16976" CVSS="6.1">
<Description>In FusionPBX up to 4.5.7, the file app\destinations\destination_imports.php uses an unsanitized "query_string" variable coming from the URL, which is reflected on 2 occasions in HTML, leading to XSS.</Description>
<URL>https://github.com/fusionpbx/fusionpbx/commit/d6ea02d896b2c57dec491ee3b36ec102639270be</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16977" CVSS="6.1">
<Description>In FusionPBX up to 4.5.7, the file app\extensions\extension_imports.php uses an unsanitized "query_string" variable coming from the URL, which is reflected in HTML, leading to XSS.</Description>
<URL>https://github.com/fusionpbx/fusionpbx/commit/fc8e4e2d278ce6bffff21b04248d469a59eb8cd4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16978" CVSS="6.1">
<Description>In FusionPBX up to v4.5.7, the file app\devices\device_settings.php uses an unsanitized "id" variable coming from the URL, which is reflected on 2 occasions in HTML, leading to XSS.</Description>
<URL>https://github.com/fusionpbx/fusionpbx/commit/83622c4ee1d9dd1913e9fb01ce8f060b46a5768a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16979" CVSS="6.1">
<Description>In FusionPBX up to v4.5.7, the file app\contacts\contact_urls.php uses an unsanitized "id" variable coming from the URL, which is reflected in HTML, leading to XSS.</Description>
<URL>https://github.com/fusionpbx/fusionpbx/commit/a76d9637e31a70060ecc38786246a8b1c9178322</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16981" CVSS="6.1">
<Description>In FusionPBX up to v4.5.7, the file app\conference_profiles\conference_profile_params.php uses an unsanitized "id" variable coming from the URL, which is reflected on 2 occasions in HTML, leading to XSS.</Description>
<URL>https://github.com/fusionpbx/fusionpbx/commit/021ff8f8e51cd1254d19e88e7aedc4b795067f8d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16982" CVSS="6.1">
<Description>In FusionPBX up to v4.5.7, the file app\access_controls\access_control_nodes.php uses an unsanitized "id" variable coming from the URL, which is reflected in HTML, leading to XSS.</Description>
<URL>https://github.com/fusionpbx/fusionpbx/commit/c9f87dc16def2135930ebbfd667651cc3f6de2ff</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16983" CVSS="6.1">
<Description>In FusionPBX up to v4.5.7, the file resources\paging.php has a paging function (called by several pages of the interface), which uses an unsanitized "param" variable constructed partially from the URL args and reflected in HTML, leading to XSS.</Description>
<URL>https://github.com/fusionpbx/fusionpbx/commit/23581e56e9a4d1685ddf1c7d67137417d654e134</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16984" CVSS="6.1">
<Description>In FusionPBX up to v4.5.7, the file app\recordings\recording_play.php uses an unsanitized "filename" variable coming from the URL, which is base64 decoded and reflected in HTML, leading to XSS.</Description>
<URL>https://github.com/fusionpbx/fusionpbx/commit/11f2dd2254dbeb1c41bf19b8c38e8fa9bc948efb</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16987" CVSS="6.1">
<Description>In FusionPBX up to v4.5.7, the file app\contacts\contact_import.php uses an unsanitized "query_string" variable coming from the URL, which is reflected in HTML, leading to XSS.</Description>
<URL>https://github.com/fusionpbx/fusionpbx/commit/ccdb27536d3549b5c0c317e3665fff231631ec77</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16988" CVSS="6.1">
<Description>In FusionPBX up to v4.5.7, the file app\basic_operator_panel\resources\content.php uses an unsanitized "eavesdrop_dest" variable coming from the URL, which is reflected on 3 occasions in HTML, leading to XSS.</Description>
<URL>https://github.com/fusionpbx/fusionpbx/commit/7fec1014ff0d08e36be6a3f7664edb3a9df7b4ac</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16989" CVSS="6.1">
<Description>In FusionPBX up to v4.5.7, the file app\conferences_active\conference_interactive.php uses an unsanitized "c" variable coming from the URL, which is reflected in HTML, leading to XSS.</Description>
<URL>https://github.com/fusionpbx/fusionpbx/commit/83123e314a2e4c2dd0815446f89bcad97278d98d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-16991" CVSS="6.1">
<Description>In FusionPBX up to v4.5.7, the file app\edit\filedelete.php uses an unsanitized "file" variable coming from the URL, which is reflected in HTML, leading to XSS.</Description>
<URL>https://github.com/fusionpbx/fusionpbx/commit/cd4632b46c62855f7e1c1c93d20ffd64edcb476e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-17091" CVSS="6.1">
<Description>faces/context/PartialViewContextImpl.java in Eclipse Mojarra, as used in Mojarra for Eclipse EE4J before 2.3.10 and Mojarra JavaServer Faces before 2.2.20, allows Reflected XSS because a client window field is mishandled.</Description>
<URL>https://github.com/eclipse-ee4j/mojarra/commit/8f70f2bd024f00ecd5b3dcca45df73edda29dcee</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-17496" CVSS="6.1">
<Description>Craft CMS before 3.3.8 has stored XSS via a name field. This field is mishandled during site deletion.</Description>
<URL>https://github.com/craftcms/cms/commit/0ee66d29281af2b6c4f866e1437842c61983a672</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-17579" CVSS="6.1">
<Description>SonarSource SonarQube before 7.8 has XSS in project links on account/projects.</Description>
<URL>https://github.com/SonarSource/sonarqube/commit/2beaf73c2d10dcaaf3949889af53579e7d5aba13</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-18209" CVSS="6.1">
<Description>templates/pad.html in Etherpad-Lite 1.7.5 has XSS when the browser does not encode the path of the URL, as demonstrated by Internet Explorer.</Description>
<URL>https://github.com/ether/etherpad-lite/commit/5879037ddca4ab9a4002adf90fc7ce6c9f82f01b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-18656" CVSS="6.1">
<Description>Pimcore 6.2.3 has XSS in the translations grid because bundles/AdminBundle/Resources/public/js/pimcore/settings/translations.js mishandles certain HTML elements.</Description>
<URL>https://github.com/pimcore/pimcore/commit/ca036e9f86bb5cdb3dac0930ec131e5f35e26c5f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-18992" CVSS="5.4">
<Description>OpenWrt 18.06.4 allows XSS via these Name fields to the cgi-bin/luci/admin/network/firewall/rules URI: "Open ports on router" and "New forward rule" and "New Source NAT" (this can occur, for example, on a TP-Link Archer C7 device).</Description>
<URL>https://github.com/openwrt/luci/commit/3961268597abba4c2b231790cb4aa7936e73cdf8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-18993" CVSS="5.4">
<Description>OpenWrt 18.06.4 allows XSS via the "New port forward" Name field to the cgi-bin/luci/admin/network/firewall/forwards URI (this can occur, for example, on a TP-Link Archer C7 device).</Description>
<URL>https://github.com/openwrt/luci/commit/c048f23bad54b0a79449652380b317819e0ea978</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-19619" CVSS="6.1">
<Description>domain/section/markdown/markdown.go in Documize before 3.5.1 mishandles untrusted Markdown content. This was addressed by adding the bluemonday HTML sanitizer to defend against XSS.</Description>
<URL>https://github.com/documize/community/commit/a4384210d4d0d6b18e6fdb7e155de96d4a1cf9f3</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-19855" CVSS="4.8">
<Description>An issue was discovered in Serpico (aka SimplE RePort wrIting and CollaboratiOn tool) 1.3.0. admin/list_user allows stored XSS via the auth_type parameter.</Description>
<URL>https://github.com/SerpicoProject/Serpico/commit/270f05ca6e51c87bb0867abb0511b61bf2aae182</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-19856" CVSS="4.8">
<Description>An issue was discovered in Serpico (aka SimplE RePort wrIting and CollaboratiOn tool) 1.3.0. The User Type on the admin/list_user page allows stored XSS via the type parameter.</Description>
<URL>https://github.com/SerpicoProject/Serpico/commit/270f05ca6e51c87bb0867abb0511b61bf2aae182</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-19858" CVSS="4.8">
<Description>An issue was discovered in Serpico (aka SimplE RePort wrIting and CollaboratiOn tool) 1.3.0. admin/add_user/UID allows stored XSS via the author parameter.</Description>
<URL>https://github.com/SerpicoProject/Serpico/commit/270f05ca6e51c87bb0867abb0511b61bf2aae182</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-20381" CVSS="6.1">
<Description>TestLink before 1.9.20 allows XSS via non-lowercase javascript: in the index.php reqURI parameter. NOTE: this issue exists because of an incomplete fix for CVE-2019-19491.</Description>
<URL>https://github.com/TestLinkOpenSourceTRMS/testlink-code/commit/cde692895e425731e6951d265a01ca6425a7c26e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-25015" CVSS="5.4">
<Description>LuCI in OpenWrt 18.06.0 through 18.06.4 allows stored XSS via a crafted SSID.</Description>
<URL>https://github.com/openwrt/luci/commit/bc17ef673f734ea8e7e696ba5735588da9111dcd</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-25084" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in Hide Files on GitHub up to 2.x. This issue affects the function addEventListener of the file extension/options.js. The manipulation leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 3.0.0 is able to address this issue. The name of the patch is 9de0c57df81db1178e0e79431d462f6d9842742e. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-216767.</Description>
<URL>https://github.com/sindresorhus/hide-files-on-github/commit/9de0c57df81db1178e0e79431d462f6d9842742e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-25086" CVSS="5.4">
<Description>A vulnerability was found in IET-OU Open Media Player up to 1.5.0. It has been declared as problematic. This vulnerability affects the function webvtt of the file application/controllers/timedtext.php. The manipulation of the argument ttml_url leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 1.5.1 is able to address this issue. The name of the patch is 3f39f2d68d11895929c04f7b49b97a734ae7cd1f. It is recommended to upgrade the affected component. VDB-216862 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/IET-OU/open-media-player/commit/3f39f2d68d11895929c04f7b49b97a734ae7cd1f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-25088" CVSS="5.4">
<Description>A vulnerability was found in ytti Oxidized Web. It has been classified as problematic. Affected is an unknown function of the file lib/oxidized/web/views/conf_search.haml. The manipulation of the argument to_research leads to cross site scripting. It is possible to launch the attack remotely. The name of the patch is 55ab9bdc68b03ebce9280b8746ef31d7fdedcc45. It is recommended to apply a patch to fix this issue. VDB-216870 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/ytti/oxidized-web/commit/55ab9bdc68b03ebce9280b8746ef31d7fdedcc45</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-25090" CVSS="6.1">
<Description>A vulnerability was found in FreePBX arimanager up to 13.0.5.3 and classified as problematic. Affected by this issue is some unknown functionality of the component Views Handler. The manipulation of the argument dataurl leads to cross site scripting. The attack may be launched remotely. Upgrading to version 13.0.5.4 is able to address this issue. The name of the patch is 199dea7cc7020d3c469a86a39fbd80f5edd3c5ab. It is recommended to upgrade the affected component. VDB-216878 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/FreePBX/arimanager/commit/199dea7cc7020d3c469a86a39fbd80f5edd3c5ab</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-25092" CVSS="4.8">
<Description>A vulnerability classified as problematic was found in Nakiami Mellivora up to 2.1.x. Affected by this vulnerability is the function print_user_ip_log of the file include/layout/user.inc.php of the component Admin Panel. The manipulation of the argument $entry['ip'] leads to cross site scripting. The attack can be launched remotely. Upgrading to version 2.2.0 is able to address this issue. The name of the patch is e0b6965f8dde608a3d2621617c05695eb406cbb9. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-216955.</Description>
<URL>https://github.com/Nakiami/mellivora/commit/e0b6965f8dde608a3d2621617c05695eb406cbb9</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-25093" CVSS="5.4">
<Description>A vulnerability, which was classified as problematic, was found in dragonexpert Recent Threads on Index. Affected is the function recentthread_list_threads of the file inc/plugins/recentthreads/hooks.php of the component Setting Handler. The manipulation of the argument recentthread_forumskip leads to cross site scripting. It is possible to launch the attack remotely. The patch is identified as 051465d807a8fcc6a8b0f4bcbb19299672399f48. It is recommended to apply a patch to fix this issue. VDB-217182 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/dragonexpert/recentthreads/commit/051465d807a8fcc6a8b0f4bcbb19299672399f48</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-25094" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, was found in innologi appointments Extension up to 2.0.5 on TYPO3. This affects an unknown part of the component Appointment Handler. The manipulation of the argument formfield leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 2.0.6 is able to address this issue. The identifier of the patch is 986d3cb34e5e086c6f04e061f600ffc5837abe7f. It is recommended to upgrade the affected component. The identifier VDB-217353 was assigned to this vulnerability.</Description>
<URL>https://github.com/innologi/typo3-appointments/commit/986d3cb34e5e086c6f04e061f600ffc5837abe7f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-25095" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, was found in kakwa LdapCherry up to 0.x. Affected is an unknown function of the component URL Handler. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 1.0.0 is able to address this issue. The patch is identified as 6f98076281e9452fdb1adcd1bcbb70a6f968ade9. It is recommended to upgrade the affected component. VDB-217434 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/kakwa/ldapcherry/commit/6f98076281e9452fdb1adcd1bcbb70a6f968ade9</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-25096" CVSS="6.1">
<Description>A vulnerability has been found in soerennb eXtplorer up to 2.1.12 and classified as problematic. Affected by this vulnerability is an unknown functionality. The manipulation leads to cross site scripting. The attack can be launched remotely. Upgrading to version 2.1.13 is able to address this issue. The patch is named b8fcb888f4ff5e171c16797a4b075c6c6f50bf46. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-217435.</Description>
<URL>https://github.com/soerennb/extplorer/commit/b8fcb888f4ff5e171c16797a4b075c6c6f50bf46</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-25105" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, was found in dro.pm. This affects an unknown part of the file web/fileman.php. The manipulation of the argument secret/key leads to cross site scripting. It is possible to initiate the attack remotely. This product does not use versioning. This is why information about affected and unaffected releases are unavailable. The patch is named fa73c3a42bc5c246a1b8f815699ea241aef154bb. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-221763.</Description>
<URL>https://github.com/lgommans/dro.pm/commit/fa73c3a42bc5c246a1b8f815699ea241aef154bb</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-25156" CVSS="6.1">
<Description>A vulnerability classified as problematic was found in dstar2018 Agency up to 61. Affected by this vulnerability is an unknown functionality of the file search.php. The manipulation of the argument QSType/QuickSearch leads to cross site scripting. The attack can be launched remotely. The patch is named 975b56953efabb434519d9feefcc53685fb8d0ab. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-244495.</Description>
<URL>https://github.com/dstar2018/agency-code-repo/commit/975b56953efabb434519d9feefcc53685fb8d0ab</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-6777" CVSS="6.1">
<Description>An issue was discovered in ZoneMinder v1.32.3. Reflected XSS exists in web/skins/classic/views/plugin.php via the zm/index.php?view=plugin pl parameter.</Description>
<URL>https://github.com/mnoorenberghe/ZoneMinder/commit/59cc65411f02c7e39a270fda3ecb4966d7b48d41</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-6990" CVSS="5.4">
<Description>A stored-self XSS exists in web/skins/classic/views/zones.php of ZoneMinder through 1.32.3, allowing an attacker to execute HTML or JavaScript code in a vulnerable field via a crafted Zone NAME to the index.php?view=zones&action=zoneImage&mid=1 URI.</Description>
<URL>https://github.com/ZoneMinder/zoneminder/commit/a3e8fd4fd5b579865f35aac3b964bc78d5b7a94a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-6992" CVSS="6.1">
<Description>A stored-self XSS exists in web/skins/classic/views/controlcaps.php of ZoneMinder through 1.32.3, allowing an attacker to execute HTML or JavaScript code in a vulnerable field via a long NAME or PROTOCOL to the index.php?view=controlcaps URI.</Description>
<URL>https://github.com/ZoneMinder/zoneminder/commit/8c5687ca308e441742725e0aff9075779fa1a498</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-7324" CVSS="6.1">
<Description>app/Core/Paginator.php in Kanboard before 1.2.8 has XSS in pagination sorting.</Description>
<URL>https://github.com/kanboard/kanboard/commit/83deec2e3621c40d15a06e2491f27571d32fe10f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-8400" CVSS="6.1">
<Description>ORY Hydra before v1.0.0-rc.3+oryOS.9 has Reflected XSS via the oauth2/fallbacks/error error_hint parameter.</Description>
<URL>https://github.com/ory/hydra/commit/9b5bbd48a72096930af08402c5e07fce7dd770f3</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-8953" CVSS="6.1">
<Description>The HAProxy package before 0.59_16 for pfSense has XSS via the desc (aka Description) or table_actionsaclN parameter, related to haproxy_listeners.php and haproxy_listeners_edit.php.</Description>
<URL>https://github.com/pfsense/FreeBSD-ports/commit/2dded47b3202dfdf89aa96f84bf701b3d5acbe6c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2019-9841" CVSS="6.1">
<Description>Vesta Control Panel 0.9.8-23 allows XSS via a crafted URL.</Description>
<URL>https://github.com/serghey-rodin/vesta/commit/c28c5d29a3c61bc8110c11349e3f2309cd537cfa</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-10246" CVSS="6.1">
<Description>MISP 2.4.122 has reflected XSS via unsanitized URL parameters. This is related to app/View/Users/statistics_orgs.ctp.</Description>
<URL>https://github.com/MISP/MISP/commit/43a0757fb33769d9ad4ca09e8f2ac572f9f6a491</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-10247" CVSS="6.1">
<Description>MISP 2.4.122 has Persistent XSS in the sighting popover tool. This is related to app/View/Elements/Events/View/sighting_field.ctp.</Description>
<URL>https://github.com/MISP/MISP/commit/e24a9eb44c1306adb02c1508e8f266ac6b95b4ed</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-10790" CVSS="5.4">
<Description>openITCOCKPIT before 3.7.3 has unnecessary files (such as Lodash files) under the web root, which leads to XSS.</Description>
<URL>https://github.com/it-novum/openITCOCKPIT/commit/3838d98d35ececc7e83cf0f7cf785c9a7729cdbf</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-10797" CVSS="6.1">
<Description>An XSS vulnerability resides in the hostname field of the diag_ping.php page in pfsense before 2.4.5 version. After passing inputs to the command and executing this command, the $result variable is not sanitized before it is printed.</Description>
<URL>https://github.com/pfsense/pfsense/commit/cc3990a334059018b004c91eeb66c147d8afe83d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-11051" CVSS="4.8">
<Description>In Wiki.js before 2.3.81, there is a stored XSS in the Markdown editor. An editor with write access to a page, using the Markdown editor, could inject an XSS payload into the content. If another editor (with write access as well) load the same page into the Markdown editor, the XSS payload will be executed as part of the preview panel. The rendered result does not contain the XSS payload as it is stripped by the HTML Sanitization security module. This vulnerability only impacts editors loading the malicious page in the Markdown editor. This has been patched in 2.3.81.</Description>
<URL>https://github.com/Requarks/wiki/commit/05e8a71ceff39167aee830ba8ad5eb0161f2911a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-11062" CVSS="5.4">
<Description>In GLPI after 0.68.1 and before 9.4.6, multiple reflexive XSS occur in Dropdown endpoints due to an invalid Content-Type. This has been fixed in version 9.4.6.</Description>
<URL>https://github.com/glpi-project/glpi/commit/5e1c52c5e8a30ceb4e9572964da7ed89ddfb1aaf</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-11074" CVSS="5.4">
<Description>In PrestaShop from version 1.5.3.0 and before version 1.7.6.6, there is a stored XSS when using the name of a quick access item. The problem is fixed in 1.7.6.6.</Description>
<URL>https://github.com/PrestaShop/PrestaShop/commit/d122b82bcc2ad8a7b05cfffc03df6c2cae08efe8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-11083" CVSS="4.8">
<Description>In October from version 1.0.319 and before version 1.0.466, a user with access to a markdown FormWidget that stores data persistently could create a stored XSS attack against themselves and any other users with access to the generated HTML from the field. This has been fixed in 1.0.466. For users of the RainLab.Blog plugin, this has also been fixed in 1.4.1.</Description>
<URL>https://github.com/octobercms/october/commit/9ecfb4867baae14a0d3f99f5b5c1e8a979ae8746</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-11456" CVSS="5.4">
<Description>LimeSurvey before 4.1.12+200324 has stored XSS in application/views/admin/surveysgroups/surveySettings.php and application/models/SurveysGroups.php (aka survey groups).</Description>
<URL>https://github.com/LimeSurvey/LimeSurvey/commit/04b118acce2a74306f365ef329cbe00efc399b26</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-11457" CVSS="5.4">
<Description>pfSense before 2.4.5 has stored XSS in system_usermanager_addprivs.php in the WebGUI via the descr parameter (aka full name) of a user.</Description>
<URL>https://github.com/pfsense/pfsense/commit/3c1e53dabe966f27c9097a5a923e77f49ae5fffa</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-12438" CVSS="5.4">
<Description>An XSS vulnerability exists in the banners.php page of PHP-Fusion 9.03.50. This can be exploited because the only security measure used against XSS is the stripping of SCRIPT tags. A malicious actor can use HTML event handlers to run JavaScript instead of using SCRIPT tags.</Description>
<URL>https://github.com/php-fusion/PHP-Fusion/commit/c36006f900d855f1173f81cea1a774295049f4d8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-12629" CVSS="5.4">
<Description>include/class.sla.php in osTicket before 1.14.2 allows XSS via the SLA Name.</Description>
<URL>https://github.com/osticket/osticket/commit/fc4c8608fa122f38673b9dddcb8fef4a15a9c884</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-12707" CVSS="6.1">
<Description>An XSS vulnerability exists in modules/wysiwyg/save.php of LeptonCMS 4.5.0. This can be exploited because the only security measure used against XSS is the stripping of SCRIPT elements. A malicious actor can use HTML event handlers to run JavaScript instead of using SCRIPT elements.</Description>
<URL>https://gitlab.com/lepton-cms/LEPTON/-/commit/52215f708395a329c9e17ea33bfc6762d4efccbb</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-13153" CVSS="6.1">
<Description>app/View/Events/resolved_attributes.ctp in MISP before 2.4.126 has XSS in the resolved attributes view.</Description>
<URL>https://github.com/MISP/MISP/commit/2989aa05225aa9b3a592ca50cbf8350ef256909c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-13278" CVSS="6.1">
<Description>Reflected Cross-Site Scripting vulnerability in Modules.php in RosarioSIS Student Information System < 6.5.1 allows remote attackers to execute arbitrary web script via embedding javascript or HTML tags in a GET request.</Description>
<URL>https://gitlab.com/francoisjacquet/rosariosis/-/commit/9cb4fec5fe177f1d3716708b46d1958eac477ebe</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-13796" CVSS="6.1">
<Description>An issue was discovered in Navigate CMS through 2.8.7. It allows XSS because of a lack of purify calls in lib/packages/structure/structure.class.php.</Description>
<URL>https://github.com/NavigateCMS/Navigate-CMS/commit/e690bb5d7bbe9df9052b13c403ca0ac5e58054d4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-13797" CVSS="6.1">
<Description>An issue was discovered in Navigate CMS through 2.8.7. It allows XSS because of a lack of purify calls in lib/packages/websites/website.class.php.</Description>
<URL>https://github.com/NavigateCMS/Navigate-CMS/commit/e690bb5d7bbe9df9052b13c403ca0ac5e58054d4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-13798" CVSS="6.1">
<Description>An issue was discovered in Navigate CMS through 2.8.7. It allows XSS because of a lack of purify calls in lib/packages/feeds/feed.class.php.</Description>
<URL>https://github.com/NavigateCMS/Navigate-CMS/commit/e690bb5d7bbe9df9052b13c403ca0ac5e58054d4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-13964" CVSS="6.1">
<Description>An issue was discovered in Roundcube Webmail before 1.3.12 and 1.4.x before 1.4.5. include/rcmail_output_html.php allows XSS via the username template object.</Description>
<URL>https://github.com/roundcube/roundcubemail/commit/37e2bc745723ef6322f0f785aefd0b9313a40f19</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-13965" CVSS="6.1">
<Description>An issue was discovered in Roundcube Webmail before 1.3.12 and 1.4.x before 1.4.5. There is XSS via a malicious XML attachment because text/xml is among the allowed types for a preview.</Description>
<URL>https://github.com/roundcube/roundcubemail/commit/884eb611627ef2bd5a2e20e02009ebb1eceecdc3</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-15083" CVSS="6.1">
<Description>In PrestaShop from version 1.7.0.0 and before version 1.7.6.6, if a target sends a corrupted file, it leads to a reflected XSS. The problem is fixed in 1.7.6.6</Description>
<URL>https://github.com/PrestaShop/PrestaShop/commit/bac749bf75a4e0d6312a70b37eb5b0a556f08fbd</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-15118" CVSS="5.4">
<Description>In Wagtail before versions 2.7.4 and 2.9.3, when a form page type is made available to Wagtail editors through the `wagtail.contrib.forms` app, and the page template is built using Django's standard form rendering helpers such as form.as_p, any HTML tags used within a form field's help text will be rendered unescaped in the page. Allowing HTML within help text is an intentional design decision by Django; however, as a matter of policy Wagtail does not allow editors to insert arbitrary HTML by default, as this could potentially be used to carry out cross-site scripting attacks, including privilege escalation. This functionality should therefore not have been made available to editor-level users. The vulnerability is not exploitable by an ordinary site visitor without access to the Wagtail admin. Patched versions have been released as Wagtail 2.7.4 (for the LTS 2.7 branch) and Wagtail 2.9.3 (for the current 2.9 branch). In these versions, help text will be escaped to prevent the inclusion of HTML tags. Site owners who wish to re-enable the use of HTML within help text (and are willing to accept the risk of this being exploited by editors) may set WAGTAILFORMS_HELP_TEXT_ALLOW_HTML = True in their configuration settings. Site owners who are unable to upgrade to the new versions can secure their form page templates by rendering forms field-by-field as per Django's documentation, but omitting the |safe filter when outputting the help text.</Description>
<URL>https://github.com/wagtail/wagtail/commit/d9a41e7f24d08c024acc9a3094940199df94db34</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-15139" CVSS="6.1">
<Description>In MyBB before version 1.8.24, the custom MyCode (BBCode) for the visual editor doesn't escape input properly when rendering HTML, resulting in a DOM-based XSS vulnerability. The weakness can be exploited by pointing a victim to a page where the visual editor is active (e.g. as a post or Private Message) and operates on a maliciously crafted MyCode message. This may occur on pages where message content is pre-filled using a GET/POST parameter, or on reply pages where a previously saved malicious message is quoted. After upgrading MyBB to 1.8.24, make sure to update the version attribute in the `codebuttons` template for non-default themes to serve the latest version of the patched `jscripts/bbcodes_sceditor.js` file.</Description>
<URL>https://github.com/mybb/mybb/commit/37ad29dcd25489a37bdd89ebac761f22492558b0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-15162" CVSS="5.4">
<Description>In PrestaShop from version 1.5.0.0 and before version 1.7.6.8, users are allowed to send compromised files. These attachments allowed people to input malicious JavaScript which triggered an XSS payload. The problem is fixed in version 1.7.6.8.</Description>
<URL>https://github.com/PrestaShop/PrestaShop/commit/2cfcd33c75974a49f17665f294f228454e14d9cf</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-15179" CVSS="9.0">
<Description>The ScratchSig extension for MediaWiki before version 1.0.1 allows stored Cross-Site Scripting. Using <script> tag inside <scratchsig> tag, attackers with edit permission can execute scripts on visitors' browser. With MediaWiki JavaScript API, this can potentially lead to privilege escalation and/or account takeover. This has been patched in release 1.0.1. This has already been deployed to all Scratch Wikis. No workarounds exist other than disabling the extension completely.</Description>
<URL>https://github.com/InternationalScratchWiki/wiki-scratchsig/commit/4160a39a20eebeb63a59eb7597a91b961eca6388</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-15241" CVSS="6.1">
<Description>TYPO3 Fluid Engine (package `typo3fluid/fluid`) before versions 2.0.5, 2.1.4, 2.2.1, 2.3.5, 2.4.1, 2.5.5 or 2.6.1 is vulnerable to cross-site scripting when making use of the ternary conditional operator in templates like `{showFullName ? fullName : defaultValue}`. Updated versions of this package are bundled in following TYPO3 (`typo3/cms-core`) versions as well: TYPO3 v8.7.25 (using `typo3fluid/fluid` v2.5.4) and TYPO3 v9.5.6 (using `typo3fluid/fluid` v2.6.1).</Description>
<URL>https://github.com/TYPO3/Fluid/commit/9ef6a8ffff2e812025fc0701b4ce72eea6911a3d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-15253" CVSS="4.8">
<Description>Versions of Grocy <= 2.7.1 are vulnerable to Cross-Site Scripting via the Create Shopping List module, that is rendered upon deleting that Shopping List. The issue was also found in users, batteries, chores, equipment, locations, quantity units, shopping locations, tasks, taskcategories, product groups, recipes and products. Authentication is required to exploit these issues and Grocy should not be publicly exposed. The linked reference details a proof-of-concept.</Description>
<URL>https://github.com/grocy/grocy/commit/0624b0df594a4353ef25e6b1874565ea52ce7772</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-15263" CVSS="6.1">
<Description>In platform before version 9.4.4, inline attributes are not properly escaped. If the data that came from users was not escaped, then an XSS vulnerability is possible. The issue was introduced in 9.0.0 and fixed in 9.4.4.</Description>
<URL>https://github.com/orchidsoftware/platform/commit/03f9a113b1a70bc5075ce86a918707f0e7d82169</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-15273" CVSS="8.1">
<Description>baserCMS before version 4.4.1 is vulnerable to Cross-Site Scripting. The issue affects the following components: Edit feed settings, Edit widget area, Sub site new registration, New category registration. Arbitrary JavaScript may be executed by entering specific characters in the account that can access the file upload function category list, subsite setting list, widget area edit, and feed list on the management screen. The issue was introduced in version 4.0.0. It is fixed in version 4.4.1.</Description>
<URL>https://github.com/baserproject/basercms/commit/b70474ef9dcee6ad8826360884625dc7ca9041a1</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-15274" CVSS="5.4">
<Description>In Wiki.js before version 2.5.162, an XSS payload can be injected in a page title and executed via the search results. While the title is properly escaped in both the navigation links and the actual page title, it is not the case in the search results. Commit a57d9af34c15adbf460dde6553d964efddf433de fixes this vulnerability (version 2.5.162) by properly escaping the text content displayed in the search results.</Description>
<URL>https://github.com/Requarks/wiki/commit/a57d9af34c15adbf460dde6553d964efddf433de</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-15276" CVSS="8.7">
<Description>baserCMS before version 4.4.1 is vulnerable to Cross-Site Scripting. Arbitrary JavaScript may be executed by entering a crafted nickname in blog comments. The issue affects the blog comment component. It is fixed in version 4.4.1.</Description>
<URL>https://github.com/baserproject/basercms/commit/d14f506385f21d67d5ff3462f204d4c2321b7c54</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-15562" CVSS="6.1">
<Description>An issue was discovered in Roundcube Webmail before 1.2.11, 1.3.x before 1.3.14, and 1.4.x before 1.4.7. It allows XSS via a crafted HTML e-mail message, as demonstrated by a JavaScript payload in the xmlns (aka XML namespace) attribute of a HEAD element when an SVG element exists.</Description>
<URL>https://github.com/roundcube/roundcubemail/commit/3e8832d029b035e3fcfb4c75839567a9580b4f82</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-15716" CVSS="6.1">
<Description>RosarioSIS 6.7.2 is vulnerable to XSS, caused by improper validation of user-supplied input by the Preferences.php script. A remote attacker could exploit this vulnerability using the tab parameter in a crafted URL.</Description>
<URL>https://gitlab.com/francoisjacquet/rosariosis/-/commit/89ae9de732024e3a2e99262aa98b400a1aa6975a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-15717" CVSS="6.1">
<Description>RosarioSIS 6.7.2 is vulnerable to XSS, caused by improper validation of user-supplied input by the Search.inc.php script. A remote attacker could exploit this vulnerability using the advanced parameter in a crafted URL.</Description>
<URL>https://gitlab.com/francoisjacquet/rosariosis/-/commit/89ae9de732024e3a2e99262aa98b400a1aa6975a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-15718" CVSS="6.1">
<Description>RosarioSIS 6.7.2 is vulnerable to XSS, caused by improper validation of user-supplied input by the PrintSchedules.php script. A remote attacker could exploit this vulnerability using the include_inactive parameter in a crafted URL.</Description>
<URL>https://gitlab.com/francoisjacquet/rosariosis/-/commit/89ae9de732024e3a2e99262aa98b400a1aa6975a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-15721" CVSS="6.1">
<Description>RosarioSIS through 6.8-beta allows modules/Custom/NotifyParents.php XSS because of the href attributes for AddStudents.php and User.php.</Description>
<URL>https://gitlab.com/francoisjacquet/rosariosis/-/commit/c4a694860b50c4aa5c67d6568f7d0613fef1a30d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-16131" CVSS="6.1">
<Description>Tiki before 21.2 allows XSS because [\s\/"\'] is not properly considered in lib/core/TikiFilter/PreventXss.php.</Description>
<URL>https://gitlab.com/tikiwiki/tiki/-/commit/d12d6ea7b025d3b3f81c8a71063fe9f89e0c4bf1</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-16145" CVSS="6.1">
<Description>Roundcube Webmail before 1.3.15 and 1.4.8 allows stored XSS in HTML messages during message display via a crafted SVG document. This issue has been fixed in 1.4.8 and 1.3.15.</Description>
<URL>https://github.com/roundcube/roundcubemail/commit/a71bf2e8d4a64ff2c83fdabc1e8cb0c045a41ef4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-17476" CVSS="6.1">
<Description>Mibew Messenger before 3.2.7 allows XSS via a crafted user name.</Description>
<URL>https://github.com/Mibew/mibew/commit/84f5bca0a90b2fe470e35e9b5121548ccce0093c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-21487" CVSS="9.6">
<Description>Cross Site Scripting vulnerability found in Netgate pfSense 2.4.4 and ACME package v.0.6.3 allows attackers to execute arbitrary code via the RootFolder field of acme_certificates.php.</Description>
<URL>https://github.com/pfsense/FreeBSD-ports/commit/a6f443cde51e7fcf17e51f16014d3589253284d8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-22607" CVSS="6.1">
<Description>Cross Site Scripting vulnerabilty in LimeSurvey 4.1.11+200316 via the (1) name and (2) description parameters in application/controllers/admin/PermissiontemplatesController.php.</Description>
<URL>https://github.com/LimeSurvey/LimeSurvey/commit/2aada33c76efbbc35d33c149ac02b1dc16a81f62</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-22608" CVSS="6.1">
<Description>Cross Site Scripting vulnerability in Enhancesoft osTicket before v1.12.6 via the queue-name parameter to include/ajax.search.php.</Description>
<URL>https://github.com/osTicket/osTicket/commit/d54cca0b265128f119b6c398575175cb10cf1754</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-22808" CVSS="6.1">
<Description>An issue was found in yii2_fecshop 2.x. There is a reflected XSS vulnerability in the check cart page.</Description>
<URL>https://github.com/fecshop/yii2_fecshop/commit/8fac6455882333cfe3d81c4121d523813e28e31a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-24390" CVSS="6.1">
<Description>eonweb in EyesOfNetwork before 5.3-7 does not properly escape the username on the /module/admin_logs page, which might allow pre-authentication stored XSS during login/logout logs recording.</Description>
<URL>https://github.com/EyesOfNetworkCommunity/eonweb/commit/c416b52d3b500d96ab40875f95b7c7939628854b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-24917" CVSS="6.1">
<Description>osTicket before 1.14.3 allows XSS via a crafted filename to DraftAjaxAPI::_uploadInlineImage() in include/ajax.draft.php.</Description>
<URL>https://github.com/osTicket/osTicket/commit/518de223933eab0c5558741ce317f36958ef193d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-25086" CVSS="6.1">
<Description>Ecommerce-CodeIgniter-Bootstrap before 2020-08-03 allows XSS in application/modules/admin/views/advanced_settings/adminUsers.php.</Description>
<URL>https://github.com/kirilkirkov/Ecommerce-CodeIgniter-Bootstrap/commit/7c3c32d6526268b1c78d6d5741361e79292e9c22</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-25087" CVSS="6.1">
<Description>Ecommerce-CodeIgniter-Bootstrap before 2020-08-03 allows XSS in application/modules/admin/views/advanced_settings/languages.php.</Description>
<URL>https://github.com/kirilkirkov/Ecommerce-CodeIgniter-Bootstrap/commit/7c3c32d6526268b1c78d6d5741361e79292e9c22</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-25088" CVSS="6.1">
<Description>Ecommerce-CodeIgniter-Bootstrap before 2020-08-03 allows XSS in application/modules/admin/views/blog/blogpublish.php.</Description>
<URL>https://github.com/kirilkirkov/Ecommerce-CodeIgniter-Bootstrap/commit/7c3c32d6526268b1c78d6d5741361e79292e9c22</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-25089" CVSS="6.1">
<Description>Ecommerce-CodeIgniter-Bootstrap before 2020-08-03 allows XSS in application/modules/admin/views/ecommerce/discounts.php.</Description>
<URL>https://github.com/kirilkirkov/Ecommerce-CodeIgniter-Bootstrap/commit/7c3c32d6526268b1c78d6d5741361e79292e9c22</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-25090" CVSS="6.1">
<Description>Ecommerce-CodeIgniter-Bootstrap before 2020-08-03 allows XSS in application/modules/admin/views/ecommerce/publish.php.</Description>
<URL>https://github.com/kirilkirkov/Ecommerce-CodeIgniter-Bootstrap/commit/7c3c32d6526268b1c78d6d5741361e79292e9c22</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-25091" CVSS="6.1">
<Description>Ecommerce-CodeIgniter-Bootstrap before 2020-08-03 allows XSS in application/modules/vendor/views/add_product.php.</Description>
<URL>https://github.com/kirilkirkov/Ecommerce-CodeIgniter-Bootstrap/commit/7c3c32d6526268b1c78d6d5741361e79292e9c22</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-25092" CVSS="6.1">
<Description>Ecommerce-CodeIgniter-Bootstrap before 2020-08-03 allows XSS in _parts/header.php, within application/views/templates/clothesshop, application/views/templates/greenlabel, and application/views/templates/redlabel.</Description>
<URL>https://github.com/kirilkirkov/Ecommerce-CodeIgniter-Bootstrap/commit/7c3c32d6526268b1c78d6d5741361e79292e9c22</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-25093" CVSS="6.1">
<Description>Ecommerce-CodeIgniter-Bootstrap before 2020-08-03 allows XSS in blog.php. within application/views/templates/clothesshop, application/views/templates/onepage, and application/views/templates/redlabel.</Description>
<URL>https://github.com/kirilkirkov/Ecommerce-CodeIgniter-Bootstrap/commit/7c3c32d6526268b1c78d6d5741361e79292e9c22</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-25729" CVSS="6.1">
<Description>ZoneMinder before 1.34.21 has XSS via the connkey parameter to download.php or export.php.</Description>
<URL>https://github.com/ZoneMinder/zoneminder/commit/9268db14a79c4ccd444c2bf8d24e62b13207b413</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-25739" CVSS="6.1">
<Description>An issue was discovered in the gon gem before gon-6.4.0 for Ruby. MultiJson does not honor the escape_mode parameter to escape fields as an XSS protection mechanism. To mitigate, json_dumper.rb in gon now does escaping for XSS by default without relying on MultiJson.</Description>
<URL>https://github.com/gazay/gon/commit/fe3c7b2191a992386dc9edd37de5447a4e809bc7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-26134" CVSS="6.1">
<Description>Live Helper Chat before 3.44v allows stored XSS in chat messages with an operator via BBCode.</Description>
<URL>https://github.com/LiveHelperChat/livehelperchat/commit/a131b937dd6a87271ed1c0c8b8deb8710cf78f58</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-26135" CVSS="6.1">
<Description>Live Helper Chat before 3.44v allows reflected XSS via the setsettingajax PATH_INFO.</Description>
<URL>https://github.com/LiveHelperChat/livehelperchat/commit/a131b937dd6a87271ed1c0c8b8deb8710cf78f58</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-26205" CVSS="5.4">
<Description>Sal is a multi-tenanted reporting dashboard for Munki with the ability to display information from Facter. In Sal through version 4.1.6 there is an XSS vulnerability on the machine_list view.</Description>
<URL>https://github.com/salopensource/sal/commit/145bb72daf8460bdedbbc9fb708d346283e7a568</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-26239" CVSS="5.4">
<Description>Scratch Addons is a WebExtension that supports both Chrome and Firefox. Scratch Addons before version 1.3.2 is vulnerable to DOM-based XSS. If the victim visited a specific website, the More Links addon of the Scratch Addons extension used incorrect regular expression which caused the HTML-escaped values to be unescaped, leading to XSS. Scratch Addons version 1.3.2 fixes the bug. The extension will be automatically updated by the browser. More Links addon can be disabled via the option of the extension.</Description>
<URL>https://github.com/ScratchAddons/ScratchAddons/commit/b9a52d6532c8514254c7cc1d8e18710dbedc41ff</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-26293" CVSS="6.1">
<Description>HtmlSanitizer is a .NET library for cleaning HTML fragments and documents from constructs that can lead to XSS attacks. In HtmlSanitizer before version 5.0.372, there is a possible XSS bypass if style tag is allowed. If you have explicitly allowed the `<style>` tag, an attacker could craft HTML that includes script after passing through the sanitizer. The default settings disallow the `<style>` tag so there is no risk if you have not explicitly allowed the `<style>` tag. The problem has been fixed in version 5.0.372.</Description>
<URL>https://github.com/mganss/HtmlSanitizer/commit/a3a7602a44d4155d51ec0fbbedc2a49e9c7e2eb8</URL>
<CWE ID="74">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Command Injection"/>
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Query Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Parameter Injection"/>
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="File Injection"/>
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Parameter Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="File Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Query Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Command Injection"/>
</CWE>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-26298" CVSS="5.4">
<Description>Redcarpet is a Ruby library for Markdown processing. In Redcarpet before version 3.5.1, there is an injection vulnerability which can enable a cross-site scripting attack. In affected versions no HTML escaping was being performed when processing quotes. This applies even when the `:escape_html` option was being used. This is fixed in version 3.5.1 by the referenced commit.</Description>
<URL>https://github.com/vmg/redcarpet/commit/a699c82292b17c8e6a62e1914d5eccc252272793</URL>
<CWE ID="74">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Command Injection"/>
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Query Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Parameter Injection"/>
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="File Injection"/>
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Parameter Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="File Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Query Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Command Injection"/>
</CWE>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-26870" CVSS="6.1">
<Description>Cure53 DOMPurify before 2.0.17 allows mutation XSS. This occurs because a serialize-parse roundtrip does not necessarily return the original DOM tree, and a namespace can change from HTML to MathML, as demonstrated by nesting of FORM elements.</Description>
<URL>https://github.com/cure53/DOMPurify/commit/02724b8eb048dd219d6725b05c3000936f11d62d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-27163" CVSS="6.1">
<Description>phpRedisAdmin before 1.13.2 allows XSS via the login.php username parameter.</Description>
<URL>https://github.com/erikdubbelboer/phpRedisAdmin/commit/eddaa674536d2e76e6d0b4efeb00604e992eab8f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-28457" CVSS="4.8">
<Description>This affects the package s-cart/core before 4.4. The search functionality of the admin dashboard in core/src/Admin/Controllers/AdminOrderController.phpindex is vulnerable to XSS.</Description>
<URL>https://github.com/s-cart/s-cart/commit/4406d407ad363ee7e4795ee290c9d2430b0413f8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-28947" CVSS="6.1">
<Description>In MISP 2.4.134, XSS exists in the template element index view because the id parameter is mishandled.</Description>
<URL>https://github.com/MISP/MISP/commit/626ca544ffb5604ea01bb291f69811668b6b5631</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-29572" CVSS="6.1">
<Description>app/View/Elements/genericElements/SingleViews/Fields/genericField.ctp in MISP 2.4.135 has XSS via the authkey comment field.</Description>
<URL>https://github.com/MISP/MISP/commit/0bfc0bf38a7758b27c5c446fec5e3b905e5a54ab</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-35132" CVSS="5.4">
<Description>An XSS issue has been discovered in phpLDAPadmin before 1.2.6.2 that allows users to store malicious values that may be executed by other users at a later time via get_request in lib/function.php.</Description>
<URL>https://github.com/leenooks/phpLDAPadmin/commit/c87571f6b7be15d5cd8b26381b6eb31ad03d28e2</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-35774" CVSS="5.4">
<Description>server/handler/HistogramQueryHandler.scala in Twitter TwitterServer (aka twitter-server) before 20.12.0, in some configurations, allows XSS via the /histograms endpoint.</Description>
<URL>https://github.com/twitter/twitter-server/commit/e0aeb87e89a6e6c711214ee2de0dd9f6e5f9cb6c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-36190" CVSS="6.1">
<Description>RailsAdmin (aka rails_admin) before 1.4.3 and 2.x before 2.0.2 allows XSS via nested forms.</Description>
<URL>https://github.com/sferik/rails_admin/commit/d72090ec6a07c3b9b7b48ab50f3d405f91ff4375</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-36324" CVSS="6.1">
<Description>Wikimedia Quarry analytics-quarry-web before 2020-12-15 allows Reflected XSS because app.py does not explicitly set the application/json content type.</Description>
<URL>https://github.com/wikimedia/analytics-quarry-web/commit/4b7e1d6a3a52ec6cf826a971135a38b0f74785d2</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-36608" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in Tribal Systems Zenario CMS. Affected by this issue is some unknown functionality of the file admin_organizer.js of the component Error Log Module. The manipulation leads to cross site scripting. The attack may be launched remotely. The name of the patch is dfd0afacb26c3682a847bea7b49ea440b63f3baa. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-212816.</Description>
<URL>https://github.com/TribalSystems/Zenario/commit/dfd0afacb26c3682a847bea7b49ea440b63f3baa</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-36621" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in chedabob whatismyudid. Affected by this issue is the function exports.enrollment of the file routes/mobileconfig.js. The manipulation leads to cross site scripting. The attack may be launched remotely. The name of the patch is bb33d4325fba80e7ea68b79121dba025caf6f45f. It is recommended to apply a patch to fix this issue. VDB-216470 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/chedabob/whatismyudid/commit/bb33d4325fba80e7ea68b79121dba025caf6f45f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-36634" CVSS="5.4">
<Description>A vulnerability classified as problematic has been found in Indeed Engineering util up to 1.0.33. Affected is the function visit/appendTo of the file varexport/src/main/java/com/indeed/util/varexport/servlet/ViewExportedVariablesServlet.java. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 1.0.34 is able to address this issue. The name of the patch is c0952a9db51a880e9544d9fac2a2218a6bfc9c63. It is recommended to upgrade the affected component. VDB-216882 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/indeedeng/util/commit/c0952a9db51a880e9544d9fac2a2218a6bfc9c63</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-36635" CVSS="5.4">
<Description>A vulnerability was found in OpenMRS Appointment Scheduling Module up to 1.12.x. It has been classified as problematic. This affects the function validateFieldName of the file api/src/main/java/org/openmrs/module/appointmentscheduling/validator/AppointmentTypeValidator.java. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 1.13.0 is able to address this issue. The name of the patch is 34213c3f6ea22df427573076fb62744694f601d8. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-216915.</Description>
<URL>https://github.com/openmrs/openmrs-module-appointmentscheduling/commit/34213c3f6ea22df427573076fb62744694f601d8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-36636" CVSS="6.1">
<Description>A vulnerability classified as problematic has been found in OpenMRS Admin UI Module up to 1.4.x. Affected is the function sendErrorMessage of the file omod/src/main/java/org/openmrs/module/adminui/page/controller/systemadmin/accounts/AccountPageController.java of the component Account Setup Handler. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 1.5.0 is able to address this issue. The name of the patch is 702fbfdac7c4418f23bb5f6452482b4a88020061. It is recommended to upgrade the affected component. VDB-216918 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/openmrs/openmrs-module-adminui/commit/702fbfdac7c4418f23bb5f6452482b4a88020061</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-36637" CVSS="6.1">
<Description>** UNSUPPORTED WHEN ASSIGNED ** A vulnerability was found in Chris92de AdminServ. It has been declared as problematic. This vulnerability affects unknown code of the file resources/core/adminserv.php. The manipulation of the argument text leads to cross site scripting. The attack can be initiated remotely. The patch is identified as 3ed17dab3b4d6e8bf1c82ddfbf882314365e9cd7. It is recommended to apply a patch to fix this issue. VDB-217042 is the identifier assigned to this vulnerability. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.</Description>
<URL>https://github.com/Chris92de/AdminServ/commit/3ed17dab3b4d6e8bf1c82ddfbf882314365e9cd7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-36638" CVSS="6.1">
<Description>** UNSUPPORTED WHEN ASSIGNED ** A vulnerability was found in Chris92de AdminServ. It has been rated as problematic. This issue affects some unknown processing of the file resources/core/adminserv.php. The manipulation of the argument error leads to cross site scripting. The attack may be initiated remotely. The patch is named 9a45087814295de6fb3a3fe38f96293665234da1. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217043. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.</Description>
<URL>https://github.com/Chris92de/AdminServ/commit/9a45087814295de6fb3a3fe38f96293665234da1</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-36644" CVSS="6.1">
<Description>A vulnerability has been found in jamesmartin Inline SVG up to 1.7.1 and classified as problematic. Affected by this vulnerability is an unknown functionality of the file lib/inline_svg/action_view/helpers.rb of the component URL Parameter Handler. The manipulation of the argument filename leads to cross site scripting. The attack can be launched remotely. Upgrading to version 1.7.2 is able to address this issue. The identifier of the patch is f5363b351508486021f99e083c92068cf2943621. It is recommended to upgrade the affected component. The identifier VDB-217597 was assigned to this vulnerability.</Description>
<URL>https://github.com/jamesmartin/inline_svg/commit/f5363b351508486021f99e083c92068cf2943621</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-36653" CVSS="6.1">
<Description>A vulnerability was found in GENI Portal. It has been rated as problematic. Affected by this issue is some unknown functionality of the file portal/www/portal/error-text.php. The manipulation of the argument error leads to cross site scripting. The attack may be launched remotely. The patch is identified as c2356cc41260551073bfaa3a94d1ab074f554938. It is recommended to apply a patch to fix this issue. VDB-218474 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/GENI-NSF/geni-portal/commit/c2356cc41260551073bfaa3a94d1ab074f554938</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-36654" CVSS="6.1">
<Description>A vulnerability classified as problematic has been found in GENI Portal. This affects the function no_invocation_id_error of the file portal/www/portal/sliceresource.php. The manipulation of the argument invocation_id/invocation_user leads to cross site scripting. It is possible to initiate the attack remotely. The patch is named 39a96fb4b822bd3497442a96135de498d4a81337. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-218475.</Description>
<URL>https://github.com/GENI-NSF/geni-portal/commit/39a96fb4b822bd3497442a96135de498d4a81337</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-4038" CVSS="7.4">
<Description>GraphQL Playground (graphql-playground-html NPM package) before version 1.6.22 have a severe XSS Reflection attack vulnerability. All unsanitized user input passed into renderPlaygroundPage() method could trigger this vulnerability. This has been patched in graphql-playground-html version 1.6.22. Note that some of the associated dependent middleware packages are also affected including but not limited to graphql-playground-middleware-express before version 1.7.16, graphql-playground-middleware-koa before version 1.6.15, graphql-playground-middleware-lambda before version 1.7.17, and graphql-playground-middleware-hapi before 1.6.13.</Description>
<URL>https://github.com/prisma-labs/graphql-playground/commit/bf1883db538c97b076801a60677733816cb3cfb7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-4041" CVSS="6.1">
<Description>In Bolt CMS before version 3.7.1, the filename of uploaded files was vulnerable to stored XSS. It is not possible to inject javascript code in the file name when creating/uploading the file. But, once created/uploaded, it can be renamed to inject the payload in it. Additionally, the measures to prevent renaming the file to disallowed filename extensions could be circumvented. This is fixed in Bolt 3.7.1.</Description>
<URL>https://github.com/bolt/bolt/commit/b42cbfcf3e3108c46a80581216ba03ef449e419f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-4049" CVSS="2.4">
<Description>In affected versions of WordPress, when uploading themes, the name of the theme folder can be crafted in a way that could lead to JavaScript execution in /wp-admin on the themes page. This does require an admin to upload the theme, and is low severity self-XSS. This has been patched in version 5.4.2, along with all the previously affected versions via a minor release (5.3.4, 5.2.7, 5.1.6, 5.0.10, 4.9.15, 4.8.14, 4.7.18, 4.6.19, 4.5.22, 4.4.23, 4.3.24, 4.2.28, 4.1.31, 4.0.31, 3.9.32, 3.8.34, 3.7.34).</Description>
<URL>https://github.com/WordPress/wordpress-develop/commit/404f397b4012fd9d382e55bf7d206c1317f01148</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="80">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-4051" CVSS="5.4">
<Description>In Dijit before versions 1.11.11, and greater than or equal to 1.12.0 and less than 1.12.9, and greater than or equal to 1.13.0 and less than 1.13.8, and greater than or equal to 1.14.0 and less than 1.14.7, and greater than or equal to 1.15.0 and less than 1.15.4, and greater than or equal to 1.16.0 and less than 1.16.3, there is a cross-site scripting vulnerability in the Editor's LinkDialog plugin. This has been fixed in 1.11.11, 1.12.9, 1.13.8, 1.14.7, 1.15.4, 1.16.3.</Description>
<URL>https://github.com/dojo/dijit/commit/462bdcd60d0333315fe69ab4709c894d78f61301</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-4052" CVSS="6.1">
<Description>In Wiki.js before 2.4.107, there is a stored cross-site scripting through template injection. This vulnerability exists due to an insecure validation mechanism intended to insert v-pre tags into rendered HTML elements which contain curly-braces. By creating a crafted wiki page, a malicious Wiki.js user may stage a stored cross-site scripting attack. This allows the attacker to execute malicious JavaScript when the page is viewed by other users. This has been patched in 2.4.107.</Description>
<URL>https://github.com/Requarks/wiki/commit/9e08718ee904046f8b2294ef6ac79e8a75a451e3</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-4061" CVSS="5.4">
<Description>In October from version 1.0.319 and before version 1.0.467, pasting content copied from malicious websites into the Froala richeditor could result in a successful self-XSS attack. This has been fixed in 1.0.467.</Description>
<URL>https://github.com/octobercms/october/commit/b384954a29b89117e1c0d6035b3ede4f46df67c5</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-4070" CVSS="5.4">
<Description>In CSS Validator less than or equal to commit 54d68a1, there is a cross-site scripting vulnerability in handling URIs. A user would have to click on a specifically crafted validator link to trigger it. This has been patched in commit e5c09a9.</Description>
<URL>https://github.com/w3c/css-validator/commit/e5c09a9119167d3064db786d5f00d730b584a53b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-5264" CVSS="6.1">
<Description>In PrestaShop before version 1.7.6.5, there is a reflected XSS while running the security compromised page. It allows anyone to execute arbitrary action. The problem is patched in the 1.7.6.5.</Description>
<URL>https://github.com/PrestaShop/PrestaShop/commit/06b7765c91c58e09ab4f8ddafbde02070fcb6f3a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-5265" CVSS="6.1">
<Description>In PrestaShop between versions 1.7.6.1 and 1.7.6.5, there is a reflected XSS on AdminAttributesGroups page. The problem is patched in 1.7.6.5.</Description>
<URL>https://github.com/PrestaShop/PrestaShop/commit/622ba66ffdbf48b399875003e00bc34d8a3ef712</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-5266" CVSS="5.4">
<Description>In the ps_link module for PrestaShop before version 3.1.0, there is a stored XSS when you create or edit a link list block with the title field. The problem is fixed in 3.1.0</Description>
<URL>https://github.com/PrestaShop/ps_linklist/commit/b90005c2cfed949ab564228b277a728e0a62a876</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-5267" CVSS="4.8">
<Description>In ActionView before versions 6.0.2.2 and 5.2.4.2, there is a possible XSS vulnerability in ActionView's JavaScript literal escape helpers. Views that use the `j` or `escape_javascript` methods may be susceptible to XSS attacks. The issue is fixed in versions 6.0.2.2 and 5.2.4.2.</Description>
<URL>https://github.com/rails/rails/commit/033a738817abd6e446e1b320cb7d1a5c15224e9a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="80">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-5269" CVSS="6.1">
<Description>In PrestaShop between versions 1.7.6.1 and 1.7.6.5, there is a reflected XSS on AdminFeatures page by using the `id_feature` parameter. The problem is fixed in 1.7.6.5</Description>
<URL>https://github.com/PrestaShop/PrestaShop/commit/9efca621a0b74b82dafa91e6b955120036e31334</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-5271" CVSS="6.1">
<Description>In PrestaShop between versions 1.6.0.0 and 1.7.6.5, there is a reflected XSS with `date_from` and `date_to` parameters in the dashboard page This problem is fixed in 1.7.6.5</Description>
<URL>https://github.com/PrestaShop/PrestaShop/commit/c464518d2aaf195007a1eb055fce64a9a027e00a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-5272" CVSS="6.1">
<Description>In PrestaShop between versions 1.5.5.0 and 1.7.6.5, there is a reflected XSS on Search page with `alias` and `search` parameters. The problem is patched in 1.7.6.5</Description>
<URL>https://github.com/PrestaShop/PrestaShop/commit/d3bf027fa37e8105fed3c809d636ebe787e43f46</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-5273" CVSS="5.4">
<Description>In PrestaShop module ps_linklist versions before 3.1.0, there is a stored XSS when using custom URLs. The problem is fixed in version 3.1.0</Description>
<URL>https://github.com/PrestaShop/ps_linklist/commit/83e6e0bdda2287f4d6e64127cb90c41d26b5ad82</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-5276" CVSS="6.1">
<Description>In PrestaShop between versions 1.7.1.0 and 1.7.6.5, there is a reflected XSS on AdminCarts page with `cartBox` parameter The problem is fixed in 1.7.6.5</Description>
<URL>https://github.com/PrestaShop/PrestaShop/commit/6838d21850e7227fb8afbf568cb0386b3dedd3ef</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-5277" CVSS="5.4">
<Description>PrestaShop module ps_facetedsearch versions before 3.5.0 has a reflected XSS with `url_name` parameter. The problem is fixed in 3.5.0</Description>
<URL>https://github.com/PrestaShop/ps_facetedsearch/commit/c792ddcdd84ec208a6dfa4a30fd66d8bc9863f4a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-5278" CVSS="6.1">
<Description>In PrestaShop between versions 1.5.4.0 and 1.7.6.5, there is a reflected XSS on Exception page The problem is fixed in 1.7.6.5</Description>
<URL>https://github.com/PrestaShop/PrestaShop/commit/ea85210d6e5d81f058b55764bc4608cdb0b36c5d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-5283" CVSS="3.5">
<Description>ViewVC before versions 1.1.28 and 1.2.1 has a XSS vulnerability in CVS show_subdir_lastmod support. The impact of this vulnerability is mitigated by the need for an attacker to have commit privileges to a CVS repository exposed by an otherwise trusted ViewVC instance that also has the `show_subdir_lastmod` feature enabled. The attack vector involves files with unsafe names (names that, when embedded into an HTML stream, would cause the browser to run unwanted code), which themselves can be challenging to create. This vulnerability is patched in versions 1.2.1 and 1.1.28.</Description>
<URL>https://github.com/viewvc/viewvc/commit/ad0f966e9a997b17d853a6972ea283d4dcd70fa8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="80">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-5285" CVSS="6.1">
<Description>In PrestaShop between versions 1.7.6.0 and 1.7.6.5, there is a reflected XSS with `back` parameter. The problem is fixed in 1.7.6.5</Description>
<URL>https://github.com/PrestaShop/PrestaShop/commit/b6aea152988d81e1586f1c03f2e72c9ef2fe7df7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-5286" CVSS="6.1">
<Description>In PrestaShop between versions 1.7.4.0 and 1.7.6.5, there is a reflected XSS when uploading a wrong file. The problem is fixed in 1.7.6.5</Description>
<URL>https://github.com/PrestaShop/PrestaShop/commit/fc0625fb0a9aab1835515f1bea52e8e063384da7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-5294" CVSS="5.4">
<Description>PrestaShop module ps_facetedsearch versions before 2.1.0 has a reflected XSS with social networks fields The problem is fixed in 2.1.0</Description>
<URL>https://github.com/PrestaShop/ps_socialfollow/commit/c1768bf14c0fcf8311bea15fba4ffdda45522d6b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-5298" CVSS="4.8">
<Description>In OctoberCMS (october/october composer package) versions from 1.0.319 and before 1.0.466, a user with the ability to use the import functionality of the `ImportExportController` behavior can be socially engineered by an attacker to upload a maliciously crafted CSV file which could result in a reflected XSS attack on the user in question Issue has been patched in Build 466 (v1.0.466).</Description>
<URL>https://github.com/octobercms/october/commit/cd0b6a791f995d86071a024464c1702efc50f46c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="87">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-7741" CVSS="9.9">
<Description>This affects the package hellojs before 1.18.6. The code get the param oauth_redirect from url and pass it to location.assign without any check and sanitisation. So we can simply pass some XSS payloads into the url param oauth_redirect, such as javascript:alert(1).</Description>
<URL>https://github.com/MrSwitch/hello.js/commit/d6f5137f30de6e0ef7048191ee6ae575fdc2f669</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-7776" CVSS="6.4">
<Description>This affects the package phpoffice/phpspreadsheet from 0.0.0. The library is vulnerable to XSS when creating an html output from an excel file by adding a comment on any cell. The root cause of this issue is within the HTML writer where user comments are concatenated as part of link and this is returned as HTML. A fix for this issue is available on commit 0ed5b800be2136bcb8fa9c1bdf59abc957a98845/master branch.</Description>
<URL>https://github.com/PHPOffice/PhpSpreadsheet/commit/0ed5b800be2136bcb8fa9c1bdf59abc957a98845</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2020-9038" CVSS="5.4">
<Description>Joplin through 1.0.184 allows Arbitrary File Read via XSS.</Description>
<URL>https://github.com/laurent22/joplin/commit/3db47b575b9cb0a765da3d283baa2c065df0d0bc</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-21258" CVSS="5.4">
<Description>GLPI is an open-source asset and IT management software package that provides ITIL Service Desk features, licenses tracking and software auditing. In GLPI from version 9.5.0 and before version 9.5.4, there is a cross-site scripting injection vulnerability when using ajax/kanban.php. This is fixed in version 9.5.4.</Description>
<URL>https://github.com/glpi-project/glpi/commit/e7802fc051696de1f76108ea8dc3bd4e2c880f15</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-21365" CVSS="5.4">
<Description>Bootstrap Package is a theme for TYPO3. It has been discovered that rendering content in the website frontend is vulnerable to cross-site scripting. A valid backend user account is needed to exploit this vulnerability. Users of the extension, who have overwritten the affected templates with custom code must manually apply the security fix. Update to version 7.1.2, 8.0.8, 9.1.4, 10.0.10 or 11.0.3 of the Bootstrap Package that fix the problem described. Updated version are available from the TYPO3 extension manager, Packagist and at https://extensions.typo3.org/extension/download/bootstrap_package/.</Description>
<URL>https://github.com/benjaminkott/bootstrap_package/commit/de3a568fc311d6712d9339643e51e8627c80530b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-21383" CVSS="5.4">
<Description>Wiki.js an open-source wiki app built on Node.js. Wiki.js before version 2.5.191 is vulnerable to stored cross-site scripting through mustache expressions in code blocks. This vulnerability exists due to mustache expressions being parsed by Vue during content injection even though it is contained within a `<pre>` element. By creating a crafted wiki page, a malicious Wiki.js user may stage a stored cross-site scripting attack. This allows the attacker to execute malicious JavaScript when the page is viewed by other users. For an example see referenced GitHub Security Advisory. Commit 5ffa189383dd716f12b56b8cae2ba0d075996cf1 fixes this vulnerability by adding the v-pre directive to all `<pre>` tags during the render.</Description>
<URL>https://github.com/Requarks/wiki/commit/5ffa189383dd716f12b56b8cae2ba0d075996cf1</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-22540" CVSS="6.1">
<Description>Bad validation logic in the Dart SDK versions prior to 2.12.3 allow an attacker to use an XSS attack via DOM clobbering. The validation logic in dart:html for creating DOM nodes from text did not sanitize properly when it came across template tags.</Description>
<URL>https://github.com/dart-lang/sdk/commit/ce5a1c2392debce967415d4c09359ff2555e3588</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-22874" CVSS="6.1">
<Description>Revive Adserver before 5.1.1 is vulnerable to a reflected XSS vulnerability in userlog-index.php via the `period_preset` parameter.</Description>
<URL>https://github.com/revive-adserver/revive-adserver/commit/e2a67ce8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-22875" CVSS="6.1">
<Description>Revive Adserver before 5.1.1 is vulnerable to a reflected XSS vulnerability in stats.php via the `setPerPage` parameter.</Description>
<URL>https://github.com/revive-adserver/revive-adserver/commit/6f46076a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-22888" CVSS="6.1">
<Description>Revive Adserver before v5.2.0 is vulnerable to a reflected XSS vulnerability in the `status` parameter of campaign-zone-zones.php. An attacker could trick a user with access to the user interface of a Revive Adserver instance into clicking on a specifically crafted URL and execute injected JavaScript code.</Description>
<URL>https://github.com/revive-adserver/revive-adserver/commit/f472d890</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-22889" CVSS="6.1">
<Description>Revive Adserver before v5.2.0 is vulnerable to a reflected XSS vulnerability in the `statsBreakdown` parameter of stats.php (and possibly other scripts) due to single quotes not being escaped. An attacker could trick a user with access to the user interface of a Revive Adserver instance into clicking on a specifically crafted URL and pressing a certain key combination to execute injected JavaScript code.</Description>
<URL>https://github.com/revive-adserver/revive-adserver/commit/2f868414</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-23784" CVSS="6.1">
<Description>This affects the package tempura before 0.4.0. If the input to the esc function is of type object (i.e an array) it is returned without being escaped/sanitized, leading to a potential Cross-Site Scripting vulnerability.</Description>
<URL>https://github.com/lukeed/tempura/commit/58a5c3671e2f36b26810e77ead9e0dd471902f9b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-25324" CVSS="6.1">
<Description>MISP 2.4.136 has Stored XSS in the galaxy cluster view via a cluster name to app/View/GalaxyClusters/view.ctp.</Description>
<URL>https://github.com/MISP/MISP/commit/741243f707cac7de1a3769a38e03004f037f4a3d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-25325" CVSS="6.1">
<Description>MISP 2.4.136 has XSS via galaxy cluster element values to app/View/GalaxyElements/ajax/index.ctp. Reference types could contain javascript: URLs.</Description>
<URL>https://github.com/MISP/MISP/commit/829c3199ba3afdecb52e0719509f3df4463be5b4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-25917" CVSS="4.8">
<Description>In OpenEMR, versions 5.0.2 to 6.0.0 are vulnerable to Stored Cross-Site-Scripting (XSS) due to user input not being validated properly and rendered in the U2F USB Device authentication method page. A highly privileged attacker could inject arbitrary code into input fields when creating a new user.</Description>
<URL>https://github.com/openemr/openemr/commit/0fadc3e592d84bc9dfe9e0403f8bd6e3c7d8427f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-25918" CVSS="4.8">
<Description>In OpenEMR, versions 5.0.2 to 6.0.0 are vulnerable to Stored Cross-Site-Scripting (XSS) due to user input not being validated properly and rendered in the TOTP Authentication method page. A highly privileged attacker could inject arbitrary code into input fields when creating a new user.</Description>
<URL>https://github.com/openemr/openemr/commit/0fadc3e592d84bc9dfe9e0403f8bd6e3c7d8427f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-25919" CVSS="4.8">
<Description>In OpenEMR, versions 5.0.2 to 6.0.0 are vulnerable to Stored Cross-Site-Scripting (XSS) due to user input not being validated properly. A highly privileged attacker could inject arbitrary code into input fields when creating a new user.</Description>
<URL>https://github.com/openemr/openemr/commit/0fadc3e592d84bc9dfe9e0403f8bd6e3c7d8427f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-25921" CVSS="5.4">
<Description>In OpenEMR, versions 2.7.3-rc1 to 6.0.0 are vulnerable to Stored Cross-Site-Scripting (XSS) due to user input not being validated properly in the `Allergies` section. An attacker could lure an admin to enter a malicious payload and by that initiate the exploit.</Description>
<URL>https://github.com/openemr/openemr/commit/0fadc3e592d84bc9dfe9e0403f8bd6e3c7d8427f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-25922" CVSS="6.1">
<Description>In OpenEMR, versions 4.2.0 to 6.0.0 are vulnerable to Reflected Cross-Site-Scripting (XSS) due to user input not being validated properly. An attacker could trick a user to click on a malicious url and execute malicious code.</Description>
<URL>https://github.com/openemr/openemr/commit/0fadc3e592d84bc9dfe9e0403f8bd6e3c7d8427f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-25926" CVSS="6.1">
<Description>In SiCKRAGE, versions 9.3.54.dev1 to 10.0.11.dev1 are vulnerable to Reflected Cross-Site-Scripting (XSS) due to user input not being validated properly in the `quicksearch` feature. Therefore, an attacker can steal a user's sessionID to masquerade as a victim user, to carry out any actions in the context of the user.</Description>
<URL>https://github.com/SiCKRAGE/SiCKRAGE/commit/9f42426727e16609ad3d1337f6637588b8ed28e4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-25929" CVSS="4.8">
<Description>In OpenNMS Horizon, versions opennms-1-0-stable through opennms-27.1.0-1; OpenNMS Meridian, versions meridian-foundation-2015.1.0-1 through meridian-foundation-2019.1.18-1; meridian-foundation-2020.1.0-1 through meridian-foundation-2020.1.6-1 are vulnerable to Stored Cross-Site Scripting since there is no validation on the input being sent to the `name` parameter in `noticeWizard` endpoint. Due to this flaw an authenticated attacker could inject arbitrary script and trick other admin users into downloading malicious files.</Description>
<URL>https://github.com/OpenNMS/opennms/commit/66c1f626bf38a7d1a9530b4d68598269ee5245a2</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-25932" CVSS="5.4">
<Description>In OpenNMS Horizon, versions opennms-1-0-stable through opennms-27.1.0-1; OpenNMS Meridian, versions meridian-foundation-2015.1.0-1 through meridian-foundation-2019.1.18-1; meridian-foundation-2020.1.0-1 through meridian-foundation-2020.1.6-1 are vulnerable to Stored Cross-Site Scripting, since the function `validateFormInput()` performs improper validation checks on the input sent to the `userID` parameter. Due to this flaw an attacker could inject an arbitrary script which will be stored in the database.</Description>
<URL>https://github.com/OpenNMS/opennms/commit/8a97e6869d6e49da18b208c837438ace80049c01</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-25933" CVSS="4.8">
<Description>In OpenNMS Horizon, versions opennms-1-0-stable through opennms-27.1.0-1; OpenNMS Meridian, versions meridian-foundation-2015.1.0-1 through meridian-foundation-2019.1.18-1; meridian-foundation-2020.1.0-1 through meridian-foundation-2020.1.6-1 are vulnerable to Stored Cross-Site Scripting, since the function `validateFormInput()` performs improper validation checks on the input sent to the `groupName` and `groupComment` parameters. Due to this flaw, an authenticated attacker could inject arbitrary script and trick other admin users into downloading malicious files which can cause severe damage to the organization using opennms.</Description>
<URL>https://github.com/OpenNMS/opennms/commit/8a97e6869d6e49da18b208c837438ace80049c01%2C</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-25934" CVSS="5.4">
<Description>In OpenNMS Horizon, versions opennms-18.0.0-1 through opennms-27.1.0-1; OpenNMS Meridian, versions meridian-foundation-2015.1.0-1 through meridian-foundation-2019.1.18-1; meridian-foundation-2020.1.0-1 through meridian-foundation-2020.1.7-1 are vulnerable to Stored Cross-Site Scripting, since the function `createRequisitionedNode()` does not perform any validation checks on the input sent to the `node-label` parameter. Due to this flaw an attacker could inject an arbitrary script which will be stored in the database.</Description>
<URL>https://github.com/OpenNMS/opennms/commit/101e3aa06ec9a1f8f266335fc6f5685c062c6117</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-25935" CVSS="5.4">
<Description>In OpenNMS Horizon, versions opennms-17.0.0-1 through opennms-27.1.0-1; OpenNMS Meridian, versions meridian-foundation-2015.1.0-1 through meridian-foundation-2019.1.18-1; meridian-foundation-2020.1.0-1 through meridian-foundation-2020.1.7-1 are vulnerable to Stored Cross-Site Scripting, since the function `add()` performs improper validation checks on the input sent to the `foreign-source` parameter. Due to this flaw an attacker could bypass the existing regex validation and inject an arbitrary script which will be stored in the database.</Description>
<URL>https://github.com/OpenNMS/opennms/commit/101e3aa06ec9a1f8f266335fc6f5685c062c6117</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-25955" CVSS="9.0">
<Description>In “Dolibarr ERP CRM”, WYSIWYG Editor module, v2.8.1 to v13.0.2 are affected by a stored XSS vulnerability that allows low privileged application users to store malicious scripts in the “Private Note” field at “/adherents/note.php?id=1” endpoint. These scripts are executed in a victim’s browser when they open the page containing the vulnerable field. In the worst case, the victim who inadvertently triggers the attack is a highly privileged administrator. The injected scripts can extract the Session ID, which can lead to full Account takeover of the admin and due to other vulnerability (Improper Access Control on Private notes) a low privileged user can update the private notes which could lead to privilege escalation.</Description>
<URL>https://github.com/Dolibarr/dolibarr/commit/796b2d201acb9938b903fb2afa297db289ecc93e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-25964" CVSS="5.4">
<Description>In “Calibre-web” application, v0.6.0 to v0.6.12, are vulnerable to Stored XSS in “Metadata”. An attacker that has access to edit the metadata information, can inject JavaScript payload in the description field. When a victim tries to open the file, XSS will be triggered.</Description>
<URL>https://github.com/janeczku/calibre-web/commit/32e27712f0f71fdec646add20cd78b4ce75acfce</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-25968" CVSS="5.4">
<Description>In “OpenCMS”, versions 10.5.0 to 11.0.2 are affected by a stored XSS vulnerability that allows low privileged application users to store malicious scripts in the Sitemap functionality. These scripts are executed in a victim’s browser when they open the page containing the vulnerable field.</Description>
<URL>https://github.com/alkacon/mercury-template/commit/800945f5d02346c633c7aef9f5d596d7dedc8fb5</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-25969" CVSS="6.1">
<Description>In Camaleon CMS application, versions 0.0.1 to 2.6.0 are vulnerable to stored XSS, that allows an unauthenticated attacker to store malicious scripts in the comments section of the post. These scripts are executed in a victim’s browser when they open the page containing the malicious comment.</Description>
<URL>https://github.com/owen2345/camaleon-cms/commit/05506e9087bb05282c0bae6ccfe0283d0332ab3c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-25975" CVSS="5.4">
<Description>In publify, versions v8.0 to v9.2.4 are vulnerable to stored XSS as a result of an unrestricted file upload. This issue allows a user with “publisher” role to inject malicious JavaScript via the uploaded html file.</Description>
<URL>https://github.com/publify/publify/commit/d99c0870d3dbbfde7febdc6cad33199b84770101</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-25977" CVSS="5.4">
<Description>In PiranhaCMS, versions 7.0.0 to 9.1.1 are vulnerable to stored XSS due to the page title improperly sanitized. By creating a page with a specially crafted page title, a low privileged user can trigger arbitrary JavaScript execution.</Description>
<URL>https://github.com/PiranhaCMS/piranha.core/commit/543bc53c7dbd28c793ec960b57fb0e716c6b18d7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-25978" CVSS="5.4">
<Description>Apostrophe CMS versions between 2.63.0 to 3.3.1 are vulnerable to Stored XSS where an editor uploads an SVG file that contains malicious JavaScript onto the Images module, which triggers XSS once viewed.</Description>
<URL>https://github.com/apostrophecms/apostrophe/commit/c8b94ee9c79468f1ce28e31966cb0e0839165e59</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-25987" CVSS="4.6">
<Description>Hexo versions 0.0.1 to 5.4.0 are vulnerable against stored XSS. The post “body” and “tags” don’t sanitize malicious javascript during web page generation. Local unprivileged attacker can inject arbitrary code.</Description>
<URL>https://github.com/hexojs/hexo/commit/5170df2d3fa9c69e855c4b7c2b084ebfd92d5200</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-25988" CVSS="5.4">
<Description>In “ifme”, versions 1.0.0 to v7.31.4 are vulnerable against stored XSS vulnerability (notifications section) which can be directly triggered by sending an ally request to the admin.</Description>
<URL>https://github.com/ifmeorg/ifme/commit/720a47015e46ad387b3219fed7ebfb14ec3c854c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-25989" CVSS="5.4">
<Description>In “ifme”, versions 1.0.0 to v7.31.4 are vulnerable against stored XSS vulnerability in the markdown editor. It can be exploited by making a victim a Leader of a group which triggers the payload for them.</Description>
<URL>https://github.com/ifmeorg/ifme/commit/df4986f0721a72779403d21d36c025fe95edffad</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-25990" CVSS="5.4">
<Description>In “ifme”, versions v7.22.0 to v7.31.4 are vulnerable against self-stored XSS in the contacts field as it allows loading XSS payloads fetched via an iframe.</Description>
<URL>https://github.com/ifmeorg/ifme/commit/83fd44ef8921a8dcf394a012e44901ab08596bdc</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-25993" CVSS="5.4">
<Description>In Requarks wiki.js, versions 2.0.0-beta.147 to 2.5.255 are affected by Stored XSS vulnerability, where a low privileged (editor) user can upload a SVG file that contains malicious JavaScript while uploading assets in the page. That will send the JWT tokens to the attacker’s server and will lead to account takeover when accessed by the victim.</Description>
<URL>https://github.com/Requarks/wiki/commit/5d3e81496fba1f0fbd64eeb855f30f69a9040718</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-26544" CVSS="5.4">
<Description>Livy server version 0.7.0-incubating (only) is vulnerable to a cross site scripting issue in the session name. A malicious user could use this flaw to access logs and results of other users' sessions and run jobs with their privileges. This issue is fixed in Livy 0.7.1-incubating.</Description>
<URL>https://github.com/apache/incubator-livy/commit/4d8a912699683b973eee76d4e91447d769a0cb0d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-26746" CVSS="6.1">
<Description>Chamilo 1.11.14 allows XSS via a main/calendar/agenda_list.php?type= URI.</Description>
<URL>https://github.com/chamilo/chamilo-lms/commit/d939402d83bf68af5377b629883d8e5437d843ec</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-26925" CVSS="5.4">
<Description>Roundcube before 1.4.11 allows XSS via crafted Cascading Style Sheets (CSS) token sequences during HTML email rendering.</Description>
<URL>https://github.com/roundcube/roundcubemail/commit/9dc276d5f26042db02754fa1bac6fbd683c6d596</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-27279" CVSS="5.4">
<Description>MyBB before 1.8.25 allows stored XSS via nested [email] tags with MyCode (aka BBCode).</Description>
<URL>https://github.com/mybb/mybb/commit/cb781b49116bf5c4d8deca3e17498122b701677a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-27340" CVSS="6.1">
<Description>OpenSIS Community Edition version <= 7.6 is affected by a reflected XSS vulnerability in EmailCheck.php via the "opt" parameter.</Description>
<URL>https://github.com/OS4ED/openSIS-Classic/commit/f78407d5291c686c3f416073dcb9143f3a3d5489#diff-24b751f2072f058259d033016938101f9fa29884ebcc09ce7eb88def3421e5ba</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-27902" CVSS="6.1">
<Description>An issue was discovered in Craft CMS before 3.6.0. In some circumstances, a potential XSS vulnerability existed in connection with front-end forms that accepted user uploads.</Description>
<URL>https://github.com/craftcms/cms/commit/8ee85a8f03c143fa2420e7d6f311d95cae3b19ce</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-28957" CVSS="6.1">
<Description>An XSS vulnerability was discovered in python-lxml's clean module versions before 4.6.3. When disabling the safe_attrs_only and forms arguments, the Cleaner class does not remove the formaction attribute allowing for JS to bypass the sanitizer. A remote attacker could exploit this flaw to run arbitrary JS code on users who interact with incorrectly sanitized HTML. This issue is patched in lxml 4.6.3.</Description>
<URL>https://github.com/lxml/lxml/commit/a5f9cb52079dc57477c460dbe6ba0f775e14a999</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-29503" CVSS="6.1">
<Description>HedgeDoc is a platform to write and share markdown. HedgeDoc before version 1.8.2 is vulnerable to a cross-site scripting attack using the YAML-metadata of a note. An attacker with write access to a note can embed HTML tags in the Open Graph metadata section of the note, resulting in the frontend rendering the script tag as part of the `<head>` section. Unless your instance prevents guests from editing notes, this vulnerability allows unauthenticated attackers to inject JavaScript into notes that allow guest edits. If your instance prevents guests from editing notes, this vulnerability allows authenticated attackers to inject JavaScript into any note pages they have write-access to. This vulnerability is patched in version 1.8.2. As a workaround, one can disable guest edits until the next update.</Description>
<URL>https://github.com/hedgedoc/hedgedoc/commit/01dad5821ee28377ebe640c6c72c3e0bb0d51ea7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="80">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-30150" CVSS="6.1">
<Description>Composr 10.0.36 allows XSS in an XML script.</Description>
<URL>https://gitlab.com/composr-foundation/composr/commit/833a06466</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-31712" CVSS="5.4">
<Description>react-draft-wysiwyg (aka React Draft Wysiwyg) before 1.14.6 allows a javascript: URi in a Link Target of the link decorator in decorators/Link/index.js when a draft is shared across users, leading to XSS.</Description>
<URL>https://github.com/jpuri/react-draft-wysiwyg/commit/d2faeb612b53f10dff048de7dc57e1f4044b5380</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3184" CVSS="6.1">
<Description>MISP 2.4.136 has XSS via a crafted URL to the app/View/Elements/global_menu.ctp user homepage favourite button.</Description>
<URL>https://github.com/MISP/MISP/commit/8283e0fbec551f45f3f181cdb2cf29cddc23df66</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-32470" CVSS="6.1">
<Description>Craft CMS before 3.6.13 has an XSS vulnerability.</Description>
<URL>https://github.com/craftcms/cms/commit/f9378aa154b5f9b64bed3d59cce0c4a8184bf5e6</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-32616" CVSS="6.1">
<Description>1CDN is open-source file sharing software. In 1CDN before commit f88a2730fa50fc2c2aeab09011f6f142fd90ec25, there is a basic cross-site scripting vulnerability that allows an attacker to inject /<script>//code</script> and execute JavaScript code on the client side.</Description>
<URL>https://github.com/onedotprojects/cdn/commit/f88a2730fa50fc2c2aeab09011f6f142fd90ec25</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-32641" CVSS="6.1">
<Description>auth0-lock is Auth0's signin solution. Versions of nauth0-lock before and including `11.30.0` are vulnerable to reflected XSS. An attacker can execute arbitrary code when the library's `flashMessage` feature is utilized and user input or data from URL parameters is incorporated into the `flashMessage` or the library's `languageDictionary` feature is utilized and user input or data from URL parameters is incorporated into the `languageDictionary`. The vulnerability is patched in version 11.30.1.</Description>
<URL>https://github.com/auth0/lock/commit/d139cf01c8234b07caf265e051f39d3eab08f7ed</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-32664" CVSS="4.8">
<Description>Combodo iTop is an open source web based IT Service Management tool. In affected versions there is a XSS vulnerability on "run query" page when logged as administrator. This has been resolved in versions 2.6.5 and 2.7.5.</Description>
<URL>https://github.com/Combodo/iTop/commit/4f5c987d8b1bd12814dc606ea69b6cfb88490704</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-32683" CVSS="6.1">
<Description>wire-webapp is the web version of Wire, an open-source messenger. A cross-site scripting vulnerability exists in wire-webapp prior to version 2021-06-01-production.0. If a user is instructed to open an image in a new tab (right click -> open in new tab, or copy the URL and paste it in the URL bar), an the image payload is executed on the domain hosting the app (app.wire.com). In particular, if an image contains malicious code in addition to the actual picture, this code is executed on app.wire.com. This allows the attacker to fully control the user account. The vulnerability was patched in version 2021-06-01-production.0. As a workaround, users should not try to open image URLs.</Description>
<URL>https://github.com/wireapp/wire-webapp/commit/056e39d327bb10c1b0958dfbea0c39752692a1b0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-32696" CVSS="5.3">
<Description>The npm package "striptags" is an implementation of PHP's strip_tags in Typescript. In striptags before version 3.2.0, a type-confusion vulnerability can cause `striptags` to concatenate unsanitized strings when an array-like object is passed in as the `html` parameter. This can be abused by an attacker who can control the shape of their input, e.g. if query parameters are passed directly into the function. This can lead to a XSS.</Description>
<URL>https://github.com/ericnorris/striptags/commit/f252a6b0819499cd65403707ebaf5cc925f2faca</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="843">
<MainWeakness Cause="Casted Pointer" Operation="Read" Consequence="Type Confusion">
<OtherWeakness Cause="Wrong Object Type Resolved" Operation="Coerce" Consequence="Wrong Type"/>
</MainWeakness>
<MainWeakness Cause="Casted Pointer" Operation="Dereference" Consequence="Type Confusion">
<OtherWeakness Cause="Wrong Object Type Resolved" Operation="Coerce" Consequence="Wrong Type"/>
</MainWeakness>
<MainWeakness Cause="Casted Pointer" Operation="Write" Consequence="Type Confusion">
<OtherWeakness Cause="Wrong Object Type Resolved" Operation="Coerce" Consequence="Wrong Type"/>
</MainWeakness>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-32702" CVSS="6.1">
<Description>The Auth0 Next.js SDK is a library for implementing user authentication in Next.js applications. Versions before and including `1.4.1` are vulnerable to reflected XSS. An attacker can execute arbitrary code by providing an XSS payload in the `error` query parameter which is then processed by the callback handler as an error message. You are affected by this vulnerability if you are using `@auth0/nextjs-auth0` version `1.4.1` or lower **unless** you are using custom error handling that does not return the error message in an HTML response. Upgrade to version `1.4.1` to resolve. The fix adds basic HTML escaping to the error message and it should not impact your users.</Description>
<URL>https://github.com/auth0/nextjs-auth0/commit/6996e2528ceed98627caa28abafbc09e90163ccf</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-32713" CVSS="4.8">
<Description>Shopware is an open source eCommerce platform. Versions prior to 5.6.10 suffer from an authenticated stored XSS in administration vulnerability. Users are recommend to update to the version 5.6.10. You can get the update to 5.6.10 regularly via the Auto-Updater or directly via the download overview.</Description>
<URL>https://github.com/shopware/shopware/commit/a0850ffbc6f581a8eb8425cc2bf77a0715e21e12</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-32792" CVSS="6.1">
<Description>mod_auth_openidc is an authentication/authorization module for the Apache 2.x HTTP server that functions as an OpenID Connect Relying Party, authenticating users against an OpenID Connect Provider. In mod_auth_openidc before version 2.4.9, there is an XSS vulnerability in when using `OIDCPreservePost On`.</Description>
<URL>https://github.com/zmartzone/mod_auth_openidc/commit/00c315cb0c8ab77c67be4a2ac08a71a83ac58751</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-32798" CVSS="9.6">
<Description>The Jupyter notebook is a web-based notebook environment for interactive computing. In affected versions untrusted notebook can execute code on load. Jupyter Notebook uses a deprecated version of Google Caja to sanitize user inputs. A public Caja bypass can be used to trigger an XSS when a victim opens a malicious ipynb document in Jupyter Notebook. The XSS allows an attacker to execute arbitrary code on the victim computer using Jupyter APIs.</Description>
<URL>https://github.com/jupyter/notebook/commit/79fc76e890a8ec42f73a3d009e44ef84c14ef0d5</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-32812" CVSS="6.1">
<Description>Monkshu is an enterprise application server for mobile apps (iOS and Android), responsive HTML 5 apps, and JSON API services. In version 2.90 and earlier, there is a reflected cross-site scripting vulnerability in frontend HTTP server. The attacker can send in a carefully crafted URL along with a known bug in the server which will cause a 500 error, and the response will then embed the URL provided by the hacker. The impact is moderate as the hacker must also be able to craft an HTTP request which should cause a 500 server error. None such requests are known as this point. The issue is patched in version 2.95. As a workaround, one may use a disk caching plugin.</Description>
<URL>https://github.com/TekMonksGitHub/monkshu/commit/4601a9bfdc934d7ac32619ce621652fad0cf452b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="116">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Command Injection"/>
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Parameter Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Parameter Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Command Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-32850" CVSS="6.1">
<Description>jQuery MiniColors is a color picker built on jQuery. Prior to version 2.3.6, jQuery MiniColors is prone to cross-site scripting when handling untrusted color names. This issue is patched in version 2.3.6.</Description>
<URL>https://github.com/claviska/jquery-minicolors/commit/ef134824a7f4110ada53ea6c173111a4fa2f48f3</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-32851" CVSS="6.1">
<Description>Mind-elixir is a free, open source mind map core. Prior to version 0.18.1, mind-elixir is prone to cross-site scripting when handling untrusted menus. This issue is patched in version 0.18.1</Description>
<URL>https://github.com/ssshooter/mind-elixir-core/commit/073485269ac83af24371f35bd08507defa885655</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-33040" CVSS="6.1">
<Description>managers/views/iframe.js in FuturePress EPub.js before 0.3.89 allows XSS.</Description>
<URL>https://github.com/futurepress/epub.js/commit/ab4dd46408cce0324e1c67de4a3ba96b59e5012e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-33496" CVSS="6.1">
<Description>Dutchcoders transfer.sh before 1.2.4 allows XSS via an inline view.</Description>
<URL>https://github.com/dutchcoders/transfer.sh/commit/9df18fdc69de2e71f30d8c1e6bfab2fda2e52eb4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3509" CVSS="6.1">
<Description>A flaw was found in Red Hat Ceph Storage 4, in the Dashboard component. In response to CVE-2020-27839, the JWT token was moved from localStorage to an httpOnly cookie. However, token cookies are used in the body of the HTTP response for the documentation, which again makes it available to XSS.The greatest threat to the system is for confidentiality, integrity, and availability.</Description>
<URL>https://github.com/ceph/ceph/commit/7a1ca8d372da3b6a4fc3d221a0e5f72d1d61c27b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-36212" CVSS="6.1">
<Description>app/View/SharingGroups/view.ctp in MISP before 2.4.146 allows stored XSS in the sharing groups view.</Description>
<URL>https://github.com/MISP/MISP/commit/01521d614cb578de75a406394b4f0426f6036ba7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3646" CVSS="6.1">
<Description>btcpayserver is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/btcpayserver/btcpayserver/commit/fc4e47cec608cc3dba24b19d0145ac69320b975e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-36755" CVSS="6.1">
<Description>Nightscout Web Monitor (aka cgm-remote-monitor) 14.2.2 allows XSS via a crafted X-Forwarded-For header.</Description>
<URL>https://github.com/nightscout/cgm-remote-monitor/commit/68f3f90e30cc1da57f7e5069f9c4e1467973521f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-37389" CVSS="6.1">
<Description>Chamilo 1.11.14 allows stored XSS via main/install/index.php and main/install/ajax.php through the port parameter.</Description>
<URL>https://github.com/chamilo/chamilo-lms/commit/dfae49f5dc392c00cd43badcb3043db3a646ff0c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-37390" CVSS="6.1">
<Description>A Chamilo LMS 1.11.14 reflected XSS vulnerability exists in main/social/search.php=q URI (social network search feature).</Description>
<URL>https://github.com/chamilo/chamilo-lms/commit/3fcc751d5cc7da311532a8756fba5a8778f50ca0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-37391" CVSS="5.4">
<Description>A user without privileges in Chamilo LMS 1.11.14 can send an invitation message to another user, e.g., the administrator, through main/social/search.php, main/inc/lib/social.lib.php and steal cookies or execute arbitrary code on the administration side via a stored XSS vulnerability via social network the send invitation feature.</Description>
<URL>https://github.com/chamilo/chamilo-lms/commit/de43a77049771cce08ea7234c5c1510b5af65bc8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-37534" CVSS="5.4">
<Description>app/View/GalaxyClusters/add.ctp in MISP 2.4.146 allows Stored XSS when forking a galaxy cluster.</Description>
<URL>https://github.com/MISP/MISP/commit/78edbbca64a1edc4390560cc106d0d418064355d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-37596" CVSS="6.1">
<Description>Telegram Web K Alpha 0.6.1 allows XSS via a document name.</Description>
<URL>https://github.com/morethanwords/tweb/commit/11d2fe01363889f20c8baa2217ed4aad445c5551</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-37633" CVSS="6.1">
<Description>Discourse is an open source discussion platform. In versions prior to 2.7.8 rendering of d-popover tooltips can be susceptible to XSS attacks. This vulnerability only affects sites which have modified or disabled Discourse's default Content Security Policy. This issue is patched in the latest `stable` 2.7.8 version of Discourse. As a workaround users may ensure that the Content Security Policy is enabled, and has not been modified in a way which would make it more vulnerable to XSS attacks.</Description>
<URL>https://github.com/discourse/discourse/commit/38199424bc840d2ef002cd1e9bffdbb99191eb47</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3767" CVSS="5.4">
<Description>bookstack is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/bookstackapp/bookstack/commit/040997fdc4414776bcac06a3cbaac3b26b5e8a64</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3768" CVSS="5.4">
<Description>bookstack is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/bookstackapp/bookstack/commit/5e6092aaf8fd420202016038286554860bf8ea64</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-37700" CVSS="6.1">
<Description>@github/paste-markdown is an npm package for pasting markdown objects. A self Cross-Site Scripting vulnerability exists in the @github/paste-markdown before version 0.3.4. If the clipboard data contains the string `<table>`, a **div** is dynamically created, and the clipboard content is copied into its **innerHTML** property without any sanitization, resulting in improper execution of JavaScript in the browser of the victim (the user who pasted the code). Users directed to copy text from a malicious website and paste it into pages that utilize this library are affected. This is fixed in version 0.3.4. Refer the to the referenced GitHub Advisory for more details including an example exploit.</Description>
<URL>https://github.com/github/paste-markdown/commit/32b7ea3f29ae8f256f9d19768387be42678ddf30</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-37710" CVSS="5.4">
<Description>Shopware is an open source eCommerce platform. Versions prior to 6.4.3.1 contain a Cross-Site Scripting vulnerability via SVG media files. Version 6.4.3.1 contains a patch. As workarounds for older versions of 6.1, 6.2, and 6.3, corresponding security measures are also available via a plugin.</Description>
<URL>https://github.com/shopware/platform/commit/abe9f69e1f667800f974acccd3047b4930e4b423</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-37742" CVSS="5.4">
<Description>app/View/Elements/GalaxyClusters/view_relation_tree.ctp in MISP 2.4.147 allows Stored XSS when viewing galaxy cluster relationships.</Description>
<URL>https://github.com/MISP/MISP/commit/af50add82433eb2a740c3621b99d9d14d2b1e192</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-37743" CVSS="5.4">
<Description>app/View/GalaxyElements/ajax/index.ctp in MISP 2.4.147 allows Stored XSS when viewing galaxy cluster elements in JSON format.</Description>
<URL>https://github.com/MISP/MISP/commit/f318f7c0ddac7dfd2b1f246fd8f488d9dfc3a4bf</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3780" CVSS="6.1">
<Description>peertube is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/chocobozzz/peertube/commit/0ea2f79d45b301fcd660efc894469a99b2239bf6</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3783" CVSS="6.1">
<Description>yourls is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/yourls/yourls/commit/94f6bab91182142c96ff11f481585b445449efd4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3785" CVSS="5.4">
<Description>yourls is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/yourls/yourls/commit/1d8e224ebabb8a4c75b97f026950ed710faab0ff</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-37916" CVSS="6.1">
<Description>Joplin before 2.0.9 allows XSS via button and form in the note body.</Description>
<URL>https://github.com/laurent22/joplin/commit/feaecf765368f2c273bea3a9fa641ff0da7e6b26</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3811" CVSS="6.1">
<Description>adminlte is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/pi-hole/adminlte/commit/f526716de7bb0fd382a64bcbbb33915c926f94bb</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3812" CVSS="6.1">
<Description>adminlte is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/pi-hole/adminlte/commit/f526716de7bb0fd382a64bcbbb33915c926f94bb</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3830" CVSS="5.4">
<Description>btcpayserver is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/btcpayserver/btcpayserver/commit/fc4e47cec608cc3dba24b19d0145ac69320b975e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3831" CVSS="6.1">
<Description>gnuboard5 is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/gnuboard/gnuboard5/commit/2e81619ea87bc9c0b4a073d8df3c7693a6fdbf0d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3853" CVSS="6.1">
<Description>chaskiq is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/chaskiq/chaskiq/commit/51768b21632dac89fd0dedb2b3b6d91bac732345</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3857" CVSS="5.4">
<Description>chaskiq is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/chaskiq/chaskiq/commit/bffa585862b11cc05229ab3ed621d68f70ed33d0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3862" CVSS="4.8">
<Description>icecoder is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/icecoder/icecoder/commit/51cf24b2a39138e6a7b5739ef59eb38cd7c39763</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3863" CVSS="6.1">
<Description>snipe-it is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/snipe/snipe-it/commit/fc5efd857f61f7e45c61db567bb66612bcb53128</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3879" CVSS="5.4">
<Description>snipe-it is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/snipe/snipe-it/commit/bda23bb1e66fd7ce42c75c69cf5eea4e80865c1c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3904" CVSS="5.4">
<Description>grav is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/getgrav/grav/commit/afc69a3229bb6fe120b2c1ea27bc6f196ed7284d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-39136" CVSS="5.4">
<Description>baserCMS is an open source content management system with a focus on Japanese language support. In affected versions there is a cross-site scripting vulnerability in the file upload function of the management system of baserCMS. Users are advised to update as soon as possible. No workaround are available to mitigate this issue.</Description>
<URL>https://github.com/baserproject/basercms/commit/568d4cab5ba1cdee7bbf0133c676d02a98f6d7bc</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-39186" CVSS="6.1">
<Description>GlobalNewFiles is a MediaWiki extension maintained by Miraheze. Prior to commit number cee254e1b158cdb0ddbea716b1d3edc31fa4fb5d, the username column of the GlobalNewFiles special page is vulnerable to a stored XSS. Commit number cee254e1b158cdb0ddbea716b1d3edc31fa4fb5d contains a patch. As a workaround, one may disallow <,> (or other characters required to insert html/js) from being used in account names so an XSS is not possible.</Description>
<URL>https://github.com/miraheze/GlobalNewFiles/commit/cee254e1b158cdb0ddbea716b1d3edc31fa4fb5d</URL>
<CWE ID="20">
<MainWeakness Cause="Erroneous Code" Operation="Verify" Consequence="Incosnistent Value"/>
<MainWeakness Cause="Erroneous Code" Operation="Validate" Consequence="Invalid Data"/>
<MainWeakness Cause="Erroneous Code" Operation="Verify" Consequence="Wrong Value"/>
<MainWeakness Cause="Missing Code" Operation="Validate" Consequence="Invalid Data"/>
<MainWeakness Cause="Missing Code" Operation="Verify" Consequence="Wrong Type"/>
<MainWeakness Cause="Missing Code" Operation="Verify" Consequence="Wrong Value"/>
<MainWeakness Cause="Missing Code" Operation="Verify" Consequence="Incosnistent Value"/>
<MainWeakness Cause="Erroneous Code" Operation="Verify" Consequence="Wrong Type"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-39199" CVSS="6.1">
<Description>remark-html is an open source nodejs library which compiles Markdown to HTML. In affected versions the documentation of remark-html has mentioned that it was safe by default. In practice the default was never safe and had to be opted into. That is, user input was not sanitized. This means arbitrary HTML can be passed through leading to potential XSS attacks. The problem has been patched in 13.0.2 and 14.0.1: `remark-html` is now safe by default, and the implementation matches the documentation. On older affected versions, pass `sanitize: true` if you cannot update.</Description>
<URL>https://github.com/remarkjs/remark-html/commit/b75c9dde582ad87ba498e369c033dc8a350478c1</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3920" CVSS="5.4">
<Description>grav-plugin-admin is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/getgrav/grav-plugin-admin/commit/6463135bf046d8131189c163158cd5db8f7a9675</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-39286" CVSS="6.1">
<Description>Webrecorder pywb before 2.6.0 allows XSS because it does not ensure that Jinja2 templates are autoescaped.</Description>
<URL>https://github.com/webrecorder/pywb/commit/f7bd84cdacdd665ff73ae8d09a202f60be2ebae9</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3938" CVSS="5.4">
<Description>snipe-it is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/snipe/snipe-it/commit/9ed1442bd124710f4178992cc4eca5236c7396b9</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3945" CVSS="6.1">
<Description>django-helpdesk is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/django-helpdesk/django-helpdesk/commit/2c7065e0c4296e0c692fb4a7ee19c7357583af30</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3950" CVSS="5.4">
<Description>django-helpdesk is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/django-helpdesk/django-helpdesk/commit/04483bdac3b5196737516398b5ce0383875a5c60</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3961" CVSS="5.4">
<Description>snipe-it is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/snipe/snipe-it/commit/7ce5993f5ae9d713a0955c2fd8e2dff7a7ce886e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3977" CVSS="5.4">
<Description>invoiceninja is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/invoiceninja/invoiceninja/commit/1186eaa82375692d01d5ef3369c5b7bc7315b55f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3983" CVSS="6.1">
<Description>kimai2 is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/kevinpapst/kimai2/commit/89bfa82c61da0d3639e4038e689e25467baac8a0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3985" CVSS="9.0">
<Description>kimai2 is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/kevinpapst/kimai2/commit/76e09447c85e762882126b49626a4fe4d93fe8b5</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-3994" CVSS="9.6">
<Description>django-helpdesk is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/django-helpdesk/django-helpdesk/commit/a22eb0673fe0b7784f99c6b5fd343b64a6700f06</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4018" CVSS="5.4">
<Description>snipe-it is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/snipe/snipe-it/commit/ff81e6d5366c2cfb15618793ad919ae4cbb3ac57</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4020" CVSS="5.4">
<Description>janus-gateway is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/meetecho/janus-gateway/commit/d3fc00ec803d6c41d8f98908732f44e7f4911a1c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4050" CVSS="6.1">
<Description>livehelperchat is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/livehelperchat/livehelperchat/commit/0ce1dd2a13509747c240c8484228a5df8d6e03ec</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4072" CVSS="5.4">
<Description>elgg is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/elgg/elgg/commit/c30b17bf75256ed3fcc84e2083147cc3951423d0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4081" CVSS="6.1">
<Description>pimcore is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/pimcore/pimcore/commit/34ed0e050ff679b4b38414aef48ea1ff956f907a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4084" CVSS="6.1">
<Description>pimcore is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/pimcore/pimcore/commit/3c2a14e676a57e5d77a16255965988eef48f9065</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4107" CVSS="6.1">
<Description>yetiforcecrm is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/yetiforcecompany/yetiforcecrm/commit/a062d3d5fecb000db207a2ad8a446db97ad96b89</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4108" CVSS="6.1">
<Description>snipe-it is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/snipe/snipe-it/commit/9d5d1a9f9aae2c8baee48551185da5de0cdb62c2</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-41132" CVSS="6.1">
<Description>OMERO.web provides a web based client and plugin infrastructure. In versions prior to 5.11.0, a variety of templates do not perform proper sanitization through HTML escaping. Due to the lack of sanitization and use of ``jQuery.html()``, there are a whole host of cross-site scripting possibilities with specially crafted input to a variety of fields. This issue is patched in version 5.11.0. There are no known workarounds aside from upgrading.</Description>
<URL>https://github.com/ome/omero-web/commit/0168067accde5e635341b3c714b1d53ae92ba424</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="116">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Command Injection"/>
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Parameter Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Parameter Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Command Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-41142" CVSS="5.4">
<Description>Tuleap Open ALM is a libre and open source tool for end to end traceability of application and system developments. There is a cross-site scripting vulnerability in Tuleap Community Edition prior to 12.11.99.25 and Tuleap Enterprise Edition 12.11-2. A malicious user with the capability to add and remove attachment to an artifact could force a victim to execute uncontrolled code. Tuleap Community Edition 11.17.99.146 and Tuleap Enterprise Edition 12.11-2 contain a fix for the issue.</Description>
<URL>https://github.com/Enalean/tuleap/commit/d6c837ed6fa66d319175954a42f93d4d86745208</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4116" CVSS="5.4">
<Description>yetiforcecrm is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/yetiforcecompany/yetiforcecrm/commit/9cdb012ca64ff1f719f8120d5fd162cd5ef1013f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-41162" CVSS="6.1">
<Description>Combodo iTop is a web based IT Service Management tool. In 3.0.0 beta releases prior to beta6 the `ajax.render.php?operation=wizard_helper` page did not properly escape the user supplied parameters, allowing for a cross site scripting attack vector. Users are advised to upgrade. There are no known workarounds for this issue.</Description>
<URL>https://github.com/Combodo/iTop/commit/83125d9ae16cfb2527b9d0ab0805a68b863244a0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-41169" CVSS="4.8">
<Description>Sulu is an open-source PHP content management system based on the Symfony framework. In versions before 1.6.43 are subject to stored cross site scripting attacks. HTML input into Tag names is not properly sanitized. Only admin users are allowed to create tags. Users are advised to upgrade.</Description>
<URL>https://github.com/sulu/sulu/commit/20007ac70a3af3c9e53a6acb0ef8794b65642445</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-41175" CVSS="5.4">
<Description>Pi-hole's Web interface (based on AdminLTE) provides a central location to manage one's Pi-hole and review the statistics generated by FTLDNS. Prior to version 5.8, cross-site scripting is possible when adding a client via the groups-clients management page. This issue was patched in version 5.8.</Description>
<URL>https://github.com/pi-hole/AdminLTE/commit/01191c7a1b8d5032991ed9d88e0db8d3dbec744d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-41188" CVSS="5.4">
<Description>Shopware is open source e-commerce software. Versions prior to 5.7.6 contain a cross-site scripting vulnerability. This issue is patched in version 5.7.6. Two workarounds are available. Using the security plugin or adding a particular following config to the `.htaccess` file will protect against cross-site scripting in this case. There is also a config for those using nginx as a server. The plugin and the configs can be found on the GitHub Security Advisory page for this vulnerability.</Description>
<URL>https://github.com/shopware/shopware/commit/37213e91d525c95df262712cba80d1497e395a58</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4121" CVSS="6.1">
<Description>yetiforcecrm is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/yetiforcecompany/yetiforcecrm/commit/6b5967198e43b6fbb3b2715b49c6cd5b12ce08c3</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-41236" CVSS="4.8">
<Description>OroPlatform is a PHP Business Application Platform. In affected versions the email template preview is vulnerable to XSS payload added to email template content. An attacker must have permission to create or edit an email template. For successful payload, execution the attacked user must preview a vulnerable email template. There are no workarounds that address this vulnerability. Users are advised to upgrade as soon as is possible.</Description>
<URL>https://github.com/oroinc/platform/commit/2a089c971fc70bc63baf8770d29ee515ce5a415a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4124" CVSS="6.1">
<Description>janus-gateway is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/meetecho/janus-gateway/commit/f62bba6513ec840761f2434b93168106c7c65a3d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-41261" CVSS="4.8">
<Description>Galette is a membership management web application built for non profit organizations and released under GPLv3. Versions prior to 0.9.6 are subject to stored cross site scripting attacks via the preferences footer. The preference footer can only be altered by a site admin. This issue has been resolved in the 0.9.6 release and all users are advised to upgrade. There are no known workarounds.</Description>
<URL>https://github.com/galette/galette/commit/0d55bc7f420470e0dbca91ebe7899c592905cbc5</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4132" CVSS="5.4">
<Description>livehelperchat is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/livehelperchat/livehelperchat/commit/55b1e3bf62c564db7c919f5293ec1e755c2958d6</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4139" CVSS="9.0">
<Description>pimcore is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/pimcore/pimcore/commit/d5c3e876d910784000335061c3bd24d301351245</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4169" CVSS="6.1">
<Description>livehelperchat is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/livehelperchat/livehelperchat/commit/8f6ddadffcd683c16fbbe622acf374eea1e39c74</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4170" CVSS="5.4">
<Description>calibre-web is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/janeczku/calibre-web/commit/7ad419dc8c12180e842a82118f4866ac3d074bc5</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4175" CVSS="5.4">
<Description>livehelperchat is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/livehelperchat/livehelperchat/commit/162892013eb07b21461ceffe6702140acc0fef57</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4176" CVSS="6.1">
<Description>livehelperchat is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/livehelperchat/livehelperchat/commit/1f67cf9f251289a5094774307c2c3d638f9f0ba6</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4179" CVSS="5.4">
<Description>livehelperchat is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/livehelperchat/livehelperchat/commit/c3881fb528af349bf47f9ccbf83c994087faa3e6</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-42112" CVSS="6.1">
<Description>The "File upload question" functionality in LimeSurvey 3.x-LTS through 3.27.18 allows XSS in assets/scripts/modaldialog.js and assets/scripts/uploader.js.</Description>
<URL>https://github.com/LimeSurvey/LimeSurvey/commit/d56619a50cfd191bbffd0adb660638a5e438070d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-42134" CVSS="6.1">
<Description>The Unicorn framework before 0.36.1 for Django allows XSS via a component. NOTE: this issue exists because of an incomplete fix for CVE-2021-42053.</Description>
<URL>https://github.com/adamghill/django-unicorn/commit/3a832a9e3f6455ddd3b87f646247269918ad10c6</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4231" CVSS="5.4">
<Description>A vulnerability was found in Angular up to 11.0.4/11.1.0-next.2. It has been classified as problematic. Affected is the handling of comments. The manipulation leads to cross site scripting. It is possible to launch the attack remotely but it might require an authentication first. Upgrading to version 11.0.5 and 11.1.0-next.3 is able to address this issue. The name of the patch is ba8da742e3b243e8f43d4c63aa842b44e14f2b09. It is recommended to upgrade the affected component.</Description>
<URL>https://github.com/angular/angular/commit/ba8da742e3b243e8f43d4c63aa842b44e14f2b09</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4244" CVSS="6.1">
<Description>A vulnerability classified as problematic has been found in yikes-inc-easy-mailchimp-extender Plugin up to 6.8.5. This affects an unknown part of the file admin/partials/ajax/add_field_to_form.php. The manipulation of the argument field_name/merge_tag/field_type/list_id leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 6.8.6 is able to address this issue. The name of the patch is 3662c6593aa1bb4286781214891d26de2e947695. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-215307.</Description>
<URL>https://github.com/EvanHerman/yikes-inc-easy-mailchimp-extender/commit/3662c6593aa1bb4286781214891d26de2e947695</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4256" CVSS="6.1">
<Description>A vulnerability was found in ctrlo lenio. It has been classified as problematic. This affects an unknown part of the file views/index.tt. The manipulation of the argument task.name/task.site.org.name leads to cross site scripting. It is possible to initiate the attack remotely. The name of the patch is e1646d5cd0a2fbab9eb505196dd2ca1c9e4cdd97. It is recommended to apply a patch to fix this issue. The identifier VDB-216213 was assigned to this vulnerability.</Description>
<URL>https://github.com/ctrlo/lenio/commit/e1646d5cd0a2fbab9eb505196dd2ca1c9e4cdd97</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4257" CVSS="6.1">
<Description>A vulnerability was found in ctrlo lenio. It has been declared as problematic. This vulnerability affects unknown code of the file views/task.tt of the component Task Handler. The manipulation of the argument site.org.name/check.name/task.tasktype.name/task.name leads to cross site scripting. The attack can be initiated remotely. The name of the patch is 698c5fa465169d6f23c6a41ca4b1fc9a7869013a. It is recommended to apply a patch to fix this issue. VDB-216214 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/ctrlo/lenio/commit/698c5fa465169d6f23c6a41ca4b1fc9a7869013a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4263" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in leanote 2.6.1. This issue affects the function define of the file public/js/plugins/history.js. The manipulation of the argument content leads to cross site scripting. The attack may be initiated remotely. The identifier of the patch is 0f9733c890077942150696dcc6d2b1482b7a0a19. It is recommended to apply a patch to fix this issue. The identifier VDB-216461 was assigned to this vulnerability.</Description>
<URL>https://github.com/leanote/leanote/commit/0f9733c890077942150696dcc6d2b1482b7a0a19</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4265" CVSS="6.1">
<Description>A vulnerability was found in siwapp-ror. It has been rated as problematic. This issue affects some unknown processing. The manipulation leads to cross site scripting. The attack may be initiated remotely. The name of the patch is 924d16008cfcc09356c87db01848e45290cb58ca. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-216467.</Description>
<URL>https://github.com/siwapp/siwapp-ror/commit/924d16008cfcc09356c87db01848e45290cb58ca</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4266" CVSS="6.1">
<Description>A vulnerability classified as problematic has been found in Webdetails cpf up to 9.5.0.0-80. Affected is an unknown function of the file core/src/main/java/pt/webdetails/cpf/packager/DependenciesPackage.java. The manipulation of the argument baseUrl leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 9.5.0.0-81 is able to address this issue. The name of the patch is 3bff900d228e8cae3af256b447c5d15bdb03c174. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-216468.</Description>
<URL>https://github.com/webdetails/cpf/commit/3bff900d228e8cae3af256b447c5d15bdb03c174</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4267" CVSS="6.1">
<Description>A vulnerability classified as problematic was found in tad_discuss. Affected by this vulnerability is an unknown functionality. The manipulation of the argument DiscussTitle leads to cross site scripting. The attack can be launched remotely. The name of the patch is af94d034ff8db642d05fd8788179eab05f433958. It is recommended to apply a patch to fix this issue. The identifier VDB-216469 was assigned to this vulnerability.</Description>
<URL>https://github.com/tad0616/tad_discuss/commit/af94d034ff8db642d05fd8788179eab05f433958</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4269" CVSS="6.1">
<Description>A vulnerability has been found in SimpleRisk and classified as problematic. This vulnerability affects the function checkAndSetValidation of the file simplerisk/js/common.js. The manipulation of the argument title leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 20220306-001 is able to address this issue. The name of the patch is 591405b4ed160fbefc1dca1e55c5745079a7bb48. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-216472.</Description>
<URL>https://github.com/simplerisk/code/commit/591405b4ed160fbefc1dca1e55c5745079a7bb48</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4270" CVSS="6.1">
<Description>A vulnerability was found in Imprint CMS. It has been classified as problematic. Affected is the function SearchForm of the file ImprintCMS/Models/ViewHelpers.cs. The manipulation of the argument query leads to cross site scripting. It is possible to launch the attack remotely. The name of the patch is 6140b140ccd02b5e4e7d6ba013ac1225724487f4. It is recommended to apply a patch to fix this issue. VDB-216474 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/peders/Imprint-CMS/commit/6140b140ccd02b5e4e7d6ba013ac1225724487f4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4271" CVSS="6.1">
<Description>A vulnerability was found in panicsteve w2wiki. It has been rated as problematic. Affected by this issue is the function toHTML of the file index.php of the component Markdown Handler. The manipulation leads to cross site scripting. The attack may be launched remotely. The name of the patch is 8f1d0470b4ddb1c7699e3308e765c11ed29542b6. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-216476.</Description>
<URL>https://github.com/panicsteve/w2wiki/commit/8f1d0470b4ddb1c7699e3308e765c11ed29542b6</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4272" CVSS="6.1">
<Description>A vulnerability classified as problematic has been found in studygolang. This affects an unknown part of the file static/js/topics.js. The manipulation of the argument contentHtml leads to cross site scripting. It is possible to initiate the attack remotely. The name of the patch is 0fb30f9640bd5fa0cae58922eac6c00bb1a94391. It is recommended to apply a patch to fix this issue. The identifier VDB-216477 was assigned to this vulnerability.</Description>
<URL>https://github.com/studygolang/studygolang/commit/0fb30f9640bd5fa0cae58922eac6c00bb1a94391</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4273" CVSS="6.1">
<Description>A vulnerability classified as problematic was found in studygolang. This vulnerability affects the function Search of the file http/controller/search.go. The manipulation of the argument q leads to cross site scripting. The attack can be initiated remotely. The exploit has been disclosed to the public and may be used. The name of the patch is 97ba556d42fa89dfaa7737e9cd3a8ddaf670bb23. It is recommended to apply a patch to fix this issue. VDB-216478 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/studygolang/studygolang/commit/97ba556d42fa89dfaa7737e9cd3a8ddaf670bb23</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4274" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in sileht bird-lg. This issue affects some unknown processing of the file templates/layout.html. The manipulation of the argument request_args leads to cross site scripting. The attack may be initiated remotely. The name of the patch is ef6b32c527478fefe7a4436e10b96ee28ed5b308. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-216479.</Description>
<URL>https://github.com/sileht/bird-lg/commit/ef6b32c527478fefe7a4436e10b96ee28ed5b308</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4282" CVSS="6.1">
<Description>A vulnerability was found in FreePBX voicemail. It has been declared as problematic. Affected by this vulnerability is an unknown functionality of the file page.voicemail.php. The manipulation leads to cross site scripting. The attack can be launched remotely. Upgrading to version 14.0.6.25 is able to address this issue. The name of the patch is 12e1469ef9208eda9d8955206e78345949236ee6. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-216871.</Description>
<URL>https://github.com/FreePBX/voicemail/commit/12e1469ef9208eda9d8955206e78345949236ee6</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4283" CVSS="5.4">
<Description>A vulnerability was found in FreeBPX voicemail. It has been rated as problematic. Affected by this issue is some unknown functionality of the file views/ssettings.php of the component Settings Handler. The manipulation of the argument key leads to cross site scripting. The attack may be launched remotely. Upgrading to version 14.0.6.25 is able to address this issue. The name of the patch is ffce4882016076acd16fe0f676246905aa3cb2f3. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-216872.</Description>
<URL>https://github.com/FreePBX/voicemail/commit/ffce4882016076acd16fe0f676246905aa3cb2f3</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4284" CVSS="6.1">
<Description>A vulnerability classified as problematic has been found in OpenMRS HTML Form Entry UI Framework Integration Module up to 1.x. This affects an unknown part. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 2.0.0 is able to address this issue. The name of the patch is 811990972ea07649ae33c4b56c61c3b520895f07. It is recommended to upgrade the affected component. The identifier VDB-216873 was assigned to this vulnerability.</Description>
<URL>https://github.com/openmrs/openmrs-module-htmlformentryui/commit/811990972ea07649ae33c4b56c61c3b520895f07</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4285" CVSS="6.1">
<Description>A vulnerability classified as problematic was found in Nagios NCPA. This vulnerability affects unknown code of the file agent/listener/templates/tail.html. The manipulation of the argument name leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 2.4.0 is able to address this issue. The name of the patch is 5abbcd7aa26e0fc815e6b2b0ffe1c15ef3e8fab5. It is recommended to upgrade the affected component. VDB-216874 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/NagiosEnterprises/ncpa/commit/5abbcd7aa26e0fc815e6b2b0ffe1c15ef3e8fab5</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4288" CVSS="6.1">
<Description>A vulnerability was found in OpenMRS openmrs-module-referenceapplication up to 2.11.x. It has been rated as problematic. This issue affects some unknown processing of the file omod/src/main/webapp/pages/userApp.gsp. The manipulation leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 2.12.0 is able to address this issue. The name of the patch is 35f81901a4cb925747a9615b8706f5079d2196a1. It is recommended to upgrade the affected component. The identifier VDB-216881 was assigned to this vulnerability.</Description>
<URL>https://github.com/openmrs/openmrs-module-referenceapplication/commit/35f81901a4cb925747a9615b8706f5079d2196a1</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4289" CVSS="6.1">
<Description>A vulnerability classified as problematic was found in OpenMRS openmrs-module-referenceapplication up to 2.11.x. Affected by this vulnerability is the function post of the file omod/src/main/java/org/openmrs/module/referenceapplication/page/controller/UserAppPageController.java of the component User App Page. The manipulation of the argument AppId leads to cross site scripting. The attack can be launched remotely. Upgrading to version 2.12.0 is able to address this issue. The name of the patch is 0410c091d46eed3c132fe0fcafe5964182659f74. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-216883.</Description>
<URL>https://github.com/openmrs/openmrs-module-referenceapplication/commit/0410c091d46eed3c132fe0fcafe5964182659f74</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4291" CVSS="6.1">
<Description>A vulnerability was found in OpenMRS Admin UI Module up to 1.5.x. It has been declared as problematic. This vulnerability affects unknown code of the file omod/src/main/webapp/pages/metadata/locations/location.gsp. The manipulation leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 1.6.0 is able to address this issue. The name of the patch is a7eefb5f69f6c50a3bffcb138bb8ea57cb41a9b6. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-216916.</Description>
<URL>https://github.com/openmrs/openmrs-module-adminui/commit/a7eefb5f69f6c50a3bffcb138bb8ea57cb41a9b6</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4292" CVSS="6.1">
<Description>A vulnerability was found in OpenMRS Admin UI Module up to 1.4.x. It has been rated as problematic. This issue affects some unknown processing of the file omod/src/main/webapp/pages/metadata/privileges/privilege.gsp of the component Manage Privilege Page. The manipulation leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 1.5.0 is able to address this issue. The name of the patch is 4f8565425b7c74128dec9ca46dfbb9a3c1c24911. It is recommended to upgrade the affected component. The identifier VDB-216917 was assigned to this vulnerability.</Description>
<URL>https://github.com/openmrs/openmrs-module-adminui/commit/4f8565425b7c74128dec9ca46dfbb9a3c1c24911</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4293" CVSS="6.1">
<Description>** UNSUPPORTED WHEN ASSIGNED ** A vulnerability classified as problematic has been found in gnuboard youngcart5 up to 5.4.5.1. Affected is an unknown function of the file adm/menu_list_update.php. The manipulation of the argument me_link leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 5.4.5.2 is able to address this issue. The name of the patch is 70daa537adfa47b87af12d85f1e698fff01785ff. It is recommended to upgrade the affected component. VDB-216954 is the identifier assigned to this vulnerability. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.</Description>
<URL>https://github.com/gnuboard/youngcart5/commit/70daa537adfa47b87af12d85f1e698fff01785ff</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4296" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in w3c Unicorn. This issue affects the function ValidatorNuMessage of the file src/org/w3c/unicorn/response/impl/ValidatorNuMessage.java. The manipulation of the argument message leads to cross site scripting. The attack may be initiated remotely. The name of the patch is 51f75c31f7fc33859a9a571311c67ae4e95d9c68. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217019.</Description>
<URL>https://github.com/w3c/Unicorn/commit/51f75c31f7fc33859a9a571311c67ae4e95d9c68</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4302" CVSS="6.1">
<Description>A vulnerability was found in slackero phpwcms up to 1.9.26. It has been classified as problematic. This affects an unknown part of the component SVG File Handler. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 1.9.27 is able to address this issue. The patch is named b39db9c7ad3800f319195ff0e26a0981395b1c54. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-217419.</Description>
<URL>https://github.com/slackero/phpwcms/commit/b39db9c7ad3800f319195ff0e26a0981395b1c54</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4303" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in shannah Xataface up to 2.x. Affected by this issue is the function testftp of the file install/install_form.js.php of the component Installer. The manipulation leads to cross site scripting. The attack may be launched remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. Upgrading to version 3.0.0 is able to address this issue. The patch is identified as 94143a4299e386f33bf582139cd4702571d93bde. It is recommended to upgrade the affected component. VDB-217442 is the identifier assigned to this vulnerability. NOTE: Installer is disabled by default.</Description>
<URL>https://github.com/shannah/xataface/commit/94143a4299e386f33bf582139cd4702571d93bde</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4309" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in 01-Scripts 01ACP. This issue affects some unknown processing. The manipulation of the argument $_SERVER['SCRIPT_NAME'] leads to cross site scripting. The attack may be initiated remotely. The identifier of the patch is a16eb7da46ed22bc61067c212635394f2571d3c4. It is recommended to apply a patch to fix this issue. The identifier VDB-217649 was assigned to this vulnerability.</Description>
<URL>https://github.com/01-Scripts/01ACP/commit/a16eb7da46ed22bc61067c212635394f2571d3c4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4310" CVSS="6.1">
<Description>A vulnerability was found in 01-Scripts 01-Artikelsystem. It has been classified as problematic. Affected is an unknown function of the file 01article.php. The manipulation of the argument $_SERVER['PHP_SELF'] leads to cross site scripting. It is possible to launch the attack remotely. The patch is identified as ae849b347a58c2cb1be38d04bbe56fc883d5d84a. It is recommended to apply a patch to fix this issue. VDB-217662 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/01-Scripts/01-Artikelsystem/commit/ae849b347a58c2cb1be38d04bbe56fc883d5d84a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4312" CVSS="6.1">
<Description>** UNSUPPORTED WHEN ASSIGNED ** A vulnerability classified as problematic has been found in Th3-822 Rapidleech. This affects the function zip_go of the file classes/options/zip.php. The manipulation of the argument archive leads to cross site scripting. It is possible to initiate the attack remotely. The patch is named 885a87ea4ee5e14fa95801eca255604fb2e138c6. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-218295. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.</Description>
<URL>https://github.com/Th3-822/rapidleech/commit/885a87ea4ee5e14fa95801eca255604fb2e138c6</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4325" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in NHN TOAST UI Chart 4.1.4. This issue affects some unknown processing of the component Legend Handler. The manipulation leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 4.2.0 is able to address this issue. The identifier of the patch is 1a3f455d17df379e11b501bb5ba1dd1bcc41d63e. It is recommended to upgrade the affected component. The identifier VDB-221501 was assigned to this vulnerability.</Description>
<URL>https://github.com/nhn/tui.chart/commit/1a3f455d17df379e11b501bb5ba1dd1bcc41d63e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-43324" CVSS="6.1">
<Description>LibreNMS through 21.10.2 allows XSS via a widget title.</Description>
<URL>https://github.com/librenms/librenms/commit/99d2462b80435b91a35236639b909eebee432126</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-43785" CVSS="6.1">
<Description>@joeattardi/emoji-button is a Vanilla JavaScript emoji picker component. In affected versions there are two vectors for XSS attacks: a URL for a custom emoji, and an i18n string. In both of these cases, a value can be crafted such that it can insert a `script` tag into the page and execute malicious code.</Description>
<URL>https://github.com/joeattardi/emoji-button/commit/05970c09180cd27fff493e998ac5bf0468b1bb16</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-43842" CVSS="5.4">
<Description>Wiki.js is a wiki app built on Node.js. Wiki.js versions 2.5.257 and earlier are vulnerable to stored cross-site scripting through a SVG file upload. By creating a crafted SVG file, a malicious Wiki.js user may stage a stored cross-site scripting attack. This allows the attacker to execute malicious JavaScript when the SVG is viewed directly by other users. Scripts do not execute when loaded inside a page via normal `<img>` tags. Commit 5d3e81496fba1f0fbd64eeb855f30f69a9040718 fixes this vulnerability by adding an optional (enabled by default) SVG sanitization step to all file uploads that match the SVG mime type. As a workaround, disable file upload for all non-trusted users. Wiki.js version 2.5.260 is the first production version to contain a patch. Version 2.5.258 is the first development build to contain a patch and is available only as a Docker image as requarks/wiki:canary-2.5.258.</Description>
<URL>https://github.com/Requarks/wiki/commit/5d3e81496fba1f0fbd64eeb855f30f69a9040718</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-43853" CVSS="5.4">
<Description>Ajax.NET Professional (AjaxPro) is an AJAX framework available for Microsoft ASP.NET. Affected versions of this package are vulnerable to JavaScript object injection which may result in cross site scripting when leveraged by a malicious user. The affected core relates to JavaScript object creation when parsing json input. Releases before version 21.12.22.1 are affected. A workaround exists that replaces one of the core JavaScript files embedded in the library. See the GHSA-5q7q-qqw2-hjq7 for workaround details.</Description>
<URL>https://github.com/michaelschwarz/Ajax.NET-Professional/commit/c89e39b9679fcb8ab6644fe21cc7e652cb615e2b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-43855" CVSS="5.4">
<Description>Wiki.js is a wiki app built on node.js. Wiki.js 2.5.263 and earlier is vulnerable to stored cross-site scripting through a SVG file upload made via a custom request with a fake MIME type. By creating a crafted SVG file, a malicious Wiki.js user may stage a stored cross-site scripting attack. This allows the attacker to execute malicious JavaScript when the SVG is viewed directly by other users. Scripts do not execute when loaded inside a page via normal `<img>` tags. The malicious SVG can only be uploaded by crafting a custom request to the server with a fake MIME type. A patch in version 2.5.264 fixes this vulnerability by adding an additional file extension verification check to the optional (enabled by default) SVG sanitization step to all file uploads that match the SVG mime type. As a workaround, disable file upload for all non-trusted users.</Description>
<URL>https://github.com/Requarks/wiki/commit/57b56d3a5b9c00358814e76f3ee5b4bb353ad62f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-43856" CVSS="5.4">
<Description>Wiki.js is a wiki app built on Node.js. Wiki.js 2.5.263 and earlier is vulnerable to stored cross-site scripting through non-image file uploads for file types that can be viewed directly inline in the browser. By creating a malicious file which can execute inline JS when viewed in the browser (e.g. XML files), a malicious Wiki.js user may stage a stored cross-site scripting attack. This allows the attacker to execute malicious JavaScript when the file is viewed directly by other users. The file must be opened directly by the user and will not trigger directly in a normal Wiki.js page. A patch in version 2.5.264 fixes this vulnerability by adding an optional (enabled by default) force download flag to all non-image file types, preventing the file from being viewed inline in the browser. As a workaround, disable file upload for all non-trusted users. --- Thanks to @Haxatron for reporting this vulnerability. Initially reported via https://huntr.dev/bounties/266bff09-00d9-43ca-a4bb-bb540642811f/</Description>
<URL>https://github.com/Requarks/wiki/commit/79bdd4409316adf649806de3e22352297f85cee0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-44025" CVSS="6.1">
<Description>Roundcube before 1.3.17 and 1.4.x before 1.4.12 is prone to XSS in handling an attachment's filename extension when displaying a MIME type warning message.</Description>
<URL>https://github.com/roundcube/roundcubemail/commit/7d7b1dfeff795390b69905ceb63d6391b5b0dfe7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-4431" CVSS="6.1">
<Description>A vulnerability classified as problematic has been found in msyk FMDataAPI up to 22. Affected is an unknown function of the file FMDataAPI_Sample.php. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 23 is able to address this issue. The patch is identified as 3bd1709a8f7b1720529bf5dfc9855ad609f436cf. It is recommended to upgrade the affected component. VDB-244494 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/msyk/FMDataAPI/commit/3bd1709a8f7b1720529bf5dfc9855ad609f436cf</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-44662" CVSS="6.1">
<Description>A Site Scripting (XSS) vulnerability exists in the Xerte Project Xerte through 3.8.4 via the link parameter in print.php.</Description>
<URL>https://github.com/thexerteproject/xerteonlinetoolkits/commit/694a591b5ab7f634f036afaac10397cf3677a98c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-44896" CVSS="6.1">
<Description>DMP Roadmap before 3.0.4 allows XSS.</Description>
<URL>https://github.com/DMPRoadmap/roadmap/commit/0b83ad31ac01a709633080b134cfb6debc310c5e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-46144" CVSS="6.1">
<Description>Roundcube before 1.4.13 and 1.5.x before 1.5.2 allows XSS via an HTML e-mail message with crafted Cascading Style Sheets (CSS) token sequences.</Description>
<URL>https://github.com/roundcube/roundcubemail/commit/8894fddd59b770399eed4ef8d4da5773913b5bf0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-46426" CVSS="6.1">
<Description>phpIPAM 1.4.4 allows Reflected XSS and CSRF via app/admin/subnets/find_free_section_subnets.php of the subnets functionality.</Description>
<URL>https://github.com/phpipam/phpipam/commit/6c1f72816d6ac634e9c174057e008717d959f351</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-46871" CVSS="6.1">
<Description>tag.ex in Phoenix Phoenix.HTML (aka phoenix_html) before 3.0.4 allows XSS in HEEx class attributes.</Description>
<URL>https://github.com/phoenixframework/phoenix_html/commit/62a0139fb716bcdce697f6221244bd81d321d620</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-46872" CVSS="6.1">
<Description>An issue was discovered in Nim before 1.6.2. The RST module of the Nim language stdlib, as used in NimForum and other products, permits the javascript: URI scheme and thus can lead to XSS in some applications. (Nim versions 1.6.2 and later are fixed; there may be backports of the fix to some earlier versions. NimForum 2.2.0 is fixed.)</Description>
<URL>https://github.com/nim-lang/Nim/commit/46275126b89218e64844eee169e8ced05dd0e2d7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2021-46875" CVSS="6.1">
<Description>An issue was discovered in eZ Platform Ibexa Kernel before 1.3.1.1. An XSS attack can occur because JavaScript code can be uploaded in a .html or .js file.</Description>
<URL>https://github.com/ezsystems/ezpublish-kernel/commit/29fecd2afe86f763510f10c02f14962d028f311b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0087" CVSS="6.1">
<Description>keystone is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/keystonejs/keystone/commit/96bf833a23b1a0a5d365cf394467a943cc481b38</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0121" CVSS="8.0">
<Description> Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') vulnerability in hoppscotch hoppscotch/hoppscotch.This issue affects hoppscotch/hoppscotch before 2.1.1. </Description>
<URL>https://github.com/hoppscotch/hoppscotch/commit/86ef1a4e143ea5bb0c7b309574127cc39d4faa74</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0157" CVSS="5.4">
<Description>phoronix-test-suite is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/phoronix-test-suite/phoronix-test-suite/commit/56fd0a3b69fb33c1c90a6017ed735889aaa59486</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0159" CVSS="5.4">
<Description>orchardcore is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/orchardcms/orchardcore/commit/4da927d39a49138527c30db09c962ff706f95202</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0253" CVSS="5.4">
<Description>livehelperchat is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/livehelperchat/livehelperchat/commit/407d0b1a1fa56fa6f824a19092774f10f4880437</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0256" CVSS="5.4">
<Description>pimcore is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/pimcore/pimcore/commit/dff1cb0c466abcd55f1268934de3ed937b7436a7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0257" CVSS="5.4">
<Description>pimcore is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
<URL>https://github.com/pimcore/pimcore/commit/dfaf78b26fb77990267c0cc05b9fcb9f8de7b66d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0282" CVSS="7.5">
<Description> Cross-site Scripting in Packagist microweber/microweber prior to 1.2.11. </Description>
<URL>https://github.com/microweber/microweber/commit/51b5a4e3ef01e587797c0109159a8ad9d2bac77a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0402" CVSS="6.1">
<Description>The Super Forms - Drag & Drop Form Builder WordPress plugin before 6.0.4 does not escape the bob_czy_panstwa_sprawa_zostala_rozwiazana parameter before outputting it back in an attribute via the super_language_switcher AJAX action, leading to a Reflected Cross-Site Scripting. The action is also lacking CSRF, making the attack easier to perform against any user.</Description>
<URL>https://github.com/RensTillmann/super-forms/commit/c19d65abbe43d9b6359c1bf3498dc697d0c19d02</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0565" CVSS="6.4">
<Description> Cross-site Scripting in Packagist pimcore/pimcore prior to 10.3.1. </Description>
<URL>https://github.com/pimcore/pimcore/commit/7697f709a501860144352696e583a2533a6e1245</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0906" CVSS="4.8">
<Description>Unrestricted file upload leads to stored XSS in GitHub repository microweber/microweber prior to 1.1.12.</Description>
<URL>https://github.com/microweber/microweber/commit/d9bae9df873c2d2a13a2eb08d512019d49ebca68</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0926" CVSS="4.8">
<Description>File upload filter bypass leading to stored XSS in GitHub repository microweber/microweber prior to 1.2.12.</Description>
<URL>https://github.com/microweber/microweber/commit/89200cfcc2cfefe5554721e7fa3cf52f6a2a9120</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0929" CVSS="6.1">
<Description>XSS on dynamic_text module in GitHub repository microweber/microweber prior to 1.2.11.</Description>
<URL>https://github.com/microweber/microweber/commit/de6d17b52d261902653fbdd2ecefcaac82e54256</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0930" CVSS="4.8">
<Description>File upload filter bypass leading to stored XSS in GitHub repository microweber/microweber prior to 1.2.12.</Description>
<URL>https://github.com/microweber/microweber/commit/33eb4cc0f80c1f86388c1862a8aee1061fa5d72e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0937" CVSS="5.4">
<Description>Stored xss in showdoc through file upload in GitHub repository star7th/showdoc prior to 2.10.4.</Description>
<URL>https://github.com/star7th/showdoc/commit/42c0d9813df3035728b36116a6ce9116e6fa8ed3</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0938" CVSS="5.4">
<Description>Stored XSS via file upload in GitHub repository star7th/showdoc prior to v2.10.4.</Description>
<URL>https://github.com/star7th/showdoc/commit/830c89a4c2c5fd0dd491422bf8e97b4eb5713f55</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0940" CVSS="5.4">
<Description>Stored XSS due to Unrestricted File Upload in GitHub repository star7th/showdoc prior to v2.10.4.</Description>
<URL>https://github.com/star7th/showdoc/commit/78522520892d4e29cc94148c6ec84a204a607b73</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0941" CVSS="5.4">
<Description>Stored XSS due to Unrestricted File Upload in GitHub repository star7th/showdoc prior to v2.10.4.</Description>
<URL>https://github.com/star7th/showdoc/commit/4b6e6603c714aab1de346c5f5cb0bbb4c871be1f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0942" CVSS="5.4">
<Description>Stored XSS due to Unrestricted File Upload in GitHub repository star7th/showdoc prior to 2.10.4.</Description>
<URL>https://github.com/star7th/showdoc/commit/3caa32334db0c277b84e993eaca2036f5d1dbef8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0945" CVSS="5.4">
<Description>Stored XSS viva axd and cshtml file upload in star7th/showdoc in GitHub repository star7th/showdoc prior to v2.10.4.</Description>
<URL>https://github.com/star7th/showdoc/commit/ba45d19e1d77a7eea866dab30eff5da552694891</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0946" CVSS="5.4">
<Description>Stored XSS viva cshtm file upload in GitHub repository star7th/showdoc prior to v2.10.4.</Description>
<URL>https://github.com/star7th/showdoc/commit/e5d575928b1371a7e07b09b6592822298335062a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0951" CVSS="6.1">
<Description>File Upload Restriction Bypass leading to Stored XSS Vulnerability in GitHub repository star7th/showdoc prior to 2.10.4.</Description>
<URL>https://github.com/star7th/showdoc/commit/237ac6d43bf3728bf3587c486a23b4a48ea7acb3</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0956" CVSS="5.4">
<Description>Stored XSS via File Upload in GitHub repository star7th/showdoc prior to v.2.10.4.</Description>
<URL>https://github.com/star7th/showdoc/commit/56e450c3adf75c707500d7231a78c9fc894c7f13</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0957" CVSS="5.4">
<Description>Stored XSS via File Upload in GitHub repository star7th/showdoc prior to 2.10.4.</Description>
<URL>https://github.com/star7th/showdoc/commit/d1c9ed0d77ea5d56f09be0c492361dca8af745bb</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0960" CVSS="5.4">
<Description>Stored XSS viva .properties file upload in GitHub repository star7th/showdoc prior to 2.10.4.</Description>
<URL>https://github.com/star7th/showdoc/commit/92bc6a83a3a60e01a0d2effb98ab47d8d7eab28f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0962" CVSS="5.4">
<Description>Stored XSS viva .webma file upload in GitHub repository star7th/showdoc prior to 2.10.4.</Description>
<URL>https://github.com/star7th/showdoc/commit/3caa32334db0c277b84e993eaca2036f5d1dbef8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0963" CVSS="5.4">
<Description>Unrestricted XML Files Leads to Stored XSS in GitHub repository microweber/microweber prior to 1.2.12.</Description>
<URL>https://github.com/microweber/microweber/commit/975fc1d6d3fba598ee550849ceb81af23ce72e08</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0964" CVSS="5.4">
<Description>Stored XSS viva .webmv file upload in GitHub repository star7th/showdoc prior to 2.10.4.</Description>
<URL>https://github.com/star7th/showdoc/commit/3caa32334db0c277b84e993eaca2036f5d1dbef8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0965" CVSS="5.4">
<Description>Stored XSS viva .ofd file upload in GitHub repository star7th/showdoc prior to 2.10.4.</Description>
<URL>https://github.com/star7th/showdoc/commit/3caa32334db0c277b84e993eaca2036f5d1dbef8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0966" CVSS="5.4">
<Description>Stored XSS via File Upload in star7th/showdoc in GitHub repository star7th/showdoc prior to 2.4.10.</Description>
<URL>https://github.com/star7th/showdoc/commit/3caa32334db0c277b84e993eaca2036f5d1dbef8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-0967" CVSS="5.4">
<Description>Stored XSS via File Upload in star7th/showdoc in star7th/showdoc in GitHub repository star7th/showdoc prior to 2.10.4.</Description>
<URL>https://github.com/star7th/showdoc/commit/3caa32334db0c277b84e993eaca2036f5d1dbef8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1173" CVSS="5.4">
<Description>stored xss in GitHub repository getgrav/grav prior to 1.7.33.</Description>
<URL>https://github.com/getgrav/grav/commit/1c0ed43afa5dc14169e6aa693b38e1a2f7aecad9</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1178" CVSS="5.4">
<Description>Stored Cross Site Scripting in GitHub repository openemr/openemr prior to 6.0.0.4.</Description>
<URL>https://github.com/openemr/openemr/commit/347ad614507183035d188ba14427bc162419778c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1179" CVSS="5.4">
<Description>Non-Privilege User Can Created New Rule and Lead to Stored Cross Site Scripting in GitHub repository openemr/openemr prior to 6.0.0.4.</Description>
<URL>https://github.com/openemr/openemr/commit/347ad614507183035d188ba14427bc162419778c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1180" CVSS="3.5">
<Description>Reflected Cross Site Scripting in GitHub repository openemr/openemr prior to 6.0.0.4.</Description>
<URL>https://github.com/openemr/openemr/commit/347ad614507183035d188ba14427bc162419778c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1181" CVSS="5.4">
<Description>Stored Cross Site Scripting in GitHub repository openemr/openemr prior to 6.0.0.2.</Description>
<URL>https://github.com/openemr/openemr/commit/2835cc397610fc28037302dad948c38fda032022</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1187" CVSS="6.1">
<Description>The WordPress WP YouTube Live Plugin is vulnerable to Reflected Cross-Site Scripting via POST data found in the ~/inc/admin.php file which allows unauthenticated attackers to inject arbitrary web scripts in versions up to, and including, 1.7.21.</Description>
<URL>https://github.com/macbookandrew/wp-youtube-live/commit/2d8ccb7b12742bf16b5a6068f9fdeeac69bc11b1</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1231" CVSS="6.1">
<Description>XSS via Embedded SVG in SVG Diagram Format in GitHub repository plantuml/plantuml prior to 1.2022.4. Stored XSS in the context of the diagram embedder. Depending on the actual context, this ranges from stealing secrets to account hijacking or even to code execution for example in desktop applications. Web based applications are the ones most affected. Since the SVG format allows clickable links in diagrams, it is commonly used in plugins for web based projects (like the Confluence plugin, etc. see https://plantuml.com/de/running).</Description>
<URL>https://github.com/plantuml/plantuml/commit/c9137be051ce98b3e3e27f65f54ec7d9f8886903</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1234" CVSS="6.1">
<Description>XSS in livehelperchat in GitHub repository livehelperchat/livehelperchat prior to 3.97. This vulnerability has the potential to deface websites, result in compromised user accounts, and can run malicious code on web pages, which can lead to a compromise of the user’s device.</Description>
<URL>https://github.com/livehelperchat/livehelperchat/commit/a09aa0d793818dc4cae78ac4bcfb557d4fd2a30d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1243" CVSS="6.1">
<Description>CRHTLF can lead to invalid protocol extraction potentially leading to XSS in GitHub repository medialize/uri.js prior to 1.19.11.</Description>
<URL>https://github.com/medialize/uri.js/commit/b0c9796aa1a95a85f40924fb18b1e5da3dc8ffae</URL>
<CWE ID="20">
<MainWeakness Cause="Erroneous Code" Operation="Verify" Consequence="Incosnistent Value"/>
<MainWeakness Cause="Erroneous Code" Operation="Validate" Consequence="Invalid Data"/>
<MainWeakness Cause="Erroneous Code" Operation="Verify" Consequence="Wrong Value"/>
<MainWeakness Cause="Missing Code" Operation="Validate" Consequence="Invalid Data"/>
<MainWeakness Cause="Missing Code" Operation="Verify" Consequence="Wrong Type"/>
<MainWeakness Cause="Missing Code" Operation="Verify" Consequence="Wrong Value"/>
<MainWeakness Cause="Missing Code" Operation="Verify" Consequence="Incosnistent Value"/>
<MainWeakness Cause="Erroneous Code" Operation="Verify" Consequence="Wrong Type"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1290" CVSS="5.4">
<Description>Stored XSS in "Name", "Group Name" & "Title" in GitHub repository polonel/trudesk prior to v1.2.0. This allows attackers to execute malicious scripts in the user's browser and it can lead to session hijacking, sensitive data exposure, and worse.</Description>
<URL>https://github.com/polonel/trudesk/commit/4f48b3bb86ba66a0085803591065bb6437e864ec</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
<Failure>Information Exposure (IEX)</Failure>
</CVE>
<CVE ID="CVE-2022-1291" CVSS="5.4">
<Description>XSS vulnerability with default `onCellHtmlData` function in GitHub repository hhurz/tableexport.jquery.plugin prior to 1.25.0. Transmitting cookies to third-party servers. Sending data from secure sessions to third-party servers</Description>
<URL>https://github.com/hhurz/tableexport.jquery.plugin/commit/dcbaee23cf98328397a153e71556f75202988ec9</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1330" CVSS="5.4">
<Description>stored xss due to unsantized anchor url in GitHub repository alvarotrigo/fullpage.js prior to 4.0.4. stored xss .</Description>
<URL>https://github.com/alvarotrigo/fullpage.js/commit/e7a5db42711700c8a584e61b5e532a64039fe92b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1344" CVSS="9.0">
<Description>Stored XSS due to no sanitization in the filename in GitHub repository causefx/organizr prior to 2.1.1810. This allows attackers to execute malicious scripts in the user's browser and it can lead to session hijacking, sensitive data exposure, and worse.</Description>
<URL>https://github.com/causefx/organizr/commit/a09d834d995599756b62016af7026d2408ecf43a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
<Failure>Information Exposure (IEX)</Failure>
</CVE>
<CVE ID="CVE-2022-1346" CVSS="9.0">
<Description>Multiple Stored XSS in GitHub repository causefx/organizr prior to 2.1.1810. This allows attackers to execute malicious scripts in the user's browser and it can lead to session hijacking, sensitive data exposure, and worse.</Description>
<URL>https://github.com/causefx/organizr/commit/a09d834d995599756b62016af7026d2408ecf43a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
<Failure>Information Exposure (IEX)</Failure>
</CVE>
<CVE ID="CVE-2022-1347" CVSS="8.4">
<Description>Stored XSS in the "Username" & "Email" input fields leads to account takeover of Admin & Co-admin users in GitHub repository causefx/organizr prior to 2.1.1810. Account takeover and privilege escalation</Description>
<URL>https://github.com/causefx/organizr/commit/a09d834d995599756b62016af7026d2408ecf43a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1351" CVSS="5.4">
<Description>Stored XSS in Tooltip in GitHub repository pimcore/pimcore prior to 10.4.</Description>
<URL>https://github.com/pimcore/pimcore/commit/8c39a8b8f14dce078b31f61c4da599ca6f8fc7ac</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1380" CVSS="5.4">
<Description>Stored Cross Site Scripting vulnerability in Item name parameter in GitHub repository snipe/snipe-it prior to v5.4.3. The vulnerability is capable of stolen the user Cookie.</Description>
<URL>https://github.com/snipe/snipe-it/commit/f211c11034baf4281aa62e7b5e0347248d995ee9</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1439" CVSS="6.1">
<Description>Reflected XSS on demo.microweber.org/demo/module/ in GitHub repository microweber/microweber prior to 1.2.15. Execute Arbitrary JavaScript as the attacked user. It's the only payload I found working, you might need to press "tab" but there is probably a paylaod that runs without user interaction.</Description>
<URL>https://github.com/microweber/microweber/commit/ad3928f67b2cd4443f4323d858b666d35a919ba8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1445" CVSS="5.4">
<Description>Stored Cross Site Scripting vulnerability in the checked_out_to parameter in GitHub repository snipe/snipe-it prior to 5.4.3. The vulnerability is capable of stolen the user Cookie.</Description>
<URL>https://github.com/snipe/snipe-it/commit/f623d05d0c3487ae24c4f13907e4709484e5bf41</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1458" CVSS="5.4">
<Description>Stored XSS Leads To Session Hijacking in GitHub repository openemr/openemr prior to 6.1.0.1.</Description>
<URL>https://github.com/openemr/openemr/commit/31f08005e53b17d1bc921d23f7ee774930ad416d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1464" CVSS="5.4">
<Description>Stored xss bug in GitHub repository gogs/gogs prior to 0.12.7. As the repo is public , any user can view the report and when open the attachment then xss is executed. This bug allow executed any javascript code in victim account .</Description>
<URL>https://github.com/gogs/gogs/commit/bc77440b301ac8780698be91dff1ac33b7cee850</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1504" CVSS="6.1">
<Description>XSS in /demo/module/?module=HERE in GitHub repository microweber/microweber prior to 1.2.15. Typical impact of XSS attacks.</Description>
<URL>https://github.com/microweber/microweber/commit/1f6a4de416a85e626dc643bb5ceb916e4802223e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1555" CVSS="6.1">
<Description>DOM XSS in microweber ver 1.2.15 in GitHub repository microweber/microweber prior to 1.2.16. inject arbitrary js code, deface website, steal cookie...</Description>
<URL>https://github.com/microweber/microweber/commit/724e2d186a33c0c27273107dc4f160a09384877f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1571" CVSS="6.1">
<Description>Cross-site scripting - Reflected in Create Subaccount in GitHub repository neorazorx/facturascripts prior to 2022.07. This vulnerability can be arbitrarily executed javascript code to steal user'cookie, perform HTTP request, get content of `same origin` page, etc ...</Description>
<URL>https://github.com/neorazorx/facturascripts/commit/482c5a82b4d79e7a19614f5a67dc24593046cefd</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1575" CVSS="9.6">
<Description>Arbitrary Code Execution through Sanitizer Bypass in GitHub repository jgraph/drawio prior to 18.0.0. - Arbitrary (remote) code execution in the desktop app. - Stored XSS in the web app.</Description>
<URL>https://github.com/jgraph/drawio/commit/f768ed73875d5eca20110b9c1d72f2789cd1bab7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="94">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1584" CVSS="6.1">
<Description>Reflected XSS in GitHub repository microweber/microweber prior to 1.2.16. Executing JavaScript as the victim</Description>
<URL>https://github.com/microweber/microweber/commit/527abd148e6b7aff8df92a9f1aa951e5bebac59c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1682" CVSS="6.1">
<Description>Reflected Xss using url based payload in GitHub repository neorazorx/facturascripts prior to 2022.07. Xss can use to steal user's cookies which lead to Account takeover or do any malicious activity in victim's browser</Description>
<URL>https://github.com/neorazorx/facturascripts/commit/8e31d8434014a6d1e8791a489d84268fd74b0c9a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1719" CVSS="5.4">
<Description>Reflected XSS on ticket filter function in GitHub repository polonel/trudesk prior to 1.2.2. This vulnerability is capable of executing a malicious javascript code in web page</Description>
<URL>https://github.com/polonel/trudesk/commit/36a542abbbb74828338ce402d65653ac58db42e0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-1726" CVSS="5.4">
<Description>Bootstrap Tables XSS vulnerability with Table Export plug-in when exportOptions: htmlContent is true in GitHub repository wenzhixin/bootstrap-table prior to 1.20.2. Disclosing session cookies, disclosing secure session data, exfiltrating data to third-parties.</Description>
<URL>https://github.com/wenzhixin/bootstrap-table/commit/b4a1e5dd332be652e0bc376fd9256886cf4bbde9</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-21648" CVSS="6.1">
<Description>Latte is an open source template engine for PHP. Versions since 2.8.0 Latte has included a template sandbox and in affected versions it has been found that a sandbox escape exists allowing for injection into web pages generated from Latte. This may lead to XSS attacks. The issue is fixed in the versions 2.8.8, 2.9.6 and 2.10.8. Users unable to upgrade should not accept template input from untrusted sources.</Description>
<URL>https://github.com/nette/latte/commit/9e1b4f7d70f7a9c3fa6753ffa7d7e450a3d4abb0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-21649" CVSS="5.4">
<Description>Convos is an open source multi-user chat that runs in a web browser. Characters starting with "https://" in the chat window create an <a> tag. Stored XSS vulnerability using onfocus and autofocus occurs because escaping exists for "<" or ">" but escaping for double quotes does not exist. Through this vulnerability, an attacker is capable to execute malicious scripts. Users are advised to update as soon as possible.</Description>
<URL>https://github.com/convos-chat/convos/commit/86b2193de375005ba71d9dd53843562c6ac1847c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-21650" CVSS="5.4">
<Description>Convos is an open source multi-user chat that runs in a web browser. You can't use SVG extension in Convos' chat window, but you can upload a file with an .html extension. By uploading an SVG file with an html extension the upload filter can be bypassed. This causes Stored XSS. Also, after uploading a file the XSS attack is triggered upon a user viewing the file. Through this vulnerability, an attacker is capable to execute malicious scripts. Users are advised to update as soon as possible.</Description>
<URL>https://github.com/convos-chat/convos/commit/5c0a1ec9a2c147bc3b63fd5a48da5f32e18fe5df</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-21719" CVSS="6.1">
<Description>GLPI is a free asset and IT management software package. All GLPI versions prior to 9.5.7 are vulnerable to reflected cross-site scripting. Version 9.5.7 contains a patch for this issue. There are no known workarounds.</Description>
<URL>https://github.com/glpi-project/glpi/commit/e9b16bc8e9b61ebb2d35b96b9c71cd25c5af9e48</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-22126" CVSS="6.1">
<Description>Openmct versions 1.3.0 to 1.7.7 are vulnerable against stored XSS via the “Web Page” element, that allows the injection of malicious JavaScript into the ‘URL’ field. This issue affects: nasa openmct 1.7.7 version and prior versions; 1.3.0 version and later versions.</Description>
<URL>https://github.com/nasa/openmct/commit/abc93d0ec4b104dac1ea5f8a615d06e3ab78934a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-23053" CVSS="6.1">
<Description>Openmct versions 1.3.0 to 1.7.7 are vulnerable against stored XSS via the “Condition Widget” element, that allows the injection of malicious JavaScript into the ‘URL’ field. This issue affects: nasa openmct 1.7.7 version and prior versions; 1.3.0 version and later versions.</Description>
<URL>https://github.com/nasa/openmct/commit/abc93d0ec4b104dac1ea5f8a615d06e3ab78934a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-23054" CVSS="6.1">
<Description>Openmct versions 1.3.0 to 1.7.7 are vulnerable against stored XSS via the “Summary Widget” element, that allows the injection of malicious JavaScript into the ‘URL’ field. This issue affects: nasa openmct 1.7.7 version and prior versions; 1.3.0 version and later versions.</Description>
<URL>https://github.com/nasa/openmct/commit/abc93d0ec4b104dac1ea5f8a615d06e3ab78934a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-23057" CVSS="5.4">
<Description>In ERPNext, versions v12.0.9--v13.0.3 are vulnerable to Stored Cross-Site-Scripting (XSS), due to user input not being validated properly. A low privileged attacker could inject arbitrary code into input fields when editing his profile.</Description>
<URL>https://github.com/frappe/frappe/commit/497ea861f481c6a3c52fe2aed9d0df1b6c99e9d7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-23058" CVSS="3.5">
<Description>ERPNext in versions v12.0.9-v13.0.3 are affected by a stored XSS vulnerability that allows low privileged users to store malicious scripts in the ‘username’ field in ‘my settings’ which can lead to full account takeover.</Description>
<URL>https://github.com/frappe/frappe/commit/497ea861f481c6a3c52fe2aed9d0df1b6c99e9d7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-23065" CVSS="5.4">
<Description>In Vendure versions 0.1.0-alpha.2 to 1.5.1 are affected by Stored XSS vulnerability, where an attacker having catalog permission can upload a SVG file that contains malicious JavaScript into the “Assets” tab. The uploaded file will affect administrators as well as regular users.</Description>
<URL>https://github.com/vendure-ecommerce/vendure/commit/69a44869112c0a5b836e2ddd3969ea9b533f51f0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-23077" CVSS="6.1">
<Description>In habitica versions v4.119.0 through v4.232.2 are vulnerable to DOM XSS via the login page.</Description>
<URL>https://github.com/HabitRPG/habitica/commit/5bcfdbe066e8c899f3ecf3fdcdbacc2ecba7f02f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-23458" CVSS="6.1">
<Description>Toast UI Grid is a component to display and edit data. Versions prior to 4.21.3 are vulnerable to cross-site scripting attacks when pasting specially crafted content into editable cells. This issue was fixed in version 4.21.3. There are no known workarounds.</Description>
<URL>https://github.com/nhn/tui.grid/commit/e9db5968675ae113c07efc091cce210f2b26854f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-23552" CVSS="5.4">
<Description> Grafana is an open-source platform for monitoring and observability. Starting with the 8.1 branch and prior to versions 8.5.16, 9.2.10, and 9.3.4, Grafana had a stored XSS vulnerability affecting the core plugin GeoMap. The stored XSS vulnerability was possible because SVG files weren't properly sanitized and allowed arbitrary JavaScript to be executed in the context of the currently authorized user of the Grafana instance. An attacker needs to have the Editor role in order to change a panel to include either an external URL to a SVG-file containing JavaScript, or use the `data:` scheme to load an inline SVG-file containing JavaScript. This means that vertical privilege escalation is possible, where a user with Editor role can change to a known password for a user having Admin role if the user with Admin role executes malicious JavaScript viewing a dashboard. Users may upgrade to version 8.5.16, 9.2.10, or 9.3.4 to receive a fix. </Description>
<URL>https://github.com/grafana/grafana/commit/1c8a50b36973bd59a1cc5f34c30de8a9a6a431f0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-23598" CVSS="6.1">
<Description>laminas-form is a package for validating and displaying simple and complex forms. When rendering validation error messages via the `formElementErrors()` view helper shipped with laminas-form, many messages will contain the submitted value. However, in laminas-form prior to version 3.1.1, the value was not being escaped for HTML contexts, which could potentially lead to a reflected cross-site scripting attack. Versions 3.1.1 and above contain a patch to mitigate the vulnerability. A workaround is available. One may manually place code at the top of a view script where one calls the `formElementErrors()` view helper. More information about this workaround is available on the GitHub Security Advisory.</Description>
<URL>https://github.com/laminas/laminas-form/commit/43005a3ec4c2292d4f825273768d9b884acbca37</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-23599" CVSS="6.1">
<Description>Products.ATContentTypes are the core content types for Plone 2.1 - 4.3. Versions of Plone that are dependent on Products.ATContentTypes prior to version 3.0.6 are vulnerable to reflected cross site scripting and open redirect when an attacker can get a compromised version of the image_view_fullscreen page in a cache, for example in Varnish. The technique is known as cache poisoning. Any later visitor can get redirected when clicking on a link on this page. Usually only anonymous users are affected, but this depends on the user's cache settings. Version 3.0.6 of Products.ATContentTypes has been released with a fix. This version works on Plone 5.2, Python 2 only. As a workaround, make sure the image_view_fullscreen page is not stored in the cache. More information about the vulnerability and cvmitigation measures is available in the GitHub Security Advisory.</Description>
<URL>https://github.com/plone/Products.ATContentTypes/commit/fc793f88f35a15a68b52e4abed77af0da5fdbab8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-23637" CVSS="5.4">
<Description>K-Box is a web-based application to manage documents, images, videos and geodata. Prior to version 0.33.1, a stored Cross-Site-Scripting (XSS) vulnerability is present in the markdown editor used by the document abstract and markdown file preview. A specifically crafted anchor link can, if clicked, execute untrusted javascript actions, like retrieving user cookies. Version 0.33.1 includes a patch that allows discarding unsafe links.</Description>
<URL>https://github.com/k-box/k-box/commit/3bb4df9a4d01aade5bffaa603a514d1a5fabd214</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-23638" CVSS="6.1">
<Description>svg-sanitizer is a SVG/XML sanitizer written in PHP. A cross-site scripting vulnerability impacts all users of the `svg-sanitizer` library prior to version 0.15.0. This issue is fixed in version 0.15.0. There is currently no workaround available.</Description>
<URL>https://github.com/darylldoyle/svg-sanitizer/commit/17e12ba9c2881caa6b167d0fbea555c11207fbb0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-23647" CVSS="6.1">
<Description>Prism is a syntax highlighting library. Starting with version 1.14.0 and prior to version 1.27.0, Prism's command line plugin can be used by attackers to achieve a cross-site scripting attack. The command line plugin did not properly escape its output, leading to the input text being inserted into the DOM as HTML code. Server-side usage of Prism is not impacted. Websites that do not use the Command Line plugin are also not impacted. This bug has been fixed in v1.27.0. As a workaround, do not use the command line plugin on untrusted inputs, or sanitize all code blocks (remove all HTML code text) from all code blocks that use the command line plugin.</Description>
<URL>https://github.com/PrismJS/prism/commit/e002e78c343154e1c0ddf9d6a0bb85689e1a5c7c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-23656" CVSS="5.4">
<Description>Zulip is an open source team chat app. The `main` development branch of Zulip Server from June 2021 and later is vulnerable to a cross-site scripting vulnerability on the recent topics page. An attacker could maliciously craft a full name for their account and send messages to a topic with several participants; a victim who then opens an overflow tooltip including this full name on the recent topics page could trigger execution of JavaScript code controlled by the attacker. Users running a Zulip server from the main branch should upgrade from main (2022-03-01 or later) again to deploy this fix.</Description>
<URL>https://github.com/zulip/zulip/commit/e090027adcbf62737d5b1f83a9618a9500a49321</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-23993" CVSS="6.1">
<Description>/usr/local/www/pkg.php in pfSense CE before 2.6.0 and pfSense Plus before 22.01 uses $_REQUEST['pkg_filter'] in a PHP echo call, causing XSS.</Description>
<URL>https://github.com/pfsense/pfsense/commit/5d82cce0d615a76b738798577a28a15803e59aeb</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-24710" CVSS="5.4">
<Description>Weblate is a copyleft software web-based continuous localization system. Versions prior to 4.11 do not properly neutralize user input used in user name and language fields. Due to this improper neutralization it is possible to perform cross-site scripting via these fields. The issues were fixed in the 4.11 release. Users unable to upgrade are advised to add their own neutralize logic.</Description>
<URL>https://github.com/WeblateOrg/weblate/commit/22d577b1f1e88665a88b4569380148030e0f8389</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-24722" CVSS="6.1">
<Description>VIewComponent is a framework for building view components in Ruby on Rails. Versions prior to 2.31.2 and 2.49.1 contain a cross-site scripting vulnerability that has the potential to impact anyone using translations with the view_component gem. Data received via user input and passed as an interpolation argument to the `translate` method is not properly sanitized before display. Versions 2.31.2 and 2.49.1 have been released and fully mitigate the vulnerability. As a workaround, avoid passing user input to the `translate` function, or sanitize the inputs before passing them.</Description>
<URL>https://github.com/github/view_component/commit/3f82a6e62578ff6f361aba24a1feb2caccf83ff9</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-24811" CVSS="5.4">
<Description>Combodi iTop is a web based IT Service Management tool. Prior to versions 2.7.6 and 3.0.0, cross-site scripting is possible for scripts outside of script tags when displaying HTML attachments. This issue is fixed in versions 2.7.6 and 3.0.0. There are currently no known workarounds.</Description>
<URL>https://github.com/Combodo/iTop/commit/92a9a8c65f3cbb2cd4414ca3a3b45a5754ba57b4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-24851" CVSS="4.8">
<Description>LDAP Account Manager (LAM) is an open source web frontend for managing entries stored in an LDAP directory. The profile editor tool has an edit profile functionality, the parameters on this page are not properly sanitized and hence leads to stored XSS attacks. An authenticated user can store XSS payloads in the profiles, which gets triggered when any other user try to access the edit profile page. The pdf editor tool has an edit pdf profile functionality, the logoFile parameter in it is not properly sanitized and an user can enter relative paths like ../../../../../../../../../../../../../usr/share/icons/hicolor/48x48/apps/gvim.png via tools like burpsuite. Later when a pdf is exported using the edited profile the pdf icon has the image on that path(if image is present). Both issues require an attacker to be able to login to LAM admin interface. The issue is fixed in version 7.9.1.</Description>
<URL>https://github.com/LDAPAccountManager/lam/commit/3c6f09a3579e048e224eb5a4c4e3eefaa8bccd49</URL>
<CWE ID="22">
<MainWeakness Cause="Under-Restrictive Policy" Operation="Sanitize" Consequence="File Injection"/>
</CWE>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-24868" CVSS="5.4">
<Description>GLPI is a Free Asset and IT Management Software package, that provides ITIL Service Desk features, licenses tracking and software auditing. In versions prior to 10.0.0 one can exploit a lack of sanitization on SVG file uploads and inject javascript into their user avatar. As a result any user viewing the avatar will be subject to a cross site scripting attack. Users of GLPI are advised to upgrade. Users unable to upgrade should disallow SVG avatars.</Description>
<URL>https://github.com/glpi-project/glpi/commit/1aa9fcc4741a46fa5a9f11d71b409b911ffc190f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-24869" CVSS="5.4">
<Description>GLPI is a Free Asset and IT Management Software package, that provides ITIL Service Desk features, licenses tracking and software auditing. In versions prior to 10.0.0 one can use ticket's followups or setup login messages with a stylesheet link. This may allow for a cross site scripting attack vector. This issue is partially mitigated by cors security of browsers, though users are still advised to upgrade.</Description>
<URL>https://github.com/glpi-project/glpi/commit/ac9f1f03c5d2545b7e290197dbfebc3f752f810e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-24870" CVSS="5.4">
<Description>Combodo iTop is a web based IT Service Management tool. In 3.0.0 beta releases prior to 3.0.0 beta3 a malicious script can be injected in tooltips using iTop customization mechanism. This provides a stored cross site scripting attack vector to authorized users of the system. Users are advised to upgrade. There are no known workarounds for this issue.</Description>
<URL>https://www.github.com/combodo/itop/commit/ebbf6e56befda2070b00d68c7c3e531a6ce6b59e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-24876" CVSS="5.4">
<Description>GLPI is a Free Asset and IT Management Software package, that provides ITIL Service Desk features, licenses tracking and software auditing. Kanban is a GLPI view to display Projects, Tickets, Changes or Problems on a task board. In versions prior to 10.0.1 a user can exploit a cross site scripting vulnerability in Kanban by injecting HTML code in its user name. Users are advised to upgrade. There are no known workarounds for this issue.</Description>
<URL>https://github.com/glpi-project/glpi/commit/9a3c7487c8761eaa8f3b07589d6dcdfa5d1e4ed6</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-2514" CVSS="6.1">
<Description>The time and filter parameters in Fava prior to v1.22 are vulnerable to reflected XSS due to the lack of escaping of error messages which contained the parameters in verbatim.</Description>
<URL>https://github.com/beancount/fava/commit/ca9e3882c7b5fbf5273ba52340b9fea6a99f3711</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-25317" CVSS="6.1">
<Description>An issue was discovered in Cerebrate through 1.4. genericForm allows reflected XSS in form descriptions via a user-controlled description.</Description>
<URL>https://github.com/cerebrate-project/cerebrate/commit/e60d97c214f9ac6df90c87241b3b3554afc06238</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-25321" CVSS="6.1">
<Description>An issue was discovered in Cerebrate through 1.4. XSS could occur in the bookmarks component.</Description>
<URL>https://github.com/cerebrate-project/cerebrate/commit/14ec995c2bd618b181197dc6b64e63fd966b4860</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-25854" CVSS="5.4">
<Description>This affects the package @yaireo/tagify before 4.9.8. The package is used for rendering UI components inside the input or text fields, and an attacker can pass a malicious placeholder value to it to fire the XSS payload.</Description>
<URL>https://github.com/yairEO/tagify/commit/198c0451fad188390390395ccfc84ab371def4c7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-26874" CVSS="5.4">
<Description>lib/Horde/Mime/Viewer/Ooo.php in Horde Mime_Viewer before 2.2.4 allows XSS via an OpenOffice document, leading to account takeover in Horde Groupware Webmail Edition. This occurs after XSLT rendering.</Description>
<URL>https://github.com/horde/Mime_Viewer/commit/02b46cec1a7e8f1a6835b628850cd56b85963bb5</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-27168" CVSS="6.1">
<Description>Cross-site scripting vulnerability in LiteCart versions prior to 2.4.2 allows a remote attacker to inject an arbitrary script via unspecified vectors.</Description>
<URL>https://github.com/litecart/litecart/commit/050fea86cc162f3da2f7824f586602125a0f6d63</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-27244" CVSS="4.8">
<Description>An issue was discovered in MISP before 2.4.156. A malicious site administrator could store an XSS payload in the custom auth name. This would be executed each time the administrator modifies a user.</Description>
<URL>https://github.com/MISP/MISP/commit/61d4d3670593b78e4dab7a11eb620b7a372f30e6</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-28367" CVSS="6.1">
<Description>OWASP AntiSamy before 1.6.6 allows XSS via HTML tag smuggling on STYLE content with crafted input. The output serializer does not properly encode the supposed Cascading Style Sheets (CSS) content.</Description>
<URL>https://github.com/nahsra/antisamy/commit/0199e7e194dba5e7d7197703f43ebe22401e61ae</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-28545" CVSS="5.4">
<Description>FUDforum 3.1.1 is vulnerable to Stored XSS.</Description>
<URL>https://github.com/fudforum/FUDforum/commit/8ff446881932a45ce538b84a76f833d44eada93b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-29251" CVSS="6.1">
<Description>XWiki Platform Flamingo Theme UI is a tool that allows customization and preview of any Flamingo-based skin. Starting with versions 6.2.4 and 6.3-rc-1, a possible cross-site scripting vector is present in the `FlamingoThemesCode.WebHomeSheet` wiki page related to the "newThemeName" form field. The issue is patched in versions 12.10.11, 14.0-rc-1, 13.4.7, and 13.10.3. The easiest available workaround is to edit the wiki page `FlamingoThemesCode.WebHomeSheet` (with wiki editor) according to the suggestion provided in the GitHub Security Advisory.</Description>
<URL>https://github.com/xwiki/xwiki-platform/commit/bd935320bee3c27cf7548351b1d0f935f116d437</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="80">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="116">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Command Injection"/>
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Parameter Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Parameter Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Command Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-29252" CVSS="6.1">
<Description>XWiki Platform Wiki UI Main Wiki is a package for managing subwikis. Starting with version 5.3-milestone-2, XWiki Platform Wiki UI Main Wiki contains a possible cross-site scripting vector in the `WikiManager.JoinWiki ` wiki page related to the "requestJoin" field. The issue is patched in versions 12.10.11, 14.0-rc-1, 13.4.7, and 13.10.3. The easiest available workaround is to edit the wiki page `WikiManager.JoinWiki` (with wiki editor) according to the suggestion provided in the GitHub Security Advisory.</Description>
<URL>https://github.com/xwiki/xwiki-platform/commit/27f839133d41877e538d35fa88274b50a1c00b9b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="80">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="116">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Command Injection"/>
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Parameter Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Parameter Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Command Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-29258" CVSS="6.1">
<Description>XWiki Platform Filter UI provides a generic user interface to convert from a XWiki Filter input stream to an output stream with settings for each stream. Starting with versions 6.0-milestone-2 and 5.4.4 and prior to versions 12.10.11, 14.0-rc-1, 13.4.7, and 13.10.3, XWiki Platform Filter UI contains a possible cross-site scripting vector in the `Filter.FilterStreamDescriptorForm` wiki page related to pretty much all the form fields printed in the home page of the application. The issue is patched in versions 12.10.11, 14.0-rc-1, 13.4.7, and 13.10.3. The easiest workaround is to edit the wiki page `Filter.FilterStreamDescriptorForm` (with wiki editor) according to the instructions in the GitHub Security Advisory.</Description>
<URL>https://github.com/xwiki/xwiki-platform/commit/21906acb5ee2304552f56f9bbdbf8e7d368f7f3a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="80">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="116">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Command Injection"/>
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Parameter Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Parameter Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Command Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-2941" CVSS="4.8">
<Description>The WP-UserOnline plugin for WordPress has multiple Stored Cross-Site Scripting vulnerabilities in versions up to, and including 2.88.0. This is due to the fact that all fields in the "Naming Conventions" section do not properly sanitize user input, nor escape it on output. This makes it possible for authenticated attackers, with administrative privileges, to inject JavaScript code into the setting that will execute whenever a user accesses the injected page. This only affects multi-site installations and installations where unfiltered_html has been disabled.</Description>
<URL>https://github.com/lesterchan/wp-useronline/commit/59c76b20e4e27489f93dee4ef1254d6204e08b3c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-29529" CVSS="5.4">
<Description>An issue was discovered in MISP before 2.4.158. There is stored XSS via the LinOTP login field.</Description>
<URL>https://github.com/MISP/MISP/commit/9623de2f5cca011afc581d55cfa5ce87682894fd</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-29530" CVSS="5.4">
<Description>An issue was discovered in MISP before 2.4.158. There is stored XSS in the galaxy clusters.</Description>
<URL>https://github.com/MISP/MISP/commit/107e271d78c255d658ce998285fe6f6c4f291b41</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-29531" CVSS="5.4">
<Description>An issue was discovered in MISP before 2.4.158. There is stored XSS in the event graph via a tag name.</Description>
<URL>https://github.com/MISP/MISP/commit/bb3b7a7e91862742cae228c43b3091bad476dcc0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-29532" CVSS="4.8">
<Description>An issue was discovered in MISP before 2.4.158. There is XSS in the cerebrate view if one administrator puts a javascript: URL in the URL field, and another administrator clicks on it.</Description>
<URL>https://github.com/MISP/MISP/commit/60c85b80e3ab05c3ef015bca5630e95eddbb1436</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-29533" CVSS="6.1">
<Description>An issue was discovered in MISP before 2.4.158. There is XSS in app/Controller/OrganisationsController.php in a situation with a "weird single checkbox page."</Description>
<URL>https://github.com/MISP/MISP/commit/ce6bc88e330f5ef50666b149d86c0d94f545f24e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-29577" CVSS="6.1">
<Description>OWASP AntiSamy before 1.6.7 allows XSS via HTML tag smuggling on STYLE content with crafted input. The output serializer does not properly encode the supposed Cascading Style Sheets (CSS) content. NOTE: this issue exists because of an incomplete fix for CVE-2022-28367.</Description>
<URL>https://github.com/nahsra/antisamy/commit/32e273507da0e964b58c50fd8a4c94c9d9363af0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-31029" CVSS="4.8">
<Description>AdminLTE is a Pi-hole Dashboard for stats and configuration. In affected versions inserting code like `<script>alert("XSS")</script>` in the field marked with "Domain to look for" and hitting <kbd>enter</kbd> (or clicking on any of the buttons) will execute the script. The user must be logged in to use this vulnerability. Usually only administrators have login access to pi-hole, minimizing the risks. Users are advised to upgrade. There are no known workarounds for this issue.</Description>
<URL>https://github.com/pi-hole/AdminLTE/commit/b07372bd426ca8111824a0244dc89d07a7243509</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-31038" CVSS="5.4">
<Description>Gogs is an open source self-hosted Git service. In versions of gogs prior to 0.12.9 `DisplayName` does not filter characters input from users, which leads to an XSS vulnerability when directly displayed in the issue list. This issue has been resolved in commit 155cae1d which sanitizes `DisplayName` prior to display to the user. All users of gogs are advised to upgrade. Users unable to upgrade should check their users' display names for malicious characters.</Description>
<URL>https://github.com/gogs/gogs/commit/155cae1de8916fc3fde78f350763034b7422caee</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-31048" CVSS="5.4">
<Description>TYPO3 is an open source web content management system. Prior to versions 8.7.47 ELTS, 9.5.34 ELTS, 10.4.29, and 11.5.11, the Form Designer backend module of the Form Framework is vulnerable to cross-site scripting. A valid backend user account with access to the form module is needed to exploit this vulnerability. TYPO3 versions 8.7.47 ELTS, 9.5.34 ELTS, 10.4.29, and 11.5.11 contain a fix for the problem.</Description>
<URL>https://github.com/TYPO3/typo3/commit/6f2554dc4ea0b670fd5599c54fd788d4db96c4a0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-31057" CVSS="5.4">
<Description>Shopware is an open source e-commerce software made in Germany. Versions of Shopware 5 prior to version 5.7.12 are subject to an authenticated Stored XSS in Administration. Users are advised to upgrade. There are no known workarounds for this issue.</Description>
<URL>https://github.com/shopware/shopware/commit/3e025a0a3e123f4108082645b1ced6fb548f7b6f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-31109" CVSS="6.1">
<Description>laminas-diactoros is a PHP package containing implementations of the PSR-7 HTTP message interfaces and PSR-17 HTTP message factory interfaces. Applications that use Diactoros, and are either not behind a proxy, or can be accessed via untrusted proxies, can potentially have the host, protocol, and/or port of a `Laminas\Diactoros\Uri` instance associated with the incoming server request modified to reflect values from `X-Forwarded-*` headers. Such changes can potentially lead to XSS attacks (if a fully-qualified URL is used in links) and/or URL poisoning. Since the `X-Forwarded-*` headers do have valid use cases, particularly in clustered environments using a load balancer, the library offers mitigation measures only in the v2 releases, as doing otherwise would break these use cases immediately. Users of v2 releases from 2.11.1 can provide an additional argument to `Laminas\Diactoros\ServerRequestFactory::fromGlobals()` in the form of a `Laminas\Diactoros\RequestFilter\RequestFilterInterface` instance, including the shipped `Laminas\Diactoros\RequestFilter\NoOpRequestFilter` implementation which ignores the `X-Forwarded-*` headers. Starting in version 3.0, the library will reverse behavior to use the `NoOpRequestFilter` by default, and require users to opt-in to `X-Forwarded-*` header usage via a configured `Laminas\Diactoros\RequestFilter\LegacyXForwardedHeaderFilter` instance. Users are advised to upgrade to version 2.11.1 or later to resolve this issue. Users unable to upgrade may configure web servers to reject `X-Forwarded-*` headers at the web server level.</Description>
<URL>https://github.com/laminas/laminas-diactoros/commit/25b11d422c2e5dad868f68619888763b30f91e2d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-31113" CVSS="6.1">
<Description>Canarytokens is an open source tool which helps track activity and actions on your network. A Cross-Site Scripting vulnerability was identified in the history page of triggered Canarytokens. This permits an attacker who recognised an HTTP-based Canarytoken (a URL) to execute Javascript in the Canarytoken's history page (domain: canarytokens.org) when the history page is later visited by the Canarytoken's creator. This vulnerability could be used to disable or delete the affected Canarytoken, or view its activation history. It might also be used as a stepping stone towards revealing more information about the Canarytoken's creator to the attacker. For example, an attacker could recover the email address tied to the Canarytoken, or place Javascript on the history page that redirect the creator towards an attacker-controlled Canarytoken to show the creator's network location. An attacker could only act on the discovered Canarytoken. This issue did not expose other Canarytokens or other Canarytoken creators. The issue has been patched on Canarytokens.org and in the latest release. No signs of successful exploitation of this vulnerability have been found. Users are advised to upgrade. There are no known workarounds for this issue.</Description>
<URL>https://github.com/thinkst/canarytokens/commit/dc378957bc28a6f3b5a8d7217b0605d81111f090</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-31136" CVSS="6.1">
<Description>Bookwyrm is an open source social reading and reviewing program. Versions of Bookwyrm prior to 0.4.1 did not properly sanitize html being rendered to users. Unprivileged users are able to inject scripts into user profiles, book descriptions, and statuses. These vulnerabilities may be exploited as cross site scripting attacks on users viewing these fields. Users are advised to upgrade to version 0.4.1. There are no known workarounds for this issue.</Description>
<URL>https://github.com/bookwyrm-social/bookwyrm/commit/fe33fdcf564a6a5667aef75d5456bea08feab50d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-31160" CVSS="6.1">
<Description>jQuery UI is a curated set of user interface interactions, effects, widgets, and themes built on top of jQuery. Versions prior to 1.13.2 are potentially vulnerable to cross-site scripting. Initializing a checkboxradio widget on an input enclosed within a label makes that parent label contents considered as the input label. Calling `.checkboxradio( "refresh" )` on such a widget and the initial HTML contained encoded HTML entities will make them erroneously get decoded. This can lead to potentially executing JavaScript code. The bug has been patched in jQuery UI 1.13.2. To remediate the issue, someone who can change the initial HTML can wrap all the non-input contents of the `label` in a `span`.</Description>
<URL>https://github.com/jquery/jquery-ui/commit/8cc5bae1caa1fcf96bf5862c5646c787020ba3f9</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-31191" CVSS="6.1">
<Description>DSpace open source software is a repository application which provides durable access to digital resources. dspace-jspui is a UI component for DSpace. The JSPUI spellcheck "Did you mean" HTML escapes the data-spell attribute in the link, but not the actual displayed text. Similarly, the JSPUI autocomplete HTML does not properly escape text passed to it. Both are vulnerable to XSS. This vulnerability only impacts the JSPUI. Users are advised to upgrade. There are no known workarounds for this issue.</Description>
<URL>https://github.com/DSpace/DSpace/commit/35030a23e48b5946f5853332c797e1c4adea7bb7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-31192" CVSS="6.1">
<Description>DSpace open source software is a repository application which provides durable access to digital resources. dspace-jspui is a UI component for DSpace. The JSPUI "Request a Copy" feature does not properly escape values submitted and stored from the "Request a Copy" form. This means that item requests could be vulnerable to XSS attacks. This vulnerability only impacts the JSPUI. Users are advised to upgrade. There are no known workarounds for this vulnerability.</Description>
<URL>https://github.com/DSpace/DSpace/commit/28eb8158210d41168a62ed5f9e044f754513bc37</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-36107" CVSS="5.4">
<Description>TYPO3 is an open source PHP based web content management system released under the GNU GPL. It has been discovered that the `FileDumpController` (backend and frontend context) is vulnerable to cross-site scripting when malicious files are displayed using this component. A valid backend user account is needed to exploit this vulnerability. Update to TYPO3 version 7.6.58 ELTS, 8.7.48 ELTS, 9.5.37 ELTS, 10.4.32 or 11.5.16 that fix the problem. There are no known workarounds for this issue.</Description>
<URL>https://github.com/TYPO3/typo3/commit/bd58d2ff2eeef89e63ef754a2389597d22622a39</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-36108" CVSS="6.1">
<Description>TYPO3 is an open source PHP based web content management system released under the GNU GPL. It has been discovered that the `f:asset.css` view helper is vulnerable to cross-site scripting when user input is passed as variables to the CSS. Update to TYPO3 version 10.4.32 or 11.5.16 that fix the problem. There are no known workarounds for this issue.</Description>
<URL>https://github.com/TYPO3/typo3/commit/6863f73818c36b0b88c677ba533765c8074907b4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-3704" CVSS="5.4">
<Description>A vulnerability classified as problematic has been found in Ruby on Rails. This affects an unknown part of the file actionpack/lib/action_dispatch/middleware/templates/routes/_table.html.erb. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. The real existence of this vulnerability is still doubted at the moment. The name of the patch is be177e4566747b73ff63fd5f529fab564e475ed4. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-212319. NOTE: Maintainer declares that there isn’t a valid attack vector. The issue was wrongly reported as a security vulnerability by a non-member of the Rails team.</Description>
<URL>https://github.com/rails/rails/commit/be177e4566747b73ff63fd5f529fab564e475ed4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-3783" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in node-red-dashboard. This issue affects some unknown processing of the file components/ui-component/ui-component-ctrl.js of the component ui_text Format Handler. The manipulation leads to cross site scripting. The attack may be initiated remotely. The name of the patch is 9305d1a82f19b235dfad24a7d1dd4ed244db7743. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-212555.</Description>
<URL>https://github.com/node-red/node-red-dashboard/commit/9305d1a82f19b235dfad24a7d1dd4ed244db7743</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-3844" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, was found in Webmin 2.001. Affected is an unknown function of the file xterm/index.cgi. The manipulation leads to basic cross site scripting. It is possible to launch the attack remotely. Upgrading to version 2.003 is able to address this issue. The patch is identified as d3d33af3c0c3fd3a889c84e287a038b7a457d811. It is recommended to upgrade the affected component. VDB-212862 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/webmin/webmin/commit/d3d33af3c0c3fd3a889c84e287a038b7a457d811</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="80">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-3845" CVSS="6.1">
<Description>A vulnerability has been found in phpipam and classified as problematic. Affected by this vulnerability is an unknown functionality of the file app/admin/import-export/import-load-data.php of the component Import Preview Handler. The manipulation leads to cross site scripting. The attack can be launched remotely. Upgrading to version 1.5.0 is able to address this issue. The name of the patch is 22c797c3583001211fe7d31bccd3f1d4aeeb3bbc. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-212863.</Description>
<URL>https://github.com/phpipam/phpipam/commit/22c797c3583001211fe7d31bccd3f1d4aeeb3bbc</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-39325" CVSS="6.1">
<Description>BaserCMS is a content management system with a japanese language focus. In affected versions there is a cross-site scripting vulnerability on the management system of baserCMS. This is a vulnerability that needs to be addressed when the management system is used by an unspecified number of users. Users of baserCMS are advised to upgrade as soon as possible. There are no known workarounds for this vulnerability.</Description>
<URL>https://github.com/baserproject/basercms/commit/b6f8a54e90dee51317eddf517b776fe8b4cd3ef6</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-3950" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, was found in sanluan PublicCMS. Affected is the function initLink of the file dwz.min.js of the component Tab Handler. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. The name of the patch is a972dc9b1c94aea2d84478bf26283904c21e4ca2. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-213456.</Description>
<URL>https://github.com/sanluan/PublicCMS/commit/a972dc9b1c94aea2d84478bf26283904c21e4ca2</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-3963" CVSS="5.4">
<Description>A vulnerability was found in gnuboard5. It has been classified as problematic. Affected is an unknown function of the file bbs/faq.php of the component FAQ Key ID Handler. The manipulation of the argument fm_id leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 5.5.8.2.1 is able to address this issue. The name of the patch is ba062ca5b62809106d5a2f7df942ffcb44ecb5a9. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-213540.</Description>
<URL>https://github.com/gnuboard/gnuboard5/commit/ba062ca5b62809106d5a2f7df942ffcb44ecb5a9</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-3968" CVSS="6.1">
<Description>A vulnerability has been found in emlog and classified as problematic. Affected by this vulnerability is an unknown functionality of the file admin/article_save.php. The manipulation of the argument tag leads to cross site scripting. The attack can be launched remotely. The name of the patch is 5bf7a79826e0ea09bcc8a21f69a0c74107761a02. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-213547.</Description>
<URL>https://github.com/emlog/emlog/commit/5bf7a79826e0ea09bcc8a21f69a0c74107761a02</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-3988" CVSS="6.1">
<Description>A vulnerability was found in Frappe. It has been rated as problematic. Affected by this issue is some unknown functionality of the file frappe/templates/includes/navbar/navbar_search.html of the component Search. The manipulation of the argument q leads to cross site scripting. The attack may be launched remotely. The name of the patch is bfab7191543961c6cb77fe267063877c31b616ce. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-213560.</Description>
<URL>https://github.com/frappe/frappe/commit/bfab7191543961c6cb77fe267063877c31b616ce</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4068" CVSS="5.4">
<Description>A user is able to enable their own account if it was disabled by an admin while the user still holds a valid session. Moreover, the username is not properly sanitized in the admin user overview. This enables an XSS attack that enables an attacker with a low privilege user to execute arbitrary JavaScript in the context of an admin's account.</Description>
<URL>https://github.com/librenms/librenms/commit/09a2977adb8bc4b1db116c725d661160c930d3a1</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-40704" CVSS="6.1">
<Description>A XSS vulnerability was found in phoromatic_r_add_test_details.php in phoronix-test-suite.</Description>
<URL>https://github.com/phoronix-test-suite/phoronix-test-suite/commit/d3880d9d3ba795138444da83f1153c3c3ac27640</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4105" CVSS="5.4">
<Description>A stored XSS in a kiwi Test Plan can run malicious javascript which could be chained with an HTML injection to perform a UI redressing attack (clickjacking) and an HTML injection which disables the use of the history page.</Description>
<URL>https://github.com/kiwitcms/kiwi/commit/a2b169ffdef1d7c1755bade8138578423b35011b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-41938" CVSS="5.4">
<Description>Flarum is an open source discussion platform. Flarum's page title system allowed for page titles to be converted into HTML DOM nodes when pages were rendered. The change was made after `v1.5` and was not noticed. This allowed an attacker to inject malicious HTML markup using a discussion title input, either by creating a new discussion or renaming one. The XSS attack occurs after a visitor opens the relevant discussion page. All communities running Flarum from `v1.5.0` to `v1.6.1` are impacted. The vulnerability has been fixed and published as flarum/core `v1.6.2`. All communities running Flarum from `v1.5.0` to `v1.6.1` have to upgrade as soon as possible to v1.6.2. There are no known workarounds for this issue.</Description>
<URL>https://github.com/flarum/framework/commit/690de9ce0ffe7ac4d45b73e303f44340c3433138</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4396" CVSS="5.4">
<Description>A vulnerability was found in RDFlib pyrdfa3 and classified as problematic. This issue affects the function _get_option of the file pyRdfa/__init__.py. The manipulation leads to cross site scripting. The attack may be initiated remotely. The name of the patch is ffd1d62dd50d5f4190013b39cedcdfbd81f3ce3e. It is recommended to apply a patch to fix this issue. The identifier VDB-215249 was assigned to this vulnerability. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.</Description>
<URL>https://github.com/RDFLib/pyrdfa3/commit/ffd1d62dd50d5f4190013b39cedcdfbd81f3ce3e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4421" CVSS="6.1">
<Description>A vulnerability was found in rAthena FluxCP. It has been classified as problematic. Affected is an unknown function of the file themes/default/servicedesk/view.php of the component Service Desk Image URL Handler. The manipulation of the argument sslink leads to cross site scripting. It is possible to launch the attack remotely. The name of the patch is 8a39b2b2bf28353b3503ff1421862393db15aa7e. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-215304.</Description>
<URL>https://github.com/rathena/FluxCP/commit/8a39b2b2bf28353b3503ff1421862393db15aa7e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4444" CVSS="6.1">
<Description>A vulnerability was found in ipti br.tag. It has been declared as problematic. Affected by this vulnerability is an unknown functionality. The manipulation leads to cross site scripting. The attack can be launched remotely. Upgrading to version 2.13.0 is able to address this issue. The name of the patch is 7e311be22d3a0a1b53e61cb987ba13d681d85f06. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-215431.</Description>
<URL>https://github.com/ipti/br.tag/commit/7e311be22d3a0a1b53e61cb987ba13d681d85f06</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4455" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, was found in sproctor php-calendar. This affects an unknown part of the file index.php. The manipulation of the argument $_SERVER['PHP_SELF'] leads to cross site scripting. It is possible to initiate the attack remotely. The name of the patch is a2941109b42201c19733127ced763e270a357809. It is recommended to apply a patch to fix this issue. The identifier VDB-215445 was assigned to this vulnerability.</Description>
<URL>https://github.com/sproctor/php-calendar/commit/a2941109b42201c19733127ced763e270a357809</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4456" CVSS="6.1">
<Description>A vulnerability has been found in falling-fruit and classified as problematic. This vulnerability affects unknown code. The manipulation leads to cross site scripting. The attack can be initiated remotely. The name of the patch is 15adb8e1ea1f1c3e3d152fc266071f621ef0c621. It is recommended to apply a patch to fix this issue. VDB-215446 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/falling-fruit/falling-fruit/commit/15adb8e1ea1f1c3e3d152fc266071f621ef0c621</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4495" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in collective.dms.basecontent up to 1.6. This issue affects the function renderCell of the file src/collective/dms/basecontent/browser/column.py. The manipulation leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 1.7 is able to address this issue. The name of the patch is 6c4d616fcc771822a14ebae5e23f3f6d96d134bd. It is recommended to upgrade the affected component. The identifier VDB-215813 was assigned to this vulnerability.</Description>
<URL>https://github.com/collective/collective.dms.basecontent/commit/6c4d616fcc771822a14ebae5e23f3f6d96d134bd</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4513" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in European Environment Agency eionet.contreg. This issue affects some unknown processing. The manipulation of the argument searchTag/resourceUri leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 2022-06-27T0948 is able to address this issue. The name of the patch is a120c2153e263e62c4db34a06ab96a9f1c6bccb6. It is recommended to upgrade the affected component. The identifier VDB-215885 was assigned to this vulnerability.</Description>
<URL>https://github.com/eea/eionet.contreg/commit/a120c2153e263e62c4db34a06ab96a9f1c6bccb6</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4514" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, was found in Opencaching Deutschland oc-server3. Affected is an unknown function of the file htdocs/lang/de/ocstyle/varset.inc.php. The manipulation of the argument varvalue leads to cross site scripting. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. The name of the patch is 4bdd6a0e7b7760cea03b91812cbb80d7b16e3b5f. It is recommended to apply a patch to fix this issue. VDB-215886 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/OpencachingDeutschland/oc-server3/commit/4bdd6a0e7b7760cea03b91812cbb80d7b16e3b5f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4520" CVSS="6.1">
<Description>A vulnerability was found in WSO2 carbon-registry up to 4.8.11. It has been rated as problematic. Affected by this issue is some unknown functionality of the file components/registry/org.wso2.carbon.registry.search.ui/src/main/resources/web/search/advancedSearchForm-ajaxprocessor.jsp of the component Advanced Search. The manipulation of the argument mediaType/rightOp/leftOp/rightPropertyValue/leftPropertyValue leads to cross site scripting. The attack may be launched remotely. Upgrading to version 4.8.12 is able to address this issue. The name of the patch is 0c827cc1b14b82d8eb86117ab2e43c34bb91ddb4. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-215900.</Description>
<URL>https://github.com/wso2/carbon-registry/commit/0c827cc1b14b82d8eb86117ab2e43c34bb91ddb4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4521" CVSS="6.1">
<Description>A vulnerability classified as problematic has been found in WSO2 carbon-registry up to 4.8.6. This affects an unknown part of the component Request Parameter Handler. The manipulation of the argument parentPath/path/username/path/profile_menu leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 4.8.7 is able to address this issue. The name of the patch is 9f967abfde9317bee2cda469dbc09b57d539f2cc. It is recommended to upgrade the affected component. The identifier VDB-215901 was assigned to this vulnerability.</Description>
<URL>https://github.com/wso2/carbon-registry/commit/9f967abfde9317bee2cda469dbc09b57d539f2cc</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4523" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in vexim2. This issue affects some unknown processing. The manipulation leads to cross site scripting. The attack may be initiated remotely. The name of the patch is 21c0a60d12e9d587f905cd084b2c70f9b1592065. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-215903.</Description>
<URL>https://github.com/vexim/vexim2/commit/21c0a60d12e9d587f905cd084b2c70f9b1592065</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4524" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, was found in Roots soil Plugin up to 4.0.x. Affected is the function language_attributes of the file src/Modules/CleanUpModule.php. The manipulation of the argument language leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 4.1.0 is able to address this issue. The name of the patch is 0c9151e00ab047da253e5cdbfccb204dd423269d. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-215904.</Description>
<URL>https://github.com/roots/soil/commit/0c9151e00ab047da253e5cdbfccb204dd423269d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4525" CVSS="6.1">
<Description>A vulnerability has been found in National Sleep Research Resource sleepdata.org up to 58.x and classified as problematic. Affected by this vulnerability is an unknown functionality. The manipulation leads to cross site scripting. The attack can be launched remotely. Upgrading to version 59.0.0.rc is able to address this issue. The name of the patch is da44a3893b407087829b006d09339780919714cd. It is recommended to upgrade the affected component. The identifier VDB-215905 was assigned to this vulnerability.</Description>
<URL>https://github.com/nsrr/sleepdata.org/commit/da44a3893b407087829b006d09339780919714cd</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4526" CVSS="6.1">
<Description>A vulnerability was found in django-photologue up to 3.15.1 and classified as problematic. Affected by this issue is some unknown functionality of the file photologue/templates/photologue/photo_detail.html of the component Default Template Handler. The manipulation of the argument object.caption leads to cross site scripting. The attack may be launched remotely. Upgrading to version 3.16 is able to address this issue. The name of the patch is 960cb060ce5e2964e6d716ff787c72fc18a371e7. It is recommended to apply a patch to fix this issue. VDB-215906 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/richardbarran/django-photologue/commit/960cb060ce5e2964e6d716ff787c72fc18a371e7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4527" CVSS="6.1">
<Description>A vulnerability was found in collective.task up to 3.0.8. It has been classified as problematic. This affects the function renderCell/AssignedGroupColumn of the file src/collective/task/browser/table.py. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 3.0.9 is able to address this issue. The name of the patch is 1aac7f83fa2c2b41d59ba02748912953461f3fac. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-215907.</Description>
<URL>https://github.com/collective/collective.task/commit/1aac7f83fa2c2b41d59ba02748912953461f3fac</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-45598" CVSS="6.1">
<Description>Cross Site Scripting vulnerability in Joplin Desktop App before v2.9.17 allows attacker to execute arbitrary code via improper santization.</Description>
<URL>https://github.com/laurent22/joplin/commit/a2de167b95debad83a0f0c7925a88c0198db812e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4560" CVSS="6.1">
<Description>A vulnerability was found in Joget up to 7.0.31. It has been rated as problematic. This issue affects the function getInternalJsCssLib of the file wflow-core/src/main/java/org/joget/plugin/enterprise/UniversalTheme.java of the component wflow-core. The manipulation of the argument key leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 7.0.32 is able to address this issue. The name of the patch is ecf8be8f6f0cb725c18536ddc726d42a11bdaa1b. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-215963.</Description>
<URL>https://github.com/jogetworkflow/jw-community/commit/ecf8be8f6f0cb725c18536ddc726d42a11bdaa1b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4585" CVSS="6.1">
<Description>A vulnerability classified as problematic has been found in Opencaching Deutschland oc-server3. This affects an unknown part of the file htdocs/templates2/ocstyle/start.tpl of the component Cookie Handler. The manipulation of the argument usercountryCode leads to cross site scripting. It is possible to initiate the attack remotely. The name of the patch is c720f2777a452186c67ef30db3679dd409556544. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-216171.</Description>
<URL>https://github.com/OpencachingDeutschland/oc-server3/commit/c720f2777a452186c67ef30db3679dd409556544</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4586" CVSS="6.1">
<Description>A vulnerability classified as problematic was found in Opencaching Deutschland oc-server3. This vulnerability affects unknown code of the file htdocs/templates2/ocstyle/cachelists.tpl of the component Cachelist Handler. The manipulation of the argument name_filter/by_filter leads to cross site scripting. The attack can be initiated remotely. The name of the patch is a9f79c7da78cd24a7ef1d298e6bc86006972ea73. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-216172.</Description>
<URL>https://github.com/OpencachingDeutschland/oc-server3/commit/a9f79c7da78cd24a7ef1d298e6bc86006972ea73</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4587" CVSS="5.4">
<Description>A vulnerability, which was classified as problematic, has been found in Opencaching Deutschland oc-server3. This issue affects some unknown processing of the file htdocs/templates2/ocstyle/login.tpl of the component Login Page. The manipulation of the argument username leads to cross site scripting. The attack may be initiated remotely. The name of the patch is 3296ebd61e7fe49e93b5755d5d7766d6e94a7667. It is recommended to apply a patch to fix this issue. The identifier VDB-216173 was assigned to this vulnerability.</Description>
<URL>https://github.com/OpencachingDeutschland/oc-server3/commit/3296ebd61e7fe49e93b5755d5d7766d6e94a7667</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4588" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, was found in Boston Sleep slice up to 84.1.x. Affected is an unknown function of the component Layout Handler. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 84.2.0 is able to address this issue. The name of the patch is 6523bb17d889e2ab13d767f38afefdb37083f1d0. It is recommended to upgrade the affected component. VDB-216174 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/sleepepi/slice/commit/6523bb17d889e2ab13d767f38afefdb37083f1d0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4590" CVSS="6.1">
<Description>A vulnerability was found in mschaef toto up to 1.4.20. It has been classified as problematic. This affects an unknown part of the component Todo List Handler. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 1.4.21 is able to address this issue. The name of the patch is fdc825ac5249f40683377e8a526a06cdc6870125. It is recommended to upgrade the affected component. The identifier VDB-216177 was assigned to this vulnerability.</Description>
<URL>https://github.com/mschaef/toto/commit/fdc825ac5249f40683377e8a526a06cdc6870125</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4591" CVSS="6.1">
<Description>A vulnerability was found in mschaef toto up to 1.4.20. It has been declared as problematic. This vulnerability affects unknown code of the component Email Parameter Handler. The manipulation leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 1.4.21 is able to address this issue. The name of the patch is 1f27f37c1a06f54a76971f70eaa6139dc139bdf9. It is recommended to upgrade the affected component. VDB-216178 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/mschaef/toto/commit/1f27f37c1a06f54a76971f70eaa6139dc139bdf9</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4593" CVSS="6.1">
<Description>A vulnerability was found in retra-system. It has been classified as problematic. Affected is an unknown function. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. The name of the patch is a6d94ab88f4a6f631a14c59b72461140fb57ae1f. It is recommended to apply a patch to fix this issue. VDB-216186 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/retra/retra-system/commit/a6d94ab88f4a6f631a14c59b72461140fb57ae1f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-46147" CVSS="6.1">
<Description>Drag and Drop XBlock v2 implements a drag-and-drop style problem, where a learner has to drag items to zones on a target image. Versions prior to 3.0.0 are vulnerable to cross-site scripting in multiple XBlock Fields. Any platform that has deployed the XBlock may be impacted. Version 3.0.0 contains a patch for this issue. There are no known workarounds.</Description>
<URL>https://github.com/openedx/xblock-drag-and-drop-v2/commit/68887d1b4a44325d2de7573d450e41129ba98b1a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-46165" CVSS="5.4">
<Description>Syncthing is an open source, continuous file synchronization program. In versions prior to 1.23.5 a compromised instance with shared folders could sync malicious files which contain arbitrary HTML and JavaScript in the name. If the owner of another device looks over the shared folder settings and moves the mouse over the latest sync, a script could be executed to change settings for shared folders or add devices automatically. Additionally adding a new device with a malicious name could embed HTML or JavaScript inside parts of the page. As a result the webUI may be subject to a stored cross site scripting attack. This issue has been addressed in version 1.23.5. Users are advised to upgrade. Users unable to upgrade should avoid sharing folders with untrusted users.</Description>
<URL>https://github.com/syncthing/syncthing/commit/73c52eafb6566435dffd979c3c49562b6d5a4238</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4631" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, was found in WP-Ban. Affected is an unknown function of the file ban-options.php. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. The name of the patch is 22b925449c84faa9b7496abe4f8f5661cb5eb3bf. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-216480.</Description>
<URL>https://github.com/lesterchan/wp-ban/commit/22b925449c84faa9b7496abe4f8f5661cb5eb3bf</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4632" CVSS="6.1">
<Description>A vulnerability has been found in Auto Upload Images up to 3.3.0 and classified as problematic. Affected by this vulnerability is an unknown functionality. The manipulation leads to cross site scripting. The attack can be launched remotely. Upgrading to version 3.3.1 is able to address this issue. The name of the patch is 895770ee93887ec78429c78ffdfb865bee6f9436. It is recommended to upgrade the affected component. The identifier VDB-216481 was assigned to this vulnerability.</Description>
<URL>https://github.com/airani/wp-auto-upload/commit/895770ee93887ec78429c78ffdfb865bee6f9436</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4637" CVSS="6.1">
<Description>A vulnerability classified as problematic has been found in ep3-bs up to 1.7.x. This affects an unknown part. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 1.8.0 is able to address this issue. The name of the patch is ef49e709c8adecc3a83cdc6164a67162991d2213. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-216495.</Description>
<URL>https://github.com/tkrebs/ep3-bs/commit/ef49e709c8adecc3a83cdc6164a67162991d2213</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4638" CVSS="6.1">
<Description>A vulnerability classified as problematic was found in collective.contact.widget up to 1.12. This vulnerability affects the function title of the file src/collective/contact/widget/widgets.py. The manipulation leads to cross site scripting. The attack can be initiated remotely. The name of the patch is 5da36305ca7ed433782be8901c47387406fcda12. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-216496.</Description>
<URL>https://github.com/collective/collective.contact.widget/commit/5da36305ca7ed433782be8901c47387406fcda12</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4642" CVSS="5.4">
<Description>A vulnerability was found in tatoeba2. It has been classified as problematic. This affects an unknown part of the component Profile Name Handler. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. The exploit has been disclosed to the public and may be used. Upgrading to version prod_2022-10-30 is able to address this issue. The name of the patch is 91110777fc8ddf1b4a2cf4e66e67db69b9700361. It is recommended to upgrade the affected component. The identifier VDB-216501 was assigned to this vulnerability.</Description>
<URL>https://github.com/Tatoeba/tatoeba2/commit/91110777fc8ddf1b4a2cf4e66e67db69b9700361</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4727" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, was found in OpenMRS Appointment Scheduling Module up to 1.16.x. This affects the function getNotes of the file api/src/main/java/org/openmrs/module/appointmentscheduling/AppointmentRequest.java of the component Notes Handler. The manipulation of the argument notes leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 1.17.0 is able to address this issue. The name of the patch is 2ccbe39c020809765de41eeb8ee4c70b5ec49cc8. It is recommended to upgrade the affected component. The identifier VDB-216741 was assigned to this vulnerability.</Description>
<URL>https://github.com/openmrs/openmrs-module-appointmentscheduling/commit/2ccbe39c020809765de41eeb8ee4c70b5ec49cc8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4728" CVSS="5.4">
<Description>A vulnerability has been found in Graphite Web and classified as problematic. This vulnerability affects unknown code of the component Cookie Handler. The manipulation leads to cross site scripting. The attack can be initiated remotely. The exploit has been disclosed to the public and may be used. The name of the patch is 2f178f490e10efc03cd1d27c72f64ecab224eb23. It is recommended to apply a patch to fix this issue. VDB-216742 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/graphite-project/graphite-web/commit/2f178f490e10efc03cd1d27c72f64ecab224eb23</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4729" CVSS="5.4">
<Description>A vulnerability was found in Graphite Web and classified as problematic. This issue affects some unknown processing of the component Template Name Handler. The manipulation leads to cross site scripting. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. The name of the patch is 2f178f490e10efc03cd1d27c72f64ecab224eb23. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-216743.</Description>
<URL>https://github.com/graphite-project/graphite-web/commit/2f178f490e10efc03cd1d27c72f64ecab224eb23</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4730" CVSS="5.4">
<Description>A vulnerability was found in Graphite Web. It has been classified as problematic. Affected is an unknown function of the component Absolute Time Range Handler. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. The name of the patch is 2f178f490e10efc03cd1d27c72f64ecab224eb23. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-216744.</Description>
<URL>https://github.com/graphite-project/graphite-web/commit/2f178f490e10efc03cd1d27c72f64ecab224eb23</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4731" CVSS="5.4">
<Description>A vulnerability, which was classified as problematic, was found in myapnea up to 29.0.x. Affected is an unknown function of the component Title Handler. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 29.1.0 is able to address this issue. The name of the patch is 99934258530d761bd5d09809bfa6c14b598f8d18. It is recommended to upgrade the affected component. VDB-216750 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/myapnea/myapnea.org/commit/99934258530d761bd5d09809bfa6c14b598f8d18</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4735" CVSS="6.1">
<Description>A vulnerability classified as problematic was found in asrashley dash-live. This vulnerability affects the function ready of the file static/js/media.js of the component DOM Node Handler. The manipulation leads to cross site scripting. The attack can be initiated remotely. The name of the patch is 24d01757a5319cc14c4aa1d8b53d1ab24d48e451. It is recommended to apply a patch to fix this issue. VDB-216766 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/asrashley/dash-live/commit/24d01757a5319cc14c4aa1d8b53d1ab24d48e451</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4736" CVSS="6.1">
<Description>A vulnerability was found in Venganzas del Pasado and classified as problematic. Affected by this issue is some unknown functionality. The manipulation of the argument the_title leads to cross site scripting. The attack may be launched remotely. The name of the patch is 62339b2ec445692c710b804bdf07aef4bd247ff7. It is recommended to apply a patch to fix this issue. VDB-216770 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/jschwindt/Venganzas-del-Pasado/commit/62339b2ec445692c710b804bdf07aef4bd247ff7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4755" CVSS="6.1">
<Description>A vulnerability was found in FlatPress and classified as problematic. This issue affects the function main of the file fp-plugins/mediamanager/panels/panel.mediamanager.file.php of the component Media Manager Plugin. The manipulation of the argument mm-newgallery-name leads to cross site scripting. The attack may be initiated remotely. The name of the patch is d3f329496536dc99f9707f2f295d571d65a496f5. It is recommended to apply a patch to fix this issue. The identifier VDB-216869 was assigned to this vulnerability.</Description>
<URL>https://github.com/flatpressblog/flatpress/commit/d3f329496536dc99f9707f2f295d571d65a496f5</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-47928" CVSS="6.1">
<Description>In MISP before 2.4.167, there is XSS in the template file uploads in app/View/Templates/upload_file.ctp.</Description>
<URL>https://github.com/MISP/MISP/commit/684d3e51398d4ea032b06fa4a1cd2bdf7d8b0ede</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4819" CVSS="6.1">
<Description>A vulnerability was found in HotCRP. It has been rated as problematic. Affected by this issue is some unknown functionality. The manipulation leads to cross site scripting. The attack may be launched remotely. The name of the patch is d4ffdb0ef806453c54ddca7fdda3e5c60356285c. It is recommended to apply a patch to fix this issue. VDB-216998 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/kohler/hotcrp/commit/d4ffdb0ef806453c54ddca7fdda3e5c60356285c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4820" CVSS="6.1">
<Description>A vulnerability classified as problematic has been found in FlatPress. This affects an unknown part of the file admin/panels/entry/admin.entry.list.php of the component Admin Area. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. The name of the patch is 229752b51025e678370298284d42f8ebb231f67f. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-216999.</Description>
<URL>https://github.com/flatpressblog/flatpress/commit/229752b51025e678370298284d42f8ebb231f67f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4821" CVSS="6.1">
<Description>A vulnerability classified as problematic was found in FlatPress. This vulnerability affects the function onupload of the file admin/panels/uploader/admin.uploader.php of the component XML File Handler/MD File Handler. The manipulation leads to cross site scripting. The attack can be initiated remotely. The name of the patch is 3cc223dec5260e533a84b5cf5780d3a4fbf21241. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-217000.</Description>
<URL>https://github.com/flatpressblog/flatpress/commit/3cc223dec5260e533a84b5cf5780d3a4fbf21241</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4822" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in FlatPress. This issue affects some unknown processing of the file setup/lib/main.lib.php of the component Setup. The manipulation leads to cross site scripting. The attack may be initiated remotely. The name of the patch is 5f23b4c2eac294cc0ba5e541f83a6f8a26f9fed1. It is recommended to apply a patch to fix this issue. The identifier VDB-217001 was assigned to this vulnerability.</Description>
<URL>https://github.com/flatpressblog/flatpress/commit/5f23b4c2eac294cc0ba5e541f83a6f8a26f9fed1</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-48345" CVSS="6.1">
<Description>sanitize-url (aka @braintree/sanitize-url) before 6.0.2 allows XSS via HTML entities.</Description>
<URL>https://github.com/braintree/sanitize-url/commit/d4bdc89f1743fe3cdb7c3f24b06e4c875f349b0c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4859" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in Joget up to 7.0.33. This issue affects the function submitForm of the file wflow-core/src/main/java/org/joget/plugin/enterprise/UserProfileMenu.java of the component User Profile Menu. The manipulation of the argument firstName/lastName leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 7.0.34 is able to address this issue. The patch is named 9a77f508a2bf8cf661d588f37a4cc29ecaea4fc8. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-217055.</Description>
<URL>https://github.com/jogetworkflow/jw-community/commit/9a77f508a2bf8cf661d588f37a4cc29ecaea4fc8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4875" CVSS="6.1">
<Description>A vulnerability has been found in fossology and classified as problematic. This vulnerability affects unknown code. The manipulation of the argument sql/VarValue leads to cross site scripting. The attack can be initiated remotely. The patch is identified as 8e0eba001662c7eb35f045b70dd458a4643b4553. It is recommended to apply a patch to fix this issue. VDB-217426 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/fossology/fossology/commit/8e0eba001662c7eb35f045b70dd458a4643b4553</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4876" CVSS="6.1">
<Description>A vulnerability was found in Kaltura mwEmbed up to 2.96.rc1 and classified as problematic. This issue affects some unknown processing of the file includes/DefaultSettings.php. The manipulation of the argument HTTP_X_FORWARDED_HOST leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 2.96.rc2 is able to address this issue. The patch is named 13b8812ebc8c9fa034eed91ab35ba8423a528c0b. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-217427.</Description>
<URL>https://github.com/kaltura/mwEmbed/commit/13b8812ebc8c9fa034eed91ab35ba8423a528c0b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4877" CVSS="6.1">
<Description>A vulnerability has been found in snoyberg keter up to 1.8.1 and classified as problematic. This vulnerability affects unknown code of the file Keter/Proxy.hs. The manipulation of the argument host leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 1.8.2 is able to address this issue. The name of the patch is d41f3697926b231782a3ad8050f5af1ce5cc40b7. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-217444.</Description>
<URL>https://github.com/snoyberg/keter/commit/d41f3697926b231782a3ad8050f5af1ce5cc40b7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4881" CVSS="5.4">
<Description>A vulnerability was found in CapsAdmin PAC3. It has been rated as problematic. Affected by this issue is some unknown functionality of the file lua/pac3/core/shared/http.lua. The manipulation of the argument url leads to cross site scripting. The attack may be launched remotely. The patch is identified as 8fc9e12dfa21d757be6eb4194c763e848b299ac0. It is recommended to apply a patch to fix this issue. VDB-217646 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/CapsAdmin/pac3/commit/8fc9e12dfa21d757be6eb4194c763e848b299ac0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4882" CVSS="4.7">
<Description>A vulnerability was found in kaltura mwEmbed up to 2.91. It has been rated as problematic. Affected by this issue is some unknown functionality of the file modules/KalturaSupport/components/share/share.js of the component Share Plugin. The manipulation of the argument res leads to cross site scripting. The attack may be launched remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The exploit has been disclosed to the public and may be used. Upgrading to version 2.92.rc1 is able to address this issue. The name of the patch is 4f11b6f6610acd6d89de5f8be47cf7c610643845. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-217664.</Description>
<URL>https://github.com/kaltura/mwEmbed/commit/4f11b6f6610acd6d89de5f8be47cf7c610643845</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4892" CVSS="6.1">
<Description>A vulnerability was found in MyCMS. It has been classified as problematic. This affects the function build_view of the file lib/gener/view.php of the component Visitors Module. The manipulation of the argument original/converted leads to cross site scripting. It is possible to initiate the attack remotely. The patch is named d64fcba4882a50e21cdbec3eb4a080cb694d26ee. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-218895.</Description>
<URL>https://github.com/andrzuk/MyCMS/commit/d64fcba4882a50e21cdbec3eb4a080cb694d26ee</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4902" CVSS="6.1">
<Description>A vulnerability classified as problematic has been found in eXo Chat Application. Affected is an unknown function of the file application/src/main/webapp/vue-app/components/ExoChatMessageComposer.vue of the component Mention Handler. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 3.3.0-20220417 is able to address this issue. The name of the patch is 26bf307d3658d1403cfd5c3ad423ce4c4d1cb2dc. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-220212.</Description>
<URL>https://github.com/exoplatform/chat-application/commit/26bf307d3658d1403cfd5c3ad423ce4c4d1cb2dc</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4905" CVSS="6.1">
<Description>A vulnerability was found in UDX Stateless Media Plugin 3.1.1 on WordPress. It has been declared as problematic. This vulnerability affects the function setup_wizard_interface of the file lib/classes/class-settings.php. The manipulation of the argument settings leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 3.2.0 is able to address this issue. The patch is identified as 6aee7ae0b0beeb2232ce6e1c82aa7e2041ae151a. It is recommended to upgrade the affected component. VDB-220750 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/udx/wp-stateless/commit/6aee7ae0b0beeb2232ce6e1c82aa7e2041ae151a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4928" CVSS="6.1">
<Description>A vulnerability was found in icplayer up to 0.819. It has been declared as problematic. Affected by this vulnerability is the function AddonText_Selection_create of the file addons/Text_Selection/src/presenter.js. The manipulation leads to cross site scripting. The attack can be launched remotely. Upgrading to version 0.820 is able to address this issue. The identifier of the patch is 2223628e6db1df73f6d633d2c0422d995990f0a3. It is recommended to upgrade the affected component. The identifier VDB-222289 was assigned to this vulnerability.</Description>
<URL>https://github.com/icplayer/icplayer/commit/2223628e6db1df73f6d633d2c0422d995990f0a3</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4929" CVSS="6.1">
<Description>A vulnerability was found in icplayer up to 0.818. It has been rated as problematic. Affected by this issue is some unknown functionality of the file addons/Commons/src/tts-utils.js. The manipulation leads to cross site scripting. The attack may be launched remotely. Upgrading to version 0.819 is able to address this issue. The patch is identified as fa785969f213c76384f1fe67d47b17d57fcc60c8. It is recommended to upgrade the affected component. VDB-222290 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/icplayer/icplayer/commit/fa785969f213c76384f1fe67d47b17d57fcc60c8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4930" CVSS="5.4">
<Description>A vulnerability classified as problematic was found in nuxsmin sysPass up to 3.2.4. Affected by this vulnerability is an unknown functionality of the component URL Handler. The manipulation leads to cross site scripting. The attack can be launched remotely. Upgrading to version 3.2.5 is able to address this issue. The patch is named 4da4d031732ecca67519851fd0c34597dbb8ee55. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-222319.</Description>
<URL>https://github.com/nuxsmin/sysPass/commit/4da4d031732ecca67519851fd0c34597dbb8ee55</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4942" CVSS="6.1">
<Description>A vulnerability was found in mportuga eslint-detailed-reporter up to 0.9.0 and classified as problematic. Affected by this issue is the function renderIssue in the library lib/template-generator.js. The manipulation of the argument message leads to cross site scripting. The attack may be launched remotely. The patch is identified as 505c190efd4905990db6207863bdcbd9b1d7e1bd. It is recommended to apply a patch to fix this issue. VDB-226310 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/mportuga/eslint-detailed-reporter/commit/505c190efd4905990db6207863bdcbd9b1d7e1bd</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2022-4957" CVSS="6.1">
<Description>A vulnerability was found in librespeed speedtest up to 5.2.4. It has been declared as problematic. Affected by this vulnerability is an unknown functionality of the file results/stats.php. The manipulation of the argument id leads to cross site scripting. The attack can be launched remotely. Upgrading to version 5.2.5 is able to address this issue. The patch is named a85f2c086f3449dffa8fe2edb5e2ef3ee72dc0e9. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-246643.</Description>
<URL>https://github.com/librespeed/speedtest/commit/a85f2c086f3449dffa8fe2edb5e2ef3ee72dc0e9</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-0327" CVSS="6.1">
<Description>A vulnerability was found in saemorris TheRadSystem. It has been classified as problematic. Affected is an unknown function of the file users.php. The manipulation of the argument q leads to cross site scripting. It is possible to launch the attack remotely. VDB-218454 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/saemorris/TheRadSystem/commit/bfba26bd34af31648a11af35a0bb66f1948752a6</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-0549" CVSS="5.4">
<Description>A vulnerability, which was classified as problematic, has been found in YAFNET up to 3.1.10. This issue affects some unknown processing of the file /forum/PostPrivateMessage of the component Private Message Handler. The manipulation of the argument subject/message leads to cross site scripting. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 3.1.11 is able to address this issue. The identifier of the patch is 2237a9d552e258a43570bb478a92a5505e7c8797. It is recommended to upgrade the affected component. The identifier VDB-219665 was assigned to this vulnerability.</Description>
<URL>https://github.com/YAFNET/YAFNET/commit/2237a9d552e258a43570bb478a92a5505e7c8797</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-0566" CVSS="4.8">
<Description> Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') in froxlor/froxlor prior to 2.0.10. </Description>
<URL>https://github.com/froxlor/froxlor/commit/bd5b99dc1c06f594b9563d459a50bf3b32504876</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-0650" CVSS="5.4">
<Description>A vulnerability was found in YAFNET up to 3.1.11 and classified as problematic. This issue affects some unknown processing of the component Signature Handler. The manipulation leads to cross site scripting. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 3.1.12 is able to address this issue. The identifier of the patch is a1442a2bacc3335461b44c250e81f8d99c60735f. It is recommended to upgrade the affected component. The identifier VDB-220037 was assigned to this vulnerability.</Description>
<URL>https://github.com/YAFNET/YAFNET/commit/a1442a2bacc3335461b44c250e81f8d99c60735f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-1270" CVSS="5.4">
<Description>Cross-site Scripting in GitHub repository btcpayserver/btcpayserver prior to 1.8.3.</Description>
<URL>https://github.com/btcpayserver/btcpayserver/commit/7b5ce8f70c060b01990d3f7109e97e0144d878a4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-1761" CVSS="5.4">
<Description> Cross-site Scripting in GitHub repository thorsten/phpmyfaq prior to 3.1.12. </Description>
<URL>https://github.com/thorsten/phpmyfaq/commit/128ef85f8e3ab7869d3107aa4d0b6867b53391d7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-22462" CVSS="5.4">
<Description>Grafana is an open-source platform for monitoring and observability. On 2023-01-01 during an internal audit of Grafana, a member of the security team found a stored XSS vulnerability affecting the core plugin "Text". The stored XSS vulnerability requires several user interactions in order to be fully exploited. The vulnerability was possible due to React's render cycle that will pass though the unsanitized HTML code, but in the next cycle the HTML is cleaned up and saved in Grafana's database. An attacker needs to have the Editor role in order to change a Text panel to include JavaScript. Another user needs to edit the same Text panel, and click on "Markdown" or "HTML" for the code to be executed. This means that vertical privilege escalation is possible, where a user with Editor role can change to a known password for a user having Admin role if the user with Admin role executes malicious JavaScript viewing a dashboard. This issue has been patched in versions 9.2.10 and 9.3.4.</Description>
<URL>https://github.com/grafana/grafana/commit/db83d5f398caffe35c5846cfa7727d1a2a414165</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-22475" CVSS="6.1">
<Description> Canarytokens is an open source tool which helps track activity and actions on your network. A Cross-Site Scripting vulnerability was identified in the history page of triggered Canarytokens prior to sha-fb61290. An attacker who discovers an HTTP-based Canarytoken (a URL) can use this to execute Javascript in the Canarytoken's trigger history page (domain: canarytokens.org) when the history page is later visited by the Canarytoken's creator. This vulnerability could be used to disable or delete the affected Canarytoken, or view its activation history. It might also be used as a stepping stone towards revealing more information about the Canarytoken's creator to the attacker. For example, an attacker could recover the email address tied to the Canarytoken, or place Javascript on the history page that redirect the creator towards an attacker-controlled Canarytoken to show the creator's network location. This vulnerability is similar to CVE-2022-31113, but affected parameters reported differently from the Canarytoken trigger request. An attacker could only act on the discovered Canarytoken. This issue did not expose other Canarytokens or other Canarytoken creators. Canarytokens Docker images sha-fb61290 and later contain a patch for this issue. </Description>
<URL>https://github.com/thinkst/canarytokens/commit/fb612906f2217bbb8863199694891d16e20bad3e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-23630" CVSS="6.1">
<Description> Eta is an embedded JS templating engine that works inside Node, Deno, and the browser. XSS attack - anyone using the Express API is impacted. The problem has been resolved. Users should upgrade to version 2.0.0. As a workaround, don't pass user supplied things directly to `res.render`. </Description>
<URL>https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-23938" CVSS="4.8">
<Description>Tuleap is a Free & Source tool for end to end traceability of application and system developments. Affected versions are subject to a cross site scripting attack which can be injected in the name of a color of select box values of a tracker and then reflected in the tracker administration. Administrative privilege is required, but an attacker with tracker administration rights could use this vulnerability to force a victim to execute uncontrolled code in the context of their browser. This issue has been addressed in Tuleap Community Edition version 14.5.99.4. Users are advised to upgrade. There are no known workarounds for this issue.</Description>
<URL>https://github.com/Enalean/tuleap/commit/aacd5e798301f24f218298ec8236ec7bef0f5d52</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-24026" CVSS="6.1">
<Description>In MISP 2.4.167, app/webroot/js/event-graph.js has an XSS vulnerability via an event-graph preview payload.</Description>
<URL>https://github.com/MISP/MISP/commit/a46f794a136001101cbec84fccf3cc824e983493</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-24027" CVSS="6.1">
<Description>In MISP 2.4.167, app/webroot/js/action_table.js allows XSS via a network history name.</Description>
<URL>https://github.com/MISP/MISP/commit/72c5424034c378583d128fc1e769aae33fb1c8b9</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-24070" CVSS="6.1">
<Description>app/View/AuthKeys/authkey_display.ctp in MISP through 2.4.167 has an XSS in authkey add via a Referer field.</Description>
<URL>https://github.com/MISP/MISP/commit/f7238fe5e71ac065daa43c8607d02f8ac682f18f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-2475" CVSS="5.4">
<Description>A vulnerability was found in Dromara J2eeFAST up to 2.6.0 and classified as problematic. This issue affects some unknown processing of the component System Message Handler. The manipulation of the argument 主题 leads to cross site scripting. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. The patch is named 7a9e1a00e3329fdc0ae05f7a8257cce77037134d. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-227867.</Description>
<URL>https://gitee.com/dromara/J2EEFAST/commit/7a9e1a00e3329fdc0ae05f7a8257cce77037134d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-2476" CVSS="5.4">
<Description>A vulnerability was found in Dromara J2eeFAST up to 2.6.0. It has been classified as problematic. Affected is an unknown function of the component Announcement Handler. The manipulation of the argument 系统工具/公告管理 leads to cross site scripting. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. The name of the patch is 7a9e1a00e3329fdc0ae05f7a8257cce77037134d. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-227868.</Description>
<URL>https://gitee.com/dromara/J2EEFAST/commit/7a9e1a00e3329fdc0ae05f7a8257cce77037134d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-24811" CVSS="6.1">
<Description> Misskey is an open source, decentralized social media platform. In versions prior to 13.3.2 the URL preview function is subject to a cross site scripting vulnerability due to insufficient URL validation. Arbitrary JavaScript is executed when a malicious URL is loaded in the `View in Player` or `View in Window` preview. This has been fixed in version 13.3.2. Users are advised to upgrade. Users unable to upgrade should avoid usage of the `View in Player` or `View in Window` functions. </Description>
<URL>https://github.com/misskey-dev/misskey/commit/38f9d1e76428bea47c5944c440eab25428c7d99e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-24814" CVSS="6.1">
<Description>TYPO3 is a free and open source Content Management Framework released under the GNU General Public License. In affected versions the TYPO3 core component `GeneralUtility::getIndpEnv()` uses the unfiltered server environment variable `PATH_INFO`, which allows attackers to inject malicious content. In combination with the TypoScript setting `config.absRefPrefix=auto`, attackers can inject malicious HTML code to pages that have not been rendered and cached, yet. As a result, injected values would be cached and delivered to other website visitors (persisted cross-site scripting). Individual code which relies on the resolved value of `GeneralUtility::getIndpEnv('SCRIPT_NAME')` and corresponding usages (as shown below) are vulnerable as well. Additional investigations confirmed that at least Apache web server deployments using CGI (FPM, FCGI/FastCGI, and similar) are affected. However, there still might be the risk that other scenarios like nginx, IIS, or Apache/mod_php are vulnerable. The usage of server environment variable `PATH_INFO` has been removed from corresponding processings in `GeneralUtility::getIndpEnv()`. Besides that, the public property `TypoScriptFrontendController::$absRefPrefix` is encoded for both being used as a URI component and for being used as a prefix in an HTML context. This mitigates the cross-site scripting vulnerability. Users are advised to update to TYPO3 versions 8.7.51 ELTS, 9.5.40 ELTS, 10.4.35 LTS, 11.5.23 LTS and 12.2.0 which fix this problem. For users who are unable to patch in a timely manner the TypoScript setting `config.absRefPrefix` should at least be set to a static path value, instead of using auto - e.g. `config.absRefPrefix=/`. This workaround **does not fix all aspects of the vulnerability**, and is just considered to be an intermediate mitigation to the most prominent manifestation.</Description>
<URL>https://github.com/TYPO3/typo3/commit/0005a6fd86ab97eff8bf2e3a5828bf0e7cb6263a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-25172" CVSS="5.4">
<Description>Discourse is an open-source discussion platform. Prior to version 3.0.1 of the `stable` branch and version 3.1.0.beta2 of the `beta` and `tests-passed` branches, a maliciously crafted URL can be included in a user's full name field to to carry out cross-site scripting attacks on sites with a disabled or overly permissive CSP (Content Security Policy). Discourse's default CSP prevents this vulnerability. The vulnerability is patched in version 3.0.1 of the `stable` branch and version 3.1.0.beta2 of the `beta` and `tests-passed` branches. As a workaround, enable and/or restore your site's CSP to the default one provided with Discourse.</Description>
<URL>https://github.com/discourse/discourse/commit/1a5a6f66cb821ed29a737311d6fdc2eba5adc915</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-25825" CVSS="6.1">
<Description>ZoneMinder is a free, open source Closed-circuit television software application for Linux which supports IP, USB and Analog cameras. Versions prior to 1.36.33 are vulnerable to Cross-site Scripting. Log entries can be injected into the database logs, containing a malicious referrer field. This is unescaped when viewing the logs in the web ui. This issue is patched in version 1.36.33. </Description>
<URL>https://github.com/ZoneMinder/zoneminder/commit/4637eaf9ea530193e0897ec48899f5638bdd6d81</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-2591" CVSS="5.4">
<Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') in GitHub repository nilsteampassnet/teampass prior to 3.0.7.</Description>
<URL>https://github.com/nilsteampassnet/teampass/commit/57a977c6323656e5dc06ab5c227e75c3465a1a4a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-26040" CVSS="6.1">
<Description>Discourse is an open-source discussion platform. Between versions 3.1.0.beta2 and 3.1.0.beta3 of the `tests-passed` branch, editing or responding to a chat message containing malicious content could lead to a cross-site scripting attack. This issue is patched in version 3.1.0.beta3 of the `tests-passed` branch. There are no known workarounds.</Description>
<URL>https://github.com/discourse/discourse/commit/a373bf2a01488c206e7feb28a9d2361b22ce6e70</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-26480" CVSS="5.4">
<Description> XWiki Platform is a generic wiki platform. Starting in version 12.10, a user without script rights can introduce a stored cross-site scripting by using the Live Data macro. This has been patched in XWiki 14.9, 14.4.7, and 13.10.10. There are no known workarounds. </Description>
<URL>https://github.com/xwiki/xwiki-platform/commit/23d5ea9b23e84b5f3d1f1b2d5673fe8c774d0d79</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-26487" CVSS="6.1">
<Description> Vega is a visualization grammar, a declarative format for creating, saving, and sharing interactive visualization designs.`lassoAppend' function accepts 3 arguments and internally invokes `push` function on the 1st argument specifying array consisting of 2nd and 3rd arguments as `push` call argument. The type of the 1st argument is supposed to be an array, but it's not enforced. This makes it possible to specify any object with a `push` function as the 1st argument, `push` function can be set to any function that can be access via `event.view` (no all such functions can be exploited due to invalid context or signature, but some can, e.g. `console.log`). The issue is that`lassoAppend` doesn't enforce proper types of its arguments. This issue opens various XSS vectors, but exact impact and severity depends on the environment (e.g. Core JS `setImmediate` polyfill basically allows `eval`-like functionality). This issue was patched in 5.23.0. </Description>
<URL>https://github.com/vega/vega/commit/01adb034f24727d3bb321bbbb6696a7f4cd91689</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-27130" CVSS="4.8">
<Description>Cross Site Scripting vulnerability found in Typecho v.1.2.0 allows a remote attacker to execute arbitrary code via an arbitrarily supplied URL parameter.</Description>
<URL>https://github.com/typecho/typecho/commit/f9ede542c9052ba22a6096d8412e2f02d9de872b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-27472" CVSS="6.1">
<Description> quickentity-editor-next is an open source, system local, video game asset editor. In affected versions HTML tags in entity names are not sanitised (XSS vulnerability). Allows arbitrary code execution within the browser sandbox, among other things, simply from loading a file containing a script tag in any entity name. This issue has been patched in version 1.28.1 of the application. Users are advised to upgrade. There are no known workarounds for this vulnerability.</Description>
<URL>https://github.com/atampy25/quickentity-editor-next/commit/5303b45a20a6e4e9318729b8dd7bbf09b37b369d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-28106" CVSS="4.8">
<Description>Pimcore is an open source data and experience management platform. Prior to version 10.5.19, an attacker can use cross-site scripting to send a malicious script to an unsuspecting user. Users may upgrade to version 10.5.19 to receive a patch or, as a workaround, apply the patch manually.</Description>
<URL>https://github.com/pimcore/pimcore/commit/c59d0bf1d03a5037b586fe06230694fa3818dbf2</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-2817" CVSS="5.4">
<Description>A post-authentication stored cross-site scripting vulnerability exists in Craft CMS versions <= 4.4.11. HTML, including script tags can be injected into field names which, when the field is added to a category or section, will trigger when users visit the Categories or Entries pages respectively.</Description>
<URL>https://github.com/craftcms/cms/commit/7655e1009ba6cdbfb230e6bb138b775b69fc7bcb</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-28606" CVSS="6.1">
<Description>js/event-graph.js in MISP before 2.4.169 allows XSS via event-graph node tooltips.</Description>
<URL>https://github.com/MISP/MISP/commit/30255b8d683df4ec54f856282b3bde9106d5ae1a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-28607" CVSS="6.1">
<Description>js/event-graph.js in MISP before 2.4.169 allows XSS via the event-graph relationship tooltip.</Description>
<URL>https://github.com/MISP/MISP/commit/78f423451a4c795991e739ee970bc5215c061591</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-28629" CVSS="5.4">
<Description>GoCD is an open source continuous delivery server. GoCD versions before 23.1.0 are vulnerable to a stored XSS vulnerability, where pipeline configuration with a malicious pipeline label configuration can affect browser display of pipeline runs generated from that configuration. An attacker that has permissions to configure GoCD pipelines could include JavaScript elements within the label template, causing a XSS vulnerability to be triggered for any users viewing the Value Stream Map or Job Details for runs of the affected pipeline, potentially allowing them to perform arbitrary actions within the victim's browser context rather than their own. This issue has been fixed in GoCD 23.1.0. Users are advised to upgrade. There are no known workarounds for this vulnerability.</Description>
<URL>https://github.com/gocd/gocd/commit/95f758229d419411a38577608709d8552cccf193</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-28851" CVSS="5.4">
<Description>Silverstripe Form Capture provides a method to capture simple silverstripe forms and an admin interface for users. Starting in version 0.2.0 and prior to versions 1.0.2, 1.1.0, 2.2.5, and 3.1.1, improper escaping when presenting stored form submissions allowed for an attacker to perform a Cross-Site Scripting attack. The vulnerability was initially patched in version 1.0.2, and version 1.1.0 includes this patch. The bug was then accidentally re-introduced during a merge error, and has been re-patched in versions 2.2.5 and 3.1.1. There are no known workarounds for this vulnerability.</Description>
<URL>https://github.com/bigfork/silverstripe-form-capture/commit/5b3aa39dd1eef042f173167b0fa4d3f717971772</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="80">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-28884" CVSS="6.1">
<Description>In MISP 2.4.169, app/Lib/Tools/CustomPaginationTool.php allows XSS in the community index.</Description>
<URL>https://github.com/MISP/MISP/commit/b94c7978e5e6b1db369abeedbbf00bca975b08b7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-29014" CVSS="6.1">
<Description>The Goobi viewer is a web application that allows digitised material to be displayed in a web browser. A reflected cross-site scripting vulnerability has been identified in Goobi viewer core prior to version 23.03 when evaluating the LOGID parameter. An attacker could trick a user into following a specially crafted link to a Goobi viewer installation, resulting in the execution of malicious script code in the user's browser. The vulnerability has been fixed in version 23.03.</Description>
<URL>https://github.com/intranda/goobi-viewer-core/commit/c29efe60e745a94d03debc17681c4950f3917455</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-29015" CVSS="6.1">
<Description>The Goobi viewer is a web application that allows digitised material to be displayed in a web browser. A cross-site scripting vulnerability has been identified in the user comment feature of Goobi viewer core prior to version 23.03. An attacker could create a specially crafted comment, resulting in the execution of malicious script code in the user's browser when displaying the comment. The vulnerability has been fixed in version 23.03.</Description>
<URL>https://github.com/intranda/goobi-viewer-core/commit/f0ccde2d469efd9597c3062d00177a63341f2256</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-29016" CVSS="6.1">
<Description>The Goobi viewer is a web application that allows digitised material to be displayed in a web browser. A cross-site scripting vulnerability has been identified in Goobi viewer core prior to version 23.03 when using nicknames. An attacker could create a user account and enter malicious scripts into their profile's nickname, resulting in the execution in the user's browser when displaying the nickname on certain pages. The vulnerability has been fixed in version 23.03.</Description>
<URL>https://github.com/intranda/goobi-viewer-core/commit/8eadb32b3fdcb775678b74d95bc3df018a5d5238</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-30609" CVSS="4.7">
<Description>matrix-react-sdk is a react-based SDK for inserting a Matrix chat/VoIP client into a web page. Prior to version 3.71.0, plain text messages containing HTML tags are rendered as HTML in the search results. To exploit this, an attacker needs to trick a user into searching for a specific message containing an HTML injection payload. No cross-site scripting attack is possible due to the hardcoded content security policy. Version 3.71.0 of the SDK patches over the issue. As a workaround, restarting the client will clear the HTML injection.</Description>
<URL>https://github.com/matrix-org/matrix-react-sdk/commit/bf182bc94556849d7acdfa0e5fdea2aa129ea826</URL>
<CWE ID="74">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Command Injection"/>
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Query Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Parameter Injection"/>
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="File Injection"/>
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Parameter Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="File Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Query Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Command Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-30614" CVSS="6.1">
<Description>Pay is a payments engine for Ruby on Rails 6.0 and higher. In versions prior to 6.3.2 a payments info page of Pay is susceptible to reflected Cross-site scripting. An attacker could create a working URL that renders a javascript link to a user on a Rails application that integrates Pay. This URL could be distributed via email to specifically target certain individuals. If the targeted application contains a functionality to submit user-generated content (such as comments) the attacker could even distribute the URL using that functionality. This has been patched in version 6.3.2 and above. Users are advised to upgrade. There are no known workarounds for this vulnerability.</Description>
<URL>https://github.com/pay-rails/pay/commit/5d6283a24062bd272a524ec48415f536a67ad57f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-30626" CVSS="8.1">
<Description>Jellyfin is a free-software media system. Versions starting with 10.8.0 and prior to 10.8.10 and prior have a directory traversal vulnerability inside the `ClientLogController`, specifically `/ClientLog/Document`. When combined with a cross-site scripting vulnerability (CVE-2023-30627), this can result in file write and arbitrary code execution. Version 10.8.10 has a patch for this issue. There are no known workarounds.</Description>
<URL>https://github.com/jellyfin/jellyfin/commit/82ad2633fdfb1c37a158057c7935f83e1129eda7</URL>
<CWE ID="22">
<MainWeakness Cause="Under-Restrictive Policy" Operation="Sanitize" Consequence="File Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
<Failure Comment="Directory Traversal Injection">Data Tempering (TPR)</Failure>
<Failure Comment="Directory Traversal Injection">Information Exposure (IEX)</Failure>
</CVE>
<CVE ID="CVE-2023-3085" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in X-WRT luci up to 22.10_b202303061504. This issue affects the function run_action of the file modules/luci-base/ucode/dispatcher.uc of the component 404 Error Template Handler. The manipulation of the argument request_path leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 22.10_b202303121313 is able to address this issue. The patch is named 24d7da2416b9ab246825c33c213fe939a89b369c. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-230663.</Description>
<URL>https://github.com/x-wrt/luci/commit/24d7da2416b9ab246825c33c213fe939a89b369c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-31126" CVSS="9.6">
<Description>`org.xwiki.commons:xwiki-commons-xml` is an XML library used by the open-source wiki platform XWiki. The HTML sanitizer, introduced in version 14.6-rc-1, allows the injection of arbitrary HTML code and thus cross-site scripting via invalid data attributes. This vulnerability does not affect restricted cleaning in HTMLCleaner as there attributes are cleaned and thus characters like `/` and `>` are removed in all attribute names. This problem has been patched in XWiki 14.10.4 and 15.0 RC1 by making sure that data attributes only contain allowed characters. There are no known workarounds apart from upgrading to a version including the fix.</Description>
<URL>https://github.com/xwiki/xwiki-commons/commit/0b8e9c45b7e7457043938f35265b2aa5adc76a68</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="86">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-31144" CVSS="6.1">
<Description>Craft CMS is a content management system. Starting in version 3.0.0 and prior to versions 3.8.4 and 4.4.4, a malformed title in the feed widget can deliver a cross-site scripting payload. This issue is fixed in version 3.8.4 and 4.4.4.</Description>
<URL>https://github.com/craftcms/cms/commit/52bd161614620edbab2d24d078ca9ebca2528442</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-31285" CVSS="6.1">
<Description>An XSS issue was discovered in Serenity Serene (and StartSharp) before 6.7.0. When users upload temporary files, some specific file endings are not allowed, but it is possible to upload .html or .htm files containing an XSS payload. The resulting link can be sent to an administrator user.</Description>
<URL>https://github.com/serenity-is/Serenity/commit/11b9d267f840513d04b4f4d4876de7823a6e48d2</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-32325" CVSS="6.1">
<Description>PostHog-js is a library to interface with the PostHog analytics tool. Versions prior to 1.57.2 have the potential for cross-site scripting. Problem has been patched in 1.57.2. Users are advised to upgrade. Users unable to upgrade should ensure that their Content Security Policy is in place.</Description>
<URL>https://github.com/PostHog/posthog-js/commit/67e07eb8bb271a3a6f4aa251382e4d25abb385a0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-32685" CVSS="5.4">
<Description> Kanboard is project management software that focuses on the Kanban methodology. Due to improper handling of elements under the `contentEditable` element, maliciously crafted clipboard content can inject arbitrary HTML tags into the DOM. A low-privileged attacker with permission to attach a document on a vulnerable Kanboard instance can trick the victim into pasting malicious screenshot data and achieve cross-site scripting if CSP is improperly configured. This issue has been patched in version 1.2.29. </Description>
<URL>https://github.com/kanboard/kanboard/commit/26b6eebb78d4306e48b836a58f7c386251aa2bc7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-32766" CVSS="6.1">
<Description>Gitpod before 2022.11.3 allows XSS because redirection can occur for some protocols outside of the trusted set of three (vscode: vscode-insiders: jetbrains-gateway:).</Description>
<URL>https://github.com/gitpod-io/gitpod/commit/6771283c3406586e352337675b79ff2ca50f191b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-33186" CVSS="6.1">
<Description>Zulip is an open-source team collaboration tool with unique topic-based threading that combines the best of email and chat to make remote work productive and delightful. The main development branch of Zulip Server from May 2, 2023 and later, including beta versions 7.0-beta1 and 7.0-beta2, is vulnerable to a cross-site scripting vulnerability in tooltips on the message feed. An attacker who can send messages could maliciously craft a topic for the message, such that a victim who hovers the tooltip for that topic in their message feed triggers execution of JavaScript code controlled by the attacker.</Description>
<URL>https://github.com/zulip/zulip/commit/03cfb3d9fe61c975d133121ec31a7357f0c9e18f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-33194" CVSS="4.8">
<Description>Craft is a CMS for creating custom digital experiences on the web.The platform does not filter input and encode output in Quick Post validation error message, which can deliver an XSS payload. Old CVE fixed the XSS in label HTML but didn’t fix it when clicking save. This issue was patched in version 4.4.6.</Description>
<URL>https://github.com/craftcms/cms/commit/9d0cd0bda7c8a830a3373f8c0f06943e519ac888</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="80">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-33195" CVSS="6.1">
<Description> Craft is a CMS for creating custom digital experiences on the web. A malformed RSS feed can deliver an XSS payload. This issue was patched in version 4.4.6. </Description>
<URL>https://github.com/craftcms/cms/commit/b77cb3023bed4f4a37c11294c4d319ff9f598e1f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-34408" CVSS="5.4">
<Description>DokuWiki before 2023-04-04a allows XSS via RSS titles.</Description>
<URL>https://www.github.com/splitbrain/dokuwiki/commit/53df38b0e4465894a67a5890f74a6f5f82e827de</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-34446" CVSS="6.1">
<Description> iTop is an open source, web-based IT service management platform. Prior to versions 3.0.4 and 3.1.0, when displaying `pages/preferences.php`, cross site scripting is possible. This issue is fixed in versions 3.0.4 and 3.1.0. </Description>
<URL>https://github.com/Combodo/iTop/commit/e3ba826e5dfd3b724f1ee97bebfd20ded3c70b10</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-34447" CVSS="6.1">
<Description>iTop is an open source, web-based IT service management platform. Prior to versions 3.0.4 and 3.1.0, on `pages/UI.php`, cross site scripting is possible. This issue is fixed in versions 3.0.4 and 3.1.0.</Description>
<URL>https://github.com/Combodo/iTop/commit/519751faa10b2fc5b75ea4516a1b8ef13ca35b33</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-34461" CVSS="5.4">
<Description>PyBB is an open source bulletin board. A manual code review of the PyBB bulletin board server has revealed that a vulnerability could have been exploited in which users could submit any type of HTML tag, and have said tag run. For example, a malicious `<a>` that looks like ```<a href=javascript:alert (1)>xss</a>``` could have been used to run code through JavaScript on the client side. The problem has been patched as of commit `5defd92`, and users are advised to upgrade. Attackers do need posting privilege in order to exploit this vulnerability. This vulnerability is present within the 0.1.0 release, and users are advised to upgrade to 0.1.1. Users unable to upgrade may be able to work around the attack by either; Removing the ability to create posts, removing the `|safe` tag from the Jinja2 template titled "post.html" in templates or by adding manual validation of links in the post creation section.</Description>
<URL>https://github.com/benjjvi/PyBB/commit/5defd922ab05a193a783392d447c6538628cf854</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-34464" CVSS="5.4">
<Description>XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. Starting in version 2.2.1 until versions 14.4.8, 14.10.5, and 15.1RC1 of org.xwiki.platform:xwiki-platform-web and any version prior to 14.4.8, 14.10.5, and 15.1.RC1 of org.xwiki.platform:xwiki-platform-web-templates, any user who can edit a document in a wiki like the user profile can create a stored cross-site scripting attack. The attack occurs by putting plain HTML code into that document and then tricking another user to visit that document with the `displaycontent` or `rendercontent` template and plain output syntax. If a user with programming rights is tricked into visiting such a URL, arbitrary actions be performed with this user's rights, impacting the confidentiality, integrity, and availability of the whole XWiki installation. This has been patched in XWiki 14.4.8, 14.10.5 and 15.1RC1 by setting the content type of the response to plain text when the output syntax is not an HTML syntax.</Description>
<URL>https://github.com/xwiki/xwiki-platform/commit/53e8292a31ec70fba5e1d705a4ac443658b9e6df</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-35153" CVSS="5.4">
<Description>XWiki Platform is a generic wiki platform. Starting in version 5.4.4 and prior to versions 14.4.8, 14.10.4, and 15.0, a stored cross-site scripting vulnerability can be exploited by users with edit rights by adding a `AppWithinMinutes.FormFieldCategoryClass` class on a page and setting the payload on the page title. Then, any user visiting `/xwiki/bin/view/AppWithinMinutes/ClassEditSheet` executes the payload. The issue has been patched in XWiki 14.4.8, 14.10.4, and 15.0. As a workaround, update `AppWithinMinutes.ClassEditSheet` with a patch.</Description>
<URL>https://github.com/xwiki/xwiki-platform/commit/1b87fec1e5b5ec00b7a8c3c3f94f6c5e22547392#diff-79e725ec7125cced7d302e1a1f955a76745af26ef28a148981b810e85335d302</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="80">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-35156" CVSS="6.1">
<Description> XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. Users are able to forge an URL with a payload allowing to inject Javascript in the page (XSS). It's possible to exploit the delete template to perform a XSS, e.g. by using URL such as: > xwiki/bin/get/FlamingoThemes/Cerulean?xpage=xpart&vm=delete.vm&xredirect=javascript:alert(document.domain). This vulnerability exists since XWiki 6.0-rc-1. The vulnerability has been patched in XWiki 14.10.6 and 15.1. Note that a partial patch has been provided in 14.10.5 but wasn't enough to entirely fix the vulnerability. </Description>
<URL>https://github.com/xwiki/xwiki-platform/commit/13875a6437d4525ac4aeea25918f2d2dffac9ee1</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="87">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-35157" CVSS="4.8">
<Description>XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. It's possible to perform an XSS by forging a request to a delete attachment action with a specific attachment name. Now this XSS can be exploited only if the attacker knows the CSRF token of the user, or if the user ignores the warning about the missing CSRF token. The vulnerability has been patched in XWiki 15.1-rc-1 and XWiki 14.10.6.</Description>
<URL>https://github.com/xwiki/xwiki-platform/commit/35e9073ffec567861e0abeea072bd97921a3decf</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="80">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-35158" CVSS="6.1">
<Description>XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. Users are able to forge an URL with a payload allowing to inject Javascript in the page (XSS). It's possible to exploit the restore template to perform a XSS, e.g. by using URL such as: > /xwiki/bin/view/XWiki/Main?xpage=restore&showBatch=true&xredirect=javascript:alert(document.domain). This vulnerability exists since XWiki 9.4-rc-1. The vulnerability has been patched in XWiki 14.10.5 and 15.1-rc-1. </Description>
<URL>https://github.com/xwiki/xwiki-platform/commit/d5472100606c8355ed44ada273e91df91f682738</URL>
<CWE ID="87">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-35159" CVSS="6.1">
<Description>XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. Users are able to forge an URL with a payload allowing to inject Javascript in the page (XSS). It's possible to exploit the deletespace template to perform a XSS, e.g. by using URL such as: > xwiki/bin/deletespace/Sandbox/?xredirect=javascript:alert(document.domain). This vulnerability exists since XWiki 3.4-milestone-1. The vulnerability has been patched in XWiki 14.10.5 and 15.1-rc-1.</Description>
<URL>https://github.com/xwiki/xwiki-platform/commit/5c20ff5e3bdea50f1053fe99a27e011b8d0e4b34</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="87">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-35160" CVSS="6.1">
<Description>XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. Users are able to forge an URL with a payload allowing to inject Javascript in the page (XSS). It's possible to exploit the resubmit template to perform a XSS, e.g. by using URL such as: > xwiki/bin/view/XWiki/Main xpage=resubmit&resubmit=javascript:alert(document.domain)&xback=javascript:alert(document.domain). This vulnerability exists since XWiki 2.5-milestone-2. The vulnerability has been patched in XWiki 14.10.5 and 15.1-rc-1.</Description>
<URL>https://github.com/xwiki/xwiki-platform/commit/dbc92dcdace33823ffd1e1591617006cb5fc6a7f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="87">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-35161" CVSS="6.1">
<Description> XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. Users are able to forge an URL with a payload allowing to inject Javascript in the page (XSS). It's possible to exploit the DeleteApplication page to perform a XSS, e.g. by using URL such as: > xwiki/bin/view/AppWithinMinutes/DeleteApplication?appName=Menu&resolve=true&xredirect=javascript:alert(document.domain). This vulnerability exists since XWiki 6.2-milestone-1. The vulnerability has been patched in XWiki 14.10.5 and 15.1-rc-1. </Description>
<URL>https://github.com/xwiki/xwiki-platform/commit/8f5a889b7cd140770e54f5b4195d88058790e305</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="87">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-35162" CVSS="6.1">
<Description>XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. Users are able to forge an URL with a payload allowing to inject Javascript in the page (XSS). It's possible to exploit the previewactions template to perform a XSS, e.g. by using URL such as: > <hostname>/xwiki/bin/get/FlamingoThemes/Cerulean xpage=xpart&vm=previewactions.vm&xcontinue=javascript:alert(document.domain). This vulnerability exists since XWiki 6.1-rc-1. The vulnerability has been patched in XWiki 14.10.5 and 15.1-rc-1.</Description>
<URL>https://github.com/xwiki/xwiki-platform/commit/9f01166b1a8ee9639666099eb5040302df067e4d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-36463" CVSS="6.1">
<Description>Meldekarten generator is an open source project to create a program, running locally in the browser without the need for an internet-connection, to create, store and print registration cards for volunteers. All text fields on the webpage are vulnerable to XSS attacks. The user input isn't (fully) sanitized after submission. This issue has been addressed in commit `77e04f4af` which is included in the `1.0.0b1.1.2` release. Users are advised to upgrade. There are no known workarounds for this vulnerability. </Description>
<URL>https://github.com/jucktnich/meldekarten-generator/commit/77e04f4af85a6d0b08e616d40eaa81877a108c96</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-36477" CVSS="5.4">
<Description> XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. Any user with edit rights can edit all pages in the `CKEditor' space. This makes it possible to perform a variety of harmful actions, such as removing technical documents, leading to loss of service and editing the javascript configuration of CKEditor, leading to persistent XSS. This issue has been patched in XWiki 14.10.6 and XWiki 15.1. This issue has been patched on the CKEditor Integration extension 1.64.9 for XWiki version older than 14.6RC1. Users are advised to upgrade. Users unable to upgrade may manually address the issue by restricting the `edit` and `delete` rights to a trusted user or group (e.g. the `XWiki.XWikiAdminGroup` group), implicitly disabling those rights for all other users. See commit `9d9d86179` for details. </Description>
<URL>https://github.com/xwiki/xwiki-platform/commit/9d9d86179457cb8dc48b4491510537878800be4f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-36666" CVSS="6.1">
<Description>INEX IXP-Manager before 6.3.1 allows XSS. list-preamble.foil.php, page-header-preamble.foil.php, edit-form.foil.php, page-header-preamble.foil.php, overview.foil.php, cust.foil.php, and view.foil.php may be affected.</Description>
<URL>https://github.com/inex/IXP-Manager/commit/fddbc38adb477c9cd46a462655ffed96d3d42229</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-36823" CVSS="6.1">
<Description>Sanitize is an allowlist-based HTML and CSS sanitizer. Using carefully crafted input, an attacker may be able to sneak arbitrary HTML and CSS through Sanitize starting with version 3.0.0 and prior to version 6.0.2 when Sanitize is configured to use the built-in "relaxed" config or when using a custom config that allows `style` elements and one or more CSS at-rules. This could result in cross-site scripting or other undesired behavior when the malicious HTML and CSS are rendered in a browser. Sanitize 6.0.2 performs additional escaping of CSS in `style` element content, which fixes this issue. Users who are unable to upgrade can prevent this issue by using a Sanitize config that doesn't allow `style` elements, using a Sanitize config that doesn't allow CSS at-rules, or by manually escaping the character sequence `</` as `<\/` in `style` element content.</Description>
<URL>https://github.com/rgrove/sanitize/commit/76ed46e6dc70820f38efe27de8dabd54dddb5220</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-36828" CVSS="5.4">
<Description>Statamic is a flat-first, Laravel and Git powered content management system. Prior to version 4.10.0, the SVG tag does not sanitize malicious SVG. Therefore, an attacker can exploit this vulnerability to perform cross-site scripting attacks using SVG, even when using the `sanitize` function. Version 4.10.0 contains a patch for this issue.</Description>
<URL>https://github.com/statamic/cms/commit/c714893ad92de6e5ede17b501003441af505b30d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-37061" CVSS="4.8">
<Description>Chamilo 1.11.x up to 1.11.20 allows users with an admin privilege account to insert XSS in the languages management section.</Description>
<URL>https://github.com/chamilo/chamilo-lms/commit/75e9b3e0acac6f7a643da6ff19a00d55a94417a1</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-37062" CVSS="4.8">
<Description>Chamilo 1.11.x up to 1.11.20 allows users with admin privilege account to insert XSS in the course categories' definition.</Description>
<URL>https://github.com/chamilo/chamilo-lms/commit/c263933d1d958edee3999820f636c8cb919d03d1</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-37063" CVSS="4.8">
<Description>Chamilo 1.11.x up to 1.11.20 allows users with admin privilege account to insert XSS in the careers & promotions management section.</Description>
<URL>https://github.com/chamilo/chamilo-lms/commit/546a18b0bd1446123f4e29f81f42e71b761f51b7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-37064" CVSS="4.8">
<Description>Chamilo 1.11.x up to 1.11.20 allows users with admin privilege account to insert XSS in the extra fields management section.</Description>
<URL>https://github.com/chamilo/chamilo-lms/commit/91ecc6141de6de9483c5a31fbb9fa91450f24940</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-37065" CVSS="4.8">
<Description>Chamilo 1.11.x up to 1.11.20 allows users with admin privilege account to insert XSS in the session category management section.</Description>
<URL>https://github.com/chamilo/chamilo-lms/commit/da61f287d2e508a5e940953b474051d0f21e91c0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-37066" CVSS="4.8">
<Description>Chamilo 1.11.x up to 1.11.20 allows users with admin privilege account to insert XSS in the skills wheel.</Description>
<URL>https://github.com/chamilo/chamilo-lms/commit/4f7b5ebf90c35999917c231276e47a4184275690</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-37067" CVSS="4.8">
<Description>Chamilo 1.11.x up to 1.11.20 allows users with admin privilege account to insert XSS in the classes/usergroups management section.</Description>
<URL>https://github.com/chamilo/chamilo-lms/commit/c75ff227bcf00e9f88e9477b78eaeed9e0668905</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-37298" CVSS="6.1">
<Description>Joplin before 2.11.5 allows XSS via a USE element in an SVG document.</Description>
<URL>https://github.com/laurent22/joplin/commit/caf66068bfc474bbfd505013076ed173cd90ca83</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-37299" CVSS="6.1">
<Description>Joplin before 2.11.5 allows XSS via an AREA element of an image map.</Description>
<URL>https://github.com/laurent22/joplin/commit/9e90d9016daf79b5414646a93fd369aedb035071</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-37905" CVSS="6.1">
<Description> ckeditor-wordcount-plugin is an open source WordCount Plugin for CKEditor. It has been discovered that the `ckeditor-wordcount-plugin` plugin for CKEditor4 is susceptible to cross-site scripting when switching to the source code mode. This issue has been addressed in version 1.17.12 of the `ckeditor-wordcount-plugin` plugin and users are advised to upgrade. There are no known workarounds for this vulnerability. </Description>
<URL>https://github.com/w8tcha/CKEditor-WordCount-Plugin/commit/0f03b3e5b7c1409998a13aba3a95396e6fa349d8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-37908" CVSS="9.6">
<Description>XWiki Rendering is a generic Rendering system that converts textual input in a given syntax into another syntax. The cleaning of attributes during XHTML rendering, introduced in version 14.6-rc-1, allowed the injection of arbitrary HTML code and thus cross-site scripting via invalid attribute names. This can be exploited, e.g., via the link syntax in any content that supports XWiki syntax like comments in XWiki. When a user moves the mouse over a malicious link, the malicious JavaScript code is executed in the context of the user session. When this user is a privileged user who has programming rights, this allows server-side code execution with programming rights, impacting the confidentiality, integrity and availability of the XWiki instance. While this attribute was correctly recognized as not allowed, the attribute was still printed with a prefix `data-xwiki-translated-attribute-` without further cleaning or validation. This problem has been patched in XWiki 14.10.4 and 15.0 RC1 by removing characters not allowed in data attributes and then validating the cleaned attribute again. There are no known workarounds apart from upgrading to a version including the fix.</Description>
<URL>https://github.com/xwiki/xwiki-rendering/commit/f4d5acac451dccaf276e69f0b49b72221eef5d2f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="83">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-38500" CVSS="6.1">
<Description>TYPO3 HTML Sanitizer is an HTML sanitizer, written in PHP, aiming to provide cross-site-scripting-safe markup based on explicitly allowed tags, attributes and values. Starting in version 1.0.0 and prior to versions 1.5.1 and 2.1.2, due to an encoding issue in the serialization layer, malicious markup nested in a `noscript` element was not encoded correctly. `noscript` is disabled in the default configuration, but might have been enabled in custom scenarios. This allows bypassing the cross-site scripting mechanism of TYPO3 HTML Sanitizer. Versions 1.5.1 and 2.1.2 fix the problem.</Description>
<URL>https://github.com/TYPO3/html-sanitizer/commit/e3026f589fef0be8c3574ee3f0a0bfbe33d7ebdb</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-38501" CVSS="6.1">
<Description>copyparty is file server software. Prior to version 1.8.7, the application contains a reflected cross-site scripting via URL-parameter `?k304=...` and `?setck=...`. The worst-case outcome of this is being able to move or delete existing files on the server, or upload new files, using the account of the person who clicks the malicious link. It is recommended to change the passwords of one's copyparty accounts, unless one have inspected one's logs and found no trace of attacks. Version 1.8.7 contains a patch for the issue.</Description>
<URL>https://github.com/9001/copyparty/commit/007d948cb982daa05bc6619cd20ee55b7e834c38</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-39007" CVSS="9.6">
<Description>/ui/cron/item/open in the Cron component of OPNsense Community Edition before 23.7 and Business Edition before 23.4.2 allows XSS via openAction in app/controllers/OPNsense/Cron/ItemController.php.</Description>
<URL>https://github.com/opnsense/core/commit/5edff49db1cd8b5078611e2f542d91c02af2b25c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-39518" CVSS="5.4">
<Description> social-media-skeleton is an uncompleted social media project implemented using PHP, MySQL, CSS, JavaScript, and HTML. Versions 1.0.0 until 1.0.3 have a stored cross-site scripting vulnerability. The problem is patched in v1.0.3. </Description>
<URL>https://github.com/fobybus/social-media-skeleton/commit/6765d1109016e1f1d707ef47917927c7704e6428</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-39527" CVSS="6.1">
<Description>PrestaShop is an open source e-commerce web application. Versions prior to 1.7.8.10, 8.0.5, and 8.1.1 are vulnerable to cross-site scripting through the `isCleanHTML` method. Versions 1.7.8.10, 8.0.5, and 8.1.1 contain a patch. There are no known workarounds.</Description>
<URL>https://github.com/PrestaShop/PrestaShop/commit/afc14f8eaa058b3e6a20ac43e033ee2656fb88b4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="116">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Command Injection"/>
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Parameter Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Parameter Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Command Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-40176" CVSS="5.4">
<Description>XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. Any registered user can exploit a stored XSS through their user profile by setting the payload as the value of the time zone user preference. Even though the time zone is selected from a drop down (no free text value) it can still be set from JavaScript (using the browser developer tools) or by calling the save URL on the user profile with the right query string. Once the time zone is set it is displayed without escaping which means the payload gets executed for any user that visits the malicious user profile, allowing the attacker to steal information and even gain more access rights (escalation to programming rights). This issue is present since version 4.1M2 when the time zone user preference was introduced. The issue has been fixed in XWiki 14.10.5 and 15.1RC1.</Description>
<URL>https://github.com/xwiki/xwiki-platform/commit/d11ca5d781f8a42a85bc98eb82306c1431e764d4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-40224" CVSS="6.1">
<Description>MISP 2.4.174 allows XSS in app/View/Events/index.ctp.</Description>
<URL>https://github.com/MISP/MISP/commit/0274f8b6332e82317c9529b583d03897adf5883e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-41048" CVSS="5.4">
<Description>plone.namedfile allows users to handle `File` and `Image` fields targeting, but not depending on, Plone Dexterity content. Prior to versions 5.6.1, 6.0.3, 6.1.3, and 6.2.1, there is a stored cross site scripting vulnerability for SVG images. A security hotfix from 2021 already partially fixed this by making sure SVG images are always downloaded instead of shown inline. But the same problem still exists for scales of SVG images. Note that an image tag with an SVG image as source is not vulnerable, even when the SVG image contains malicious code. To exploit the vulnerability, an attacker would first need to upload an image, and then trick a user into following a specially crafted link. Patches are available in versions 5.6.1 (for Plone 5.2), 6.0.3 (for Plone 6.0.0-6.0.4), 6.1.3 (for Plone 6.0.5-6.0.6), and 6.2.1 (for Plone 6.0.7). There are no known workarounds.</Description>
<URL>https://github.com/plone/plone.namedfile/commit/188f66a4577021cf8f2bf7c0f5150f9b9573f167</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="80">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-41098" CVSS="6.1">
<Description>An issue was discovered in MISP 2.4.174. In app/Controller/DashboardsController.php, a reflected XSS issue exists via the id parameter upon a dashboard edit.</Description>
<URL>https://github.com/MISP/MISP/commit/09fb0cba65eab9341e81f1cbebc2ae10be34a2b7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-42452" CVSS="5.4">
<Description>Mastodon is a free, open-source social network server based on ActivityPub. In versions on the 4.x branch prior to versions 4.0.10, 4.2.8, and 4.2.0-rc2, under certain conditions, attackers can abuse the translation feature to bypass the server-side HTML sanitization, allowing unescaped HTML to execute in the browser. The impact is limited thanks to Mastodon's strict Content Security Policy, blocking inline scripts, etc. However a CSP bypass or loophole could be exploited to execute malicious XSS. Furthermore, it requires user interaction, as this can only occur upon clicking the “Translate” button on a malicious post. Versions 4.0.10, 4.2.8, and 4.2.0-rc2 contain a patch for this issue.</Description>
<URL>https://github.com/mastodon/mastodon/commit/ff32475f5f4a84ebf9619e7eef5bf8b4c075d0e2</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-42458" CVSS="5.4">
<Description>Zope is an open-source web application server. Prior to versions 4.8.10 and 5.8.5, there is a stored cross site scripting vulnerability for SVG images. Note that an image tag with an SVG image as source is never vulnerable, even when the SVG image contains malicious code. To exploit the vulnerability, an attacker would first need to upload an image, and then trick a user into following a specially crafted link. Patches are available in Zope 4.8.10 and 5.8.5. As a workaround, make sure the "Add Documents, Images, and Files" permission is only assigned to trusted roles. By default, only the Manager has this permission.</Description>
<URL>https://github.com/zopefoundation/Zope/commit/26a55dbc301db417f47cafda6fe0f983b5690088</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="80">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-43647" CVSS="5.4">
<Description>baserCMS is a website development framework. Prior to version 4.8.0, there is a cross-site scripting vulnerability in the file upload feature of baserCMS. Version 4.8.0 contains a patch for this issue.</Description>
<URL>https://github.com/baserproject/basercms/commit/eb5977533d05db4f3bb03bd19630b66052799b2e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-4372" CVSS="5.4">
<Description>The LiteSpeed Cache plugin for WordPress is vulnerable to Stored Cross-Site Scripting via the 'esi' shortcode in versions up to, and including, 5.6 due to insufficient input sanitization and output escaping on user supplied attributes. This makes it possible for authenticated attackers with contributor-level and above permissions to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page.</Description>
<URL>https://github.com/litespeedtech/lscache_wp/commit/95a407d9f192b37ac6cf96d2aa50f240e3e6b2d7#diff-7b2c514b58d1b8a71655607bdfab87cedb013bc1b8927ce0b49a89ddf4a7e01cR495</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-43770" CVSS="6.1">
<Description>Roundcube before 1.4.14, 1.5.x before 1.5.4, and 1.6.x before 1.6.3 allows XSS via text/plain e-mail messages with crafted links because of program/lib/Roundcube/rcube_string_replacer.php behavior.</Description>
<URL>https://github.com/roundcube/roundcubemail/commit/e92ec206a886461245e1672d8530cc93c618a49b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-43797" CVSS="5.4">
<Description>BigBlueButton is an open-source virtual classroom. Prior to versions 2.6.11 and 2.7.0-beta.3, Guest Lobby was vulnerable to cross-site scripting when users wait to enter the meeting due to inserting unsanitized messages to the element using unsafe innerHTML. Text sanitizing was added for lobby messages starting in versions 2.6.11 and 2.7.0-beta.3. There are no known workarounds.</Description>
<URL>https://github.com/bigbluebutton/bigbluebutton/commit/304bc851a00558f99a908880f4ac44234a074c9d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-44272" CVSS="5.4">
<Description>A cross-site scripting vulnerability exists in Citadel versions prior to 994. When a malicious user sends an instant message with some JavaScript code, the script may be executed on the web browser of the victim user.</Description>
<URL>https://code.citadel.org/citadel/citadel/-/commit/f0dac5ff074ad686fa71ea663c8ead107bd3041e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-44275" CVSS="5.4">
<Description>OPNsense before 23.7.5 allows XSS via the index.php column_count parameter to the Lobby Dashboard.</Description>
<URL>https://github.com/opnsense/core/commit/484753b2abe3fd0fcdb73d8bf00c3fc3709eb8b7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-44276" CVSS="5.4">
<Description>OPNsense before 23.7.5 allows XSS via the index.php sequence parameter to the Lobby Dashboard.</Description>
<URL>https://github.com/opnsense/core/commit/484753b2abe3fd0fcdb73d8bf00c3fc3709eb8b7</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-44379" CVSS="6.1">
<Description>baserCMS is a website development framework. Prior to version 5.0.9, there is a cross-site scripting vulnerability in the site search feature. Version 5.0.9 contains a fix for this vulnerability.</Description>
<URL>https://github.com/baserproject/basercms/commit/18549396e5a9b8294306a54a876af164b0b57da4</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-44383" CVSS="5.4">
<Description>October is a Content Management System (CMS) and web platform to assist with development workflow. A user with access to the media manager that stores SVG files could create a stored XSS attack against themselves and any other user with access to the media manager when SVG files are supported. This issue has been patched in version 3.5.2.</Description>
<URL>https://github.com/octobercms/october/commit/b7eed0bbf54d07ff310fcdc7037a8e8bf1f5043b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-44390" CVSS="6.1">
<Description>HtmlSanitizer is a .NET library for cleaning HTML fragments and documents from constructs that can lead to XSS attacks. The vulnerability occurs in configurations where foreign content is allowed, i.e. either `svg` or `math` are in the list of allowed elements. In the case an application sanitizes user input with a vulnerable configuration, an attacker could bypass the sanitization and inject arbitrary HTML, including JavaScript code. Note that in the default configuration the vulnerability is not present. The vulnerability has been fixed in versions 8.0.723 and 8.1.722-beta (preview version).</Description>
<URL>https://github.com/mganss/HtmlSanitizer/commit/ab29319866c020f0cc11e6b92228cd8039196c6e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-45683" CVSS="6.1">
<Description>github.com/crewjam/saml is a saml library for the go language. In affected versions the package does not validate the ACS Location URI according to the SAML binding being parsed. If abused, this flaw allows attackers to register malicious Service Providers at the IdP and inject Javascript in the ACS endpoint definition, achieving Cross-Site-Scripting (XSS) in the IdP context during the redirection at the end of a SAML SSO Flow. Consequently, an attacker may perform any authenticated action as the victim once the victim’s browser loaded the SAML IdP initiated SSO link for the malicious service provider. Note: SP registration is commonly an unrestricted operation in IdPs, hence not requiring particular permissions or publicly accessible to ease the IdP interoperability. This issue is fixed in version 0.4.14. Users unable to upgrade may perform external validation of URLs provided in SAML metadata, or restrict the ability for end-users to upload arbitrary metadata.</Description>
<URL>https://github.com/crewjam/saml/commit/b07b16cf83c4171d16da4d85608cb827f183cd79</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-46235" CVSS="6.1">
<Description>FOG is a free open-source cloning/imaging/rescue suite/inventory management system. Prior to version 1.5.10.15, due to a lack of request sanitization in the logs, a malicious request containing XSS would be stored in a log file. When an administrator of the FOG server logged in and viewed the logs, they would be parsed as HTML and displayed accordingly. Version 1.5.10.15 contains a patch. As a workaround, view logs from an external text editor rather than the dashboard.</Description>
<URL>https://github.com/FOGProject/fogproject/commit/2e2421f19620669b9930f72fb73a8dbc5efe4980</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="80">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-46251" CVSS="6.1">
<Description> MyBB is a free and open source forum software. Custom MyCode (BBCode) for the visual editor (_SCEditor_) doesn't escape input properly when rendering HTML, resulting in a DOM-based XSS vulnerability. This weakness can be exploited by pointing a victim to a page where the visual editor is active (e.g. as a post or Private Message) and operates on a maliciously crafted MyCode message. This may occur on pages where message content is pre-filled using a GET/POST parameter, or on reply pages where a previously saved malicious message is quoted. The impact is be mitigated when: 1. the visual editor is disabled globally (_Admin CP → Configuration → Settings → Clickable Smilies and BB Code: [Clickable MyCode Editor](https://github.com/mybb/mybb/blob/mybb_1836/install/resources/settings.xml#L2087-L2094)_ is set to _Off_), or 2. the visual editor is disabled for individual user accounts (_User CP → Your Profile → Edit Options_: _Show the MyCode formatting options on the posting pages_ checkbox is not checked). MyBB 1.8.37 resolves this issue with the commit `6dcaf0b4d`. Users are advised to upgrade. Users unable to upgrade may mitigate the impact without upgrading MyBB by changing the following setting (_Admin CP → Configuration → Settings_): - _Clickable Smilies and BB Code → [Clickable MyCode Editor](https://github.com/mybb/mybb/blob/mybb_1836/install/resources/settings.xml#L2087-L2094)_: _Off_. Similarly, individual MyBB forum users are able to disable the visual editor by diabling the account option (_User CP → Your Profile → Edit Options_) _Show the MyCode formatting options on the posting pages_. </Description>
<URL>https://github.com/mybb/mybb/commit/6dcaf0b4db6254f1833fe8dae295d9ddc2219276</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-46722" CVSS="6.1">
<Description>The Pimcore Admin Classic Bundle provides a backend UI for Pimcore. Prior to version 1.2.0, a cross-site scripting vulnerability has the potential to steal a user's cookie and gain unauthorized access to that user's account through the stolen cookie or redirect users to other malicious sites. Users should upgrade to version 1.2.0 to receive a patch or, as a workaround, apply the patch manually.</Description>
<URL>https://github.com/pimcore/admin-ui-classic-bundle/commit/19fda2e86557c2ed4978316104de5ccdaa66d8b9</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="80">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-47125" CVSS="6.1">
<Description>TYPO3 is an open source PHP based web content management system released under the GNU GPL. In affected versions DOM processing instructions are not handled correctly. This allows bypassing the cross-site scripting mechanism of typo3/html-sanitizer. This vulnerability has been addressed in versions 1.5.3 and 2.1.4. Users are advised to upgrade. There are no known workarounds for this vulnerability.</Description>
<URL>https://github.com/TYPO3/html-sanitizer/commit/b8f90717251d968c49dc77f8c1e5912e2fbe0dff</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-47272" CVSS="6.1">
<Description>Roundcube 1.5.x before 1.5.6 and 1.6.x before 1.6.5 allows XSS via a Content-Type or Content-Disposition header (used for attachment preview or download).</Description>
<URL>https://github.com/roundcube/roundcubemail/commit/5ec496885e18ec6af956e8c0d627856c2257ba2d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-48300" CVSS="5.4">
<Description> The `Embed Privacy` plugin for WordPress that prevents the loading of embedded external content is vulnerable to Stored Cross-Site Scripting via `embed_privacy_opt_out` shortcode in versions up to, and including, 1.8.0 due to insufficient input sanitization and output escaping on user supplied attributes. This makes it possible for authenticated attackers with contributor-level and above permissions to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page. Version 1.8.1 contains a patch for this issue. </Description>
<URL>https://github.com/epiphyt/embed-privacy/commit/f80929992b2a5a66f4f4953cd6f46cc227154a5c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-48705" CVSS="5.4">
<Description>Nautobot is a Network Source of Truth and Network Automation Platform built as a web application All users of Nautobot versions earlier than 1.6.6 or 2.0.5 are potentially affected by a cross-site scripting vulnerability. Due to incorrect usage of Django's `mark_safe()` API when rendering certain types of user-authored content; including custom links, job buttons, and computed fields; it is possible that users with permission to create or edit these types of content could craft a malicious payload (such as JavaScript code) that would be executed when rendering pages containing this content. The maintainers have fixed the incorrect uses of `mark_safe()` (generally by replacing them with appropriate use of `format_html()` instead) to prevent such malicious data from being executed. Users on Nautobot 1.6.x LTM should upgrade to v1.6.6 and users on Nautobot 2.0.x should upgrade to v2.0.5. Appropriate object permissions can and should be applied to restrict which users are permitted to create or edit the aforementioned types of user-authored content. Other than that, there is no direct workaround available.</Description>
<URL>https://github.com/nautobot/nautobot/commit/362850f5a94689a4c75e3188bf6de826c3b012b2</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-49090" CVSS="6.1">
<Description>CarrierWave is a solution for file uploads for Rails, Sinatra and other Ruby web frameworks. CarrierWave has a Content-Type allowlist bypass vulnerability, possibly leading to XSS. The validation in `allowlisted_content_type?` determines Content-Type permissions by performing a partial match. If the `content_type` argument of `allowlisted_content_type?` is passed a value crafted by the attacker, Content-Types not included in the `content_type_allowlist` will be allowed. This issue has been patched in versions 2.2.5 and 3.0.5.</Description>
<URL>https://github.com/carrierwaveuploader/carrierwave/commit/39b282db5c1303899b3d3381ce8a837840f983b5</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-49146" CVSS="6.1">
<Description>DOMSanitizer (aka dom-sanitizer) before 1.0.7 allows XSS via an SVG document because of mishandling of comments and greedy regular expressions.</Description>
<URL>https://github.com/rhukster/dom-sanitizer/commit/c2a98f27ad742668b254282ccc5581871d0fb601</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-49276" CVSS="6.1">
<Description>Uptime Kuma is an open source self-hosted monitoring tool. In affected versions the Google Analytics element in vulnerable to Attribute Injection leading to Cross-Site-Scripting (XSS). Since the custom status interface can set an independent Google Analytics ID and the template has not been sanitized, there is an attribute injection vulnerability here, which can lead to XSS attacks. This vulnerability has been addressed in commit `f28dccf4e` which is included in release version 1.23.7. Users are advised to upgrade. There are no known workarounds for this vulnerability.</Description>
<URL>https://github.com/louislam/uptime-kuma/commit/f28dccf4e11f041564293e4f407e69ab9ee2277f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-49289" CVSS="5.4">
<Description>Ajax.NET Professional (AjaxPro) is an AJAX framework for Microsoft ASP.NET which will create proxy JavaScript classes that are used on client-side to invoke methods on the web server. Affected versions of this package are vulnerable cross site scripting attacks. Releases before version 21.12.22.1 are affected. Users are advised to upgrade. There are no known workarounds for this vulnerability.</Description>
<URL>https://github.com/michaelschwarz/Ajax.NET-Professional/commit/c89e39b9679fcb8ab6644fe21cc7e652cb615e2b</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-49296" CVSS="6.1">
<Description> The Arduino Create Agent allows users to use the Arduino Create applications to upload code to any USB connected Arduino board directly from the browser. A vulnerability in versions prior to 1.3.6 affects the endpoint `/certificate.crt` and the way the web interface of the ArduinoCreateAgent handles custom error messages. An attacker that is able to persuade a victim into clicking on a malicious link can perform a Reflected Cross-Site Scripting attack on the web interface of the create agent, which would allow the attacker to execute arbitrary browser client side code. Version 1.3.6 contains a fix for the issue. </Description>
<URL>https://github.com/arduino/arduino-create-agent/commit/9a0e582bb8a1ff8e70d202943ddef8625ccefcc8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-49802" CVSS="6.1">
<Description>The LinkedCustomFields plugin for MantisBT allows users to link values between two custom fields, creating linked drop-downs. Prior to version 2.0.1, cross-site scripting in the MantisBT LinkedCustomFields plugin allows Javascript execution, when a crafted Custom Field is linked via the plugin and displayed when reporting a new Issue or editing an existing one. This issue is fixed in version 2.0.1. As a workaround, one may utilize MantisBT's default Content Security Policy, which blocks script execution.</Description>
<URL>https://github.com/mantisbt-plugins/LinkedCustomFields/commit/30e5ae751e40d7ae18bfd794fd48671477b3d286</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-49926" CVSS="6.1">
<Description>app/Lib/Tools/EventTimelineTool.php in MISP before 2.4.179 allows XSS in the event timeline widget.</Description>
<URL>https://github.com/MISP/MISP/commit/dc73287ee2000476e3a5800ded402825ca10f7e8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-50725" CVSS="6.1">
<Description>Resque is a Redis-backed Ruby library for creating background jobs, placing them on multiple queues, and processing them later. The following paths in resque-web have been found to be vulnerable to reflected XSS: "/failed/?class=<script>alert(document.cookie)</script>" and "/queues/><img src=a onerror=alert(document.cookie)>". This issue has been patched in version 2.2.1.</Description>
<URL>https://github.com/resque/resque/commit/ee99d2ed6cc75d9d384483b70c2d96d312115f07</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-50727" CVSS="6.1">
<Description>Resque is a Redis-backed Ruby library for creating background jobs, placing them on multiple queues, and processing them later. Reflected XSS issue occurs when /queues is appended with /"><svg%20onload=alert(domain)>. This issue has been patched in version 2.6.0.</Description>
<URL>https://github.com/resque/resque/commit/7623b8dfbdd0a07eb04b19fb25b16a8d6f087f9a</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-52083" CVSS="4.8">
<Description>Winter is a free, open-source content management system. Prior to 1.2.4, users with the `media.manage_media` permission can upload files to the Media Manager and rename them after uploading. Previously, media manager files were only sanitized on upload, not on renaming, which could have allowed a stored XSS attack. This issue has been patched in v1.2.4.</Description>
<URL>https://github.com/wintercms/winter/commit/2969daeea8dee64d292dbaa3778ea251e2a7e491</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-52084" CVSS="5.4">
<Description>Winter is a free, open-source content management system. Prior to 1.2.4, Users with access to backend forms that include a ColorPicker FormWidget can provide a value that would then be rendered unescaped in the backend form, potentially allowing for a stored XSS attack. This issue has been patched in v1.2.4.</Description>
<URL>https://github.com/wintercms/winter/commit/517f65dfae679b57575b047de13c5af48915a5ba</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-52264" CVSS="6.1">
<Description>The beesblog (aka Bees Blog) component before 1.6.2 for thirty bees allows Reflected XSS because controllers/front/post.php sharing_url is mishandled.</Description>
<URL>https://github.com/thirtybees/beesblog/commit/a3aeed8fcf01c8e4112c168cf2ef7d67c8056daf</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-52322" CVSS="6.1">
<Description>ecrire/public/assembler.php in SPIP before 4.1.13 and 4.2.x before 4.2.7 allows XSS because input from _request() is not restricted to safe characters such as alphanumerics.</Description>
<URL>https://git.spip.net/spip/spip/commit/e90f5344b8c82711053053e778d38a35e42b7bcb</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-5793" CVSS="5.4">
<Description>A vulnerability was found in flusity CMS and classified as problematic. This issue affects the function loadCustomBlocCreateForm of the file /core/tools/customblock.php of the component Dashboard. The manipulation of the argument customblock_place leads to cross site scripting. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. This product does not use versioning. This is why information about affected and unaffected releases are unavailable. The patch is named 81252bc764e1de2422e79e36194bba1289e7a0a5. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-243599.</Description>
<URL>https://github.com/flusity/flusity-CMS/commit/81252bc764e1de2422e79e36194bba1289e7a0a5</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-5810" CVSS="4.8">
<Description>A vulnerability, which was classified as problematic, has been found in flusity CMS. This issue affects the function loadPostAddForm of the file core/tools/posts.php. The manipulation of the argument edit_post_id leads to cross site scripting. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. This product takes the approach of rolling releases to provide continious delivery. Therefore, version details for affected and updated releases are not available. The identifier of the patch is 6943991c62ed87c7a57989a0cb7077316127def8. It is recommended to apply a patch to fix this issue. The identifier VDB-243641 was assigned to this vulnerability.</Description>
<URL>https://github.com/flusity/flusity-CMS/commit/6943991c62ed87c7a57989a0cb7077316127def8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-5811" CVSS="4.8">
<Description>A vulnerability, which was classified as problematic, was found in flusity CMS. Affected is the function loadPostAddForm of the file core/tools/posts.php. The manipulation of the argument menu_id leads to cross site scripting. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. Continious delivery with rolling releases is used by this product. Therefore, no version details of affected nor updated releases are available. The patch is identified as 6943991c62ed87c7a57989a0cb7077316127def8. It is recommended to apply a patch to fix this issue. VDB-243642 is the identifier assigned to this vulnerability.</Description>
<URL>https://github.com/flusity/flusity-CMS/commit/6943991c62ed87c7a57989a0cb7077316127def8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-5835" CVSS="6.1">
<Description>A vulnerability classified as problematic was found in hu60t hu60wap6. Affected by this vulnerability is the function markdown of the file src/class/ubbparser.php. The manipulation leads to cross site scripting. The attack can be launched remotely. This product does not use versioning. This is why information about affected and unaffected releases are unavailable. The patch is named a1cd9f12d7687243bfcb7ce295665acb83b9174e. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-243775.</Description>
<URL>https://github.com/hu60t/hu60wap6/commit/a1cd9f12d7687243bfcb7ce295665acb83b9174e</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-5901" CVSS="4.8">
<Description> Cross-site Scripting in GitHub repository pkp/pkp-lib prior to 3.3.0-16. </Description>
<URL>https://github.com/pkp/pkp-lib/commit/44d8bde60eb2575fd4087b76540aec9b49389e23</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-5917" CVSS="6.1">
<Description>A vulnerability, which was classified as problematic, has been found in phpBB up to 3.3.10. This issue affects the function main of the file phpBB/includes/acp/acp_icons.php of the component Smiley Pack Handler. The manipulation of the argument pak leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 3.3.11 is able to address this issue. The patch is named ccf6e6c255d38692d72fcb613b113e6eaa240aac. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-244307.</Description>
<URL>https://github.com/phpbb/phpbb/commit/ccf6e6c255d38692d72fcb613b113e6eaa240aac</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-6981" CVSS="4.9">
<Description>The WP SMS – Messaging & SMS Notification for WordPress, WooCommerce, GravityForms, etc plugin for WordPress is vulnerable to SQL Injection via the 'group_id' parameter in all versions up to, and including, 6.5 due to insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query. This makes it possible for authenticated attackers, with contributor-level access and above, to append additional SQL queries into already existing queries that can be used to extract sensitive information from the database. This can leveraged to achieve Reflected Cross-site Scripting.</Description>
<URL>https://github.com/wp-sms/wp-sms/commit/6656de201efe67c7983102c344a546eed976a819</URL>
<CWE ID="89">
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Query Injection"/>
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Query Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
<Failure Comment="via SQL Injection">Data Tempering (TPR)</Failure>
<Failure Comment="via SQL Injection">Information Exposure (IEX)</Failure>
</CVE>
<CVE ID="CVE-2023-7076" CVSS="6.1">
<Description>A vulnerability was found in slawkens MyAAC up to 0.8.13. It has been declared as problematic. This vulnerability affects unknown code of the file system/pages/bugtracker.php. The manipulation of the argument bug[2]['subject']/bug[2]['text']/report['subject'] leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 0.8.14 is able to address this issue. The name of the patch is 83a91ec540072d319dd338abff45f8d5ebf48190. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-248848.</Description>
<URL>https://github.com/otsoft/myaac/commit/83a91ec540072d319dd338abff45f8d5ebf48190</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-7166" CVSS="5.4">
<Description>A vulnerability classified as problematic has been found in Novel-Plus up to 4.2.0. This affects an unknown part of the file /user/updateUserInfo of the component HTTP POST Request Handler. The manipulation of the argument nickName leads to cross site scripting. It is possible to initiate the attack remotely. The exploit has been disclosed to the public and may be used. The identifier of the patch is c62da9bb3a9b3603014d0edb436146512631100d. It is recommended to apply a patch to fix this issue. The identifier VDB-249201 was assigned to this vulnerability.</Description>
<URL>https://github.com/201206030/novel-plus/commit/c62da9bb3a9b3603014d0edb436146512631100d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2023-7171" CVSS="4.8">
<Description>A vulnerability was found in Novel-Plus up to 4.2.0. It has been declared as problematic. Affected by this vulnerability is an unknown functionality of the file novel-admin/src/main/java/com/java2nb/novel/controller/FriendLinkController.java of the component Friendly Link Handler. The manipulation leads to cross site scripting. The attack can be launched remotely. The exploit has been disclosed to the public and may be used. The patch is named d6093d8182362422370d7eaf6c53afde9ee45215. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-249307.</Description>
<URL>https://github.com/201206030/novel-plus/commit/d6093d8182362422370d7eaf6c53afde9ee45215</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-0435" CVSS="8.1">
<Description> User can send a chat that contains an XSS opportunity that will then run when the chat is sent and on subsequent page loads. Given the minimum requirement for a user to send a chat is to be given access to a workspace via an admin the risk is low. Additionally, the location in which the XSS renders is only limited to the user who submits the XSS. Ultimately, this attack is limited to the user attacking themselves. There is no anonymous chat submission unless the user does not take the minimum steps required to protect their instance. </Description>
<URL>https://github.com/mintplex-labs/anything-llm/commit/a4ace56a401ffc8ce0082d7444159dfd5dc28834</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-21627" CVSS="6.1">
<Description>PrestaShop is an open-source e-commerce platform. Prior to versions 8.1.3 and 1.7.8.11, some event attributes are not detected by the `isCleanHTML` method. Some modules using the `isCleanHTML` method could be vulnerable to cross-site scripting. Versions 8.1.3 and 1.7.8.11 contain a patch for this issue. The best workaround is to use the `HTMLPurifier` library to sanitize html input coming from users. The library is already available as a dependency in the PrestaShop project. Beware though that in legacy object models, fields of `HTML` type will call `isCleanHTML`.</Description>
<URL>https://github.com/PrestaShop/PrestaShop/commit/73cfb44666818eefd501b526a894fe884dd12129</URL>
<CWE ID="20">
<MainWeakness Cause="Erroneous Code" Operation="Verify" Consequence="Incosnistent Value"/>
<MainWeakness Cause="Erroneous Code" Operation="Validate" Consequence="Invalid Data"/>
<MainWeakness Cause="Erroneous Code" Operation="Verify" Consequence="Wrong Value"/>
<MainWeakness Cause="Missing Code" Operation="Validate" Consequence="Invalid Data"/>
<MainWeakness Cause="Missing Code" Operation="Verify" Consequence="Wrong Type"/>
<MainWeakness Cause="Missing Code" Operation="Verify" Consequence="Wrong Value"/>
<MainWeakness Cause="Missing Code" Operation="Verify" Consequence="Incosnistent Value"/>
<MainWeakness Cause="Erroneous Code" Operation="Verify" Consequence="Wrong Type"/>
</CWE>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-21628" CVSS="6.1">
<Description>PrestaShop is an open-source e-commerce platform. Prior to version 8.1.3, the isCleanHtml method is not used on this this form, which makes it possible to store a cross-site scripting payload in the database. The impact is low because the HTML is not interpreted in BO, thanks to twig's escape mechanism. In FO, the cross-site scripting attack is effective, but only impacts the customer sending it, or the customer session from which it was sent. This issue affects those who have a module fetching these messages from the DB and displaying it without escaping HTML. Version 8.1.3 contains a patch for this issue.</Description>
<URL>https://github.com/PrestaShop/PrestaShop/commit/c3d78b7e49f5fe49a9d07725c3174d005deaa597</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-21636" CVSS="6.1">
<Description>view_component is a framework for building reusable, testable, and encapsulated view components in Ruby on Rails. Versions prior to 3.9.0 and 2.83.0 have a cross-site scripting vulnerability that has the potential to impact anyone rendering a component directly from a controller with the view_component gem. Note that only components that define a `#call` method (i.e. instead of using a sidecar template) are affected. The return value of the `#call` method is not sanitized and can include user-defined content. In addition, the return value of the `#output_postamble` methodis not sanitized, which can also lead to cross-site scripting issues. Versions 3.9.0 and 2.83.0 have been released and fully mitigate both the `#call` and the `#output_postamble` vulnerabilities. As a workaround, sanitize the return value of `#call`.</Description>
<URL>https://github.com/ViewComponent/view_component/commit/0d26944a8d2730ea40e60eae23d70684483e5017</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-22199" CVSS="6.1">
<Description> This package provides universal methods to use multiple template engines with the Fiber web framework using the Views interface. This vulnerability specifically impacts web applications that render user-supplied data through this template engine, potentially leading to the execution of malicious scripts in users' browsers when visiting affected web pages. The vulnerability has been addressed, the template engine now defaults to having autoescape set to `true`, effectively mitigating the risk of XSS attacks. </Description>
<URL>https://github.com/gofiber/template/commit/28cff3ac4d4c117ab25b5396954676d624b6cb46</URL>
<CWE ID="20">
<MainWeakness Cause="Erroneous Code" Operation="Verify" Consequence="Incosnistent Value"/>
<MainWeakness Cause="Erroneous Code" Operation="Validate" Consequence="Invalid Data"/>
<MainWeakness Cause="Erroneous Code" Operation="Verify" Consequence="Wrong Value"/>
<MainWeakness Cause="Missing Code" Operation="Validate" Consequence="Invalid Data"/>
<MainWeakness Cause="Missing Code" Operation="Verify" Consequence="Wrong Type"/>
<MainWeakness Cause="Missing Code" Operation="Verify" Consequence="Wrong Value"/>
<MainWeakness Cause="Missing Code" Operation="Verify" Consequence="Incosnistent Value"/>
<MainWeakness Cause="Erroneous Code" Operation="Verify" Consequence="Wrong Type"/>
</CWE>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="116">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Command Injection"/>
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Parameter Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Parameter Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Command Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-22411" CVSS="5.4">
<Description>Avo is a framework to create admin panels for Ruby on Rails apps. In Avo 3 pre12, any HTML inside text that is passed to `error` or `succeed` in an `Avo::BaseAction` subclass will be rendered directly without sanitization in the toast/notification that appears in the UI on Action completion. A malicious user could exploit this vulnerability to trigger a cross site scripting attack on an unsuspecting user. This issue has been addressed in the 3.3.0 and 2.47.0 releases of Avo. Users are advised to upgrade.</Description>
<URL>https://github.com/avo-hq/avo/commit/51bb80b181cd8e31744bdc4e7f9b501c81172347</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-22417" CVSS="6.1">
<Description>Whoogle Search is a self-hosted metasearch engine. In versions 0.8.3 and prior, the `element` method in `app/routes.py` does not validate the user-controlled `src_type` and `element_url` variables and passes them to the `send` method which sends a `GET` request on lines 339-343 in `requests.py`. The returned contents of the URL are then passed to and reflected back to the user in the `send_file` function on line 484, together with the user-controlled `src_type`, which allows the attacker to control the HTTP response content type leading to a cross-site scripting vulnerability. An attacker could craft a special URL to point to a malicious website and send the link to a victim. The fact that the link would contain a trusted domain (e.g. from one of public Whoogle instances) could be used to trick the user into clicking the link. The malicious website could, for example, be a copy of a real website, meant to steal a person’s credentials to the website, or trick that person in another way. Version 0.8.4 contains a patch for this issue.</Description>
<URL>https://github.com/benbusby/whoogle-search/commit/3a2e0b262e4a076a20416b45e6b6f23fd265aeda</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-23645" CVSS="6.1">
<Description> GLPI is a Free Asset and IT Management Software package. A malicious URL can be used to execute XSS on reports pages. Upgrade to 10.0.12. </Description>
<URL>https://github.com/glpi-project/glpi/commit/6cf265936c4f6edf7dea7c78b12e46d75b94d9b0</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-23659" CVSS="6.1">
<Description>SPIP before 4.1.14 and 4.2.x before 4.2.8 allows XSS via the name of an uploaded file. This is related to javascript/bigup.js and javascript/bigup.utils.js.</Description>
<URL>https://git.spip.net/spip/bigup/commit/0757f015717cb72b84dba0e9a375ec71caddf1c2</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-23834" CVSS="6.1">
<Description>Discourse is an open-source discussion platform. Improperly sanitized user input could lead to an XSS vulnerability in some situations. This vulnerability only affects Discourse instances which have disabled the default Content Security Policy. The vulnerability is patched in 3.1.5 and 3.2.0.beta5. As a workaround, ensure Content Security Policy is enabled and does not include `unsafe-inline`.</Description>
<URL>https://github.com/discourse/discourse/commit/568d704a94c528b7c2cb0f3512a7b7b606bc3000</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-23841" CVSS="6.1">
<Description>apollo-client-nextjs is the Apollo Client support for the Next.js App Router. The @apollo/experimental-apollo-client-nextjs NPM package is vulnerable to a cross-site scripting vulnerability. To exploit this vulnerability, an attacker would need to either inject malicious input (e.g. by redirecting a user to a specifically-crafted link) or arrange to have malicious input be returned by a GraphQL server (e.g. by persisting it in a database). To fix this issue, please update to version 0.7.0 or later.</Description>
<URL>https://github.com/apollographql/apollo-client-nextjs/commit/b92bc42abd5f8e17d4db361c36bd08e4f541a46b</URL>
<CWE ID="80">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-24556" CVSS="6.1">
<Description>urql is a GraphQL client that exposes a set of helpers for several frameworks. The `@urql/next` package is vulnerable to XSS. To exploit this an attacker would need to ensure that the response returns `html` tags and that the web-application is using streamed responses (non-RSC). This vulnerability is due to improper escaping of html-like characters in the response-stream. To fix this vulnerability upgrade to version 1.1.1</Description>
<URL>https://github.com/urql-graphql/urql/commit/4b7011b70d5718728ff912d02a4dbdc7f703540d</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-24558" CVSS="6.1">
<Description> TanStack Query supplies asynchronous state management, server-state utilities and data fetching for the web. The `@tanstack/react-query-next-experimental` NPM package is vulnerable to a cross-site scripting vulnerability. To exploit this, an attacker would need to either inject malicious input or arrange to have malicious input be returned from an endpoint. To fix this issue, please update to version 5.18.0 or later. </Description>
<URL>https://github.com/TanStack/query/commit/f2ddaf2536e8b71d2da88a9310ac9a48c13512a1</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-24571" CVSS="5.4">
<Description>facileManager is a modular suite of web apps built with the sysadmin in mind. For the facileManager web application versions 4.5.0 and earlier, we have found that XSS was present in almost all of the input fields as there is insufficient input validation.</Description>
<URL>https://github.com/WillyXJ/facileManager/commit/0aa850d4b518f10143a4c675142b15caa5872877</URL>
<CWE ID="80">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-24574" CVSS="6.1">
<Description>phpMyFAQ is an open source FAQ web application for PHP 8.1+ and MySQL, PostgreSQL and other databases. Unsafe echo of filename in phpMyFAQ\phpmyfaq\admin\attachments.php leads to allowed execution of JavaScript code in client side (XSS). This vulnerability has been patched in version 3.2.5.</Description>
<URL>https://github.com/thorsten/phpMyFAQ/commit/5479b4a4603cce71aa7eb4437f1c201153a1f1f5</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<CWE ID="80">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-24815" CVSS="6.1">
<Description>CKEditor4 is an open source what-you-see-is-what-you-get HTML editor. A cross-site scripting vulnerability has been discovered in the core HTML parsing module in versions of CKEditor4 prior to 4.24.0-lts. It may affect all editor instances that enabled full-page editing mode or enabled CDATA elements in Advanced Content Filtering configuration (defaults to `script` and `style` elements). The vulnerability allows attackers to inject malformed HTML content bypassing Advanced Content Filtering mechanism, which could result in executing JavaScript code. An attacker could abuse faulty CDATA content detection and use it to prepare an intentional attack on the editor. A fix is available in version 4.24.0-lts.</Description>
<URL>https://github.com/ckeditor/ckeditor4/commit/8ed1a3c93d0ae5f49f4ecff5738ab8a2972194cb</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-24816" CVSS="6.1">
<Description>CKEditor4 is an open source what-you-see-is-what-you-get HTML editor. A cross-site scripting vulnerability vulnerability has been discovered in versions prior to 4.24.0-lts in samples that use the `preview` feature. All integrators that use these samples in the production code can be affected. The vulnerability allows an attacker to execute JavaScript code by abusing the misconfigured preview feature. It affects all users using the CKEditor 4 at version < 4.24.0-lts with affected samples used in a production environment. A fix is available in version 4.24.0-lts.</Description>
<URL>https://github.com/ckeditor/ckeditor4/commit/8ed1a3c93d0ae5f49f4ecff5738ab8a2972194cb</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-25107" CVSS="6.1">
<Description>WikiDiscover is an extension designed for use with a CreateWiki managed farm to display wikis. On Special:WikiDiscover, the `Language::date` function is used when making the human-readable timestamp for inclusion on the wiki_creation column. This function uses interface messages to translate the names of months and days. It uses the `->text()` output mode, returning unescaped interface messages. Since the output is not escaped later, the unescaped interface message is included on the output, resulting in an XSS vulnerability. Exploiting this on-wiki requires the `(editinterface)` right. This vulnerability has been addressed in commit `267e763a0`. Users are advised to update their installations. There are no known workarounds for this vulnerability.</Description>
<URL>https://github.com/miraheze/WikiDiscover/commit/267e763a0d7460f001693c42f67717a0fc3fd6bb</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-25109" CVSS="6.5">
<Description>ManageWiki is a MediaWiki extension allowing users to manage wikis. Special:ManageWiki does not escape escape interface messages on the `columns` and `help` keys on the form descriptor. An attacker may exploit this and would have a cross site scripting attack vector. Exploiting this on-wiki requires the `(editinterface)` right. Users should apply the code changes in commits `886cc6b94`, `2ef0f50880`, and `6942e8b2c` to resolve this vulnerability. There are no known workarounds for this vulnerability.</Description>
<URL>https://github.com/miraheze/ManageWiki/commit/2ef0f50880d7695ca2874dc8dd515b2b9bbb02e5</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-26128" CVSS="5.4">
<Description>baserCMS is a website development framework. Prior to version 5.0.9, there is a cross-site scripting vulnerability in the content management feature. Version 5.0.9 contains a fix for this vulnerability.</Description>
<URL>https://github.com/baserproject/basercms/commit/18f426d63e752b4d22c40e9ea8d1f6e692ef601c</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-26143" CVSS="6.1">
<Description>Rails is a web-application framework. There is a possible XSS vulnerability when using the translation helpers in Action Controller. Applications using translation methods like translate, or t on a controller, with a key ending in "_html", a :default key which contains untrusted user input, and the resulting string is used in a view, may be susceptible to an XSS vulnerability. The vulnerability is fixed in 7.1.3.1 and 7.0.8.1.</Description>
<URL>https://github.com/rails/rails/commit/4c83b331092a79d58e4adffe4be5f250fa5782cc</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-26148" CVSS="6.1">
<Description>Querybook is a user interface for querying big data. Prior to version 3.31.1, there is a vulnerability in Querybook's rich text editor that enables users to input arbitrary URLs without undergoing necessary validation. This particular security flaw allows the use of `javascript:` protocol which can potentially trigger arbitrary client-side execution. The most extreme exploit of this flaw could occur when an admin user unknowingly clicks on a cross-site scripting URL, thereby unintentionally compromising admin role access to the attacker. A patch to rectify this issue has been introduced in Querybook version `3.31.1`. The fix is backward compatible and automatically fixes existing DataDocs. There are no known workarounds for this issue, except for manually checking each URL prior to clicking on them.</Description>
<URL>https://github.com/pinterest/querybook/commit/bc620dabaaf13ff1dcb30af0b46a490403fb9908</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-26152" CVSS="4.7">
<Description> ### Summary On all Label Studio versions prior to 1.11.0, data imported via file upload feature is not properly sanitized prior to being rendered within a [`Choices`](https://labelstud.io/tags/choices) or [`Labels`](https://labelstud.io/tags/labels) tag, resulting in an XSS vulnerability. ### Details Need permission to use the "data import" function. This was reproduced on Label Studio 1.10.1. ### PoC 1. Create a project. ![Create a project](https://github.com/HumanSignal/label-studio/assets/3943358/9b1536ad-feac-4238-a1bd-ca9b1b798673) 2. Upload a file containing the payload using the "Upload Files" function. ![2 Upload a file containing the payload using the Upload Files function](https://github.com/HumanSignal/label-studio/assets/3943358/26bb7af1-1cd2-408f-9adf-61e31a5b7328) ![3 complete](https://github.com/HumanSignal/label-studio/assets/3943358/f2f62774-1fa6-4456-9e6f-8fa1ca0a2d2e) The following are the contents of the files used in the PoC ``` { "data": { "prompt": "labelstudio universe image", "images": [ { "value": "id123#0", "style": "margin: 5px", "html": "<img width='400' src='https://labelstud.io/_astro/images-tab.64279c16_ZaBSvC.avif' onload=alert(document.cookie)>" } ] } } ``` 3. Select the text-to-image generation labeling template of Ranking and scoring ![3 Select the text-to-image generation labelling template for Ranking and scoring](https://github.com/HumanSignal/label-studio/assets/3943358/f227f49c-a718-4738-bc2a-807da4f97155) ![5 save](https://github.com/HumanSignal/label-studio/assets/3943358/9b529f8a-8e99-4bb0-bdf6-bb7a95c9b75d) 4. Select a task ![4 Select a task](https://github.com/HumanSignal/label-studio/assets/3943358/71856b7a-2b1f-44ea-99ab-fc48bc20caa7) 5. Check that the script is running ![5 Check that the script is running](https://github.com/HumanSignal/label-studio/assets/3943358/e396ae7b-a591-4db7-afe9-5bab30b48cb9) ### Impact Malicious scripts can be injected into the code, and when linked with vulnerabilities such as CSRF, it can cause even greater damage. In particular, It can become a source of further attacks, especially when linked to social engineering. </Description>
<URL>https://github.com/HumanSignal/label-studio/commit/5df9ae3828b98652e9fa290a19f4deedf51ef6c8</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-27103" CVSS="6.1">
<Description>Querybook is a Big Data Querying UI. When a user searches for their queries, datadocs, tables and lists, the search result is marked and highlighted, and this feature uses dangerouslySetInnerHTML which means that if the highlighted result has an XSS payload it will trigger. While the input to dangerouslySetInnerHTML is not sanitized for the data inside of queries which leads to an XSS vulnerability. During the "query auto-suggestion" the name of the suggested tables are set with innerHTML which leads to the XSS vulnerability. A patch to rectify this issue has been introduced in Querybook version 3.31.2.</Description>
<URL>https://github.com/pinterest/querybook/commit/449bdc9e7d679e042c3718b7ed07d2ffa3c46a8f</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-27104" CVSS="4.5">
<Description> GLPI is a Free Asset and IT Management Software package, Data center management, ITIL Service Desk, licenses tracking and software auditing. A user with rights to create and share dashboards can build a dashboard containing javascript code. Any user that will open this dashboard will be subject to an XSS attack. This issue has been patched in version 10.0.13. </Description>
<URL>https://github.com/glpi-project/glpi/commit/b409ca437864607b03c2014b9e3293b7f141af65</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
<CVE ID="CVE-2024-27914" CVSS="5.3">
<Description> GLPI is a Free Asset and IT Management Software package, Data center management, ITIL Service Desk, licenses tracking and software auditing. An unauthenticated user can provide a malicious link to a GLPI administrator in order to exploit a reflected XSS vulnerability. The XSS will only trigger if the administrator navigates through the debug bar. This issue has been patched in version 10.0.13. </Description>
<URL>https://github.com/glpi-project/glpi/commit/69e0dee8de0c0df139b42dbfa1a8997888c2af95</URL>
<CWE ID="79">
<MainWeakness Cause="Missing Code" Operation="Sanitize" Consequence="Source Code Injection"/>
<MainWeakness Cause="Erroneous Code" Operation="Sanitize" Consequence="Source Code Injection"/>
</CWE>
<Failure Comment="via Cross-site scripting (XSS)">Arbitrary Code Execution (ACE)</Failure>
</CVE>
</QueryResult>